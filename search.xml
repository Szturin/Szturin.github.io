<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【HEXO】[2] 多线程部署常见问题</title>
      <link href="/posts/45608/"/>
      <url>/posts/45608/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo更新日志"><a class="markdownIt-Anchor" href="#hexo更新日志"></a> HEXO更新日志</h1><p><strong>2024.5.3</strong></p><ul><li>重要更新：将HEXO博客部署到腾讯云轻量化服务器，极大提升国内访问速度，访问ip地址：<a href="http://122.51.23.7/">Turin’s Blog - 数理照亮世界</a></li><li>优化主页文章卡片界面，参考文章：<a href="https://butterfly.zhheo.com/home.html">首页 | Butterfly主题美化教程 (zhheo.com)</a></li><li>优化网站页面显示效果：透明度。<a href="https://qianchenggit.github.io/2021/10/06/%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E4%BD%BF%E7%94%A8%E4%B8%80%E5%9B%BE%E6%B5%81/">博客背景使用一图流 | QianChengGit の小森林</a></li></ul><hr><h1 id="一-hexo部署到云服务器ubuntu系统"><a class="markdownIt-Anchor" href="#一-hexo部署到云服务器ubuntu系统"></a> 一、HEXO部署到云服务器(Ubuntu系统)</h1><p><strong><a href="https://cloud.tencent.com/developer/article/1945550">Hexo部署至服务器（Ubuntu 20.04）-腾讯云开发者社区-腾讯云 (tencent.com)</a></strong></p><p><strong><a href="https://blog.cpen.top/posts/38874.html">04_Hexo-多平台部署-云服务器-GitHub-Gitee | Mycpen</a></strong></p><h1 id="二-ubuntu允许root连接服务器"><a class="markdownIt-Anchor" href="#二-ubuntu允许root连接服务器"></a> 二、Ubuntu允许root连接服务器</h1><p><a href="https://blog.csdn.net/crayon0/article/details/122272001">Linux开启ssh并允许root登录（ubuntu、centos、kalilinux）_ssh允许root远程登录-CSDN博客</a></p><blockquote><p>报错信息 “E45: ‘readonly’ option is set (add ! to override)” 是在使用 Vim 或 Neovim 文本编辑器时可能遇到的一个错误信息。当您尝试将更改写入以只读模式打开的文件时，就会出现这条信息。这种情况可能由几个原因引起，例如，您正在编辑的文件在文件系统级别启用了写保护，或者 Vim 打开了一个它认为不应该修改的文件（例如，系统配置文件或标记为“只读”的文件）。</p><p>要解决这个问题并强制 Vim 或 Neovim 尽管文件处于只读状态也要写入更改，您可以使用 <code>:w!</code> 命令，其中 <code>w</code> 代表“写入”，<code>!</code> 实际上意味着“强制”或“覆盖”。</p><p>下面是如何处理这种情况：</p><h3 id="如果您打算修改文件"><a class="markdownIt-Anchor" href="#如果您打算修改文件"></a> 如果您打算修改文件</h3><ol><li><p><strong>强制保存更改</strong>：如果您知道文件是安全可编辑的，且打算保存更改，可以使用 <code>:w!</code> 命令强制保存更改。这告诉 Vim 覆盖只读限制。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:w!</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>更改文件权限</strong>：如果文件是只读的是因为文件系统权限，您可能需要在 Vim 外部更改其权限。例如，在类 Unix 系统（Linux、macOS）上，您可以使用 <code>chmod</code> 命令使文件可写。假设文件名为 <code>example.txt</code>；您可以使用：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +w example.txt</span><br></pre></td></tr></tbody></table></figure><p>然后，在 Vim 内尝试再次保存文件。</p></li></ol><h3 id="如果文件应保持不变"><a class="markdownIt-Anchor" href="#如果文件应保持不变"></a> 如果文件应保持不变</h3><p>如果文件应该是只读的，且您不小心做了更改或重新考虑了您的编辑，有几个操作您可以执行：</p><ol><li><p><strong>撤销更改</strong>：通过使用 Vim 中的撤销命令 <code>u</code> 手动撤销更改，直到您恢复到文件的原始状态。</p></li><li><p><strong>不保存并退出</strong>：如果您想退出 Vim 而不保存任何更改，可以使用 <code>:q!</code> 命令，它退出 Vim 且不保存。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:q!</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="理解只读文件"><a class="markdownIt-Anchor" href="#理解只读文件"></a> 理解只读文件</h3><p>在决定覆盖其只读状态之前，了解文件为什么可能处于只读模式是很重要的。文件可以因各种原因而被设置为只读：</p><ul><li>文件可能在文件系统级别被标记为只读，以防止意外更改。</li><li>文件可能属于另一个用户或需要管理员权限才能修改。</li><li>Vim 可能会在检测到文件正在被另一个进程使用时，以只读模式打开文件。</li><li>某些配置或命令（如使用 <code>vim -R &lt;filename&gt;</code> 打开文件）可以指示 Vim 以只读模式打开文件。</li></ul><p>在尝试覆盖文件的只读状态之前，始终确保修改文件是恰当的。</p></blockquote><p><strong>root终端连接效果</strong></p><img src="/posts/45608/image-20240503134748284.png" class="" title="image-20240503134748284"><h2 id="公网ip访问blog网站"><a class="markdownIt-Anchor" href="#公网ip访问blog网站"></a> 公网ip访问Blog网站</h2><img src="/posts/45608/image-20240503135033425.png" class="" title="image-20240503135033425"><p><strong>总结：使用腾讯云服务器（Unbuntu系统）部署Hexo博客，踩雷无数。此次部署博主理解了Linux服务器的详细配置流程，blog网站的访问速度得到了大幅度的提升，免受”科学上网“之苦</strong></p><h1 id="三-问题待解决"><a class="markdownIt-Anchor" href="#三-问题待解决"></a> 三、问题（待解决）</h1><h2 id="一-每次deploy需要输入服务器root密码"><a class="markdownIt-Anchor" href="#一-每次deploy需要输入服务器root密码"></a> 一、每次deploy需要输入服务器root密码</h2><ul><li><p><strong>解决方案：配置SSH公钥</strong></p></li><li><p><strong>参考文章：</strong><a href="https://zhuanlan.zhihu.com/p/549151974">Hexo历险记之八SSH远程链接服务器 - 知乎 (zhihu.com)</a></p></li></ul><p><strong>将git环境下的ssh公钥配置到服务器中的authorized_keys，并且修改sshd_config文件，配置好ssh各项权限</strong></p><img src="/posts/45608/image-20240503153851704.png" class="" title="image-20240503153851704"><p>**最终效果：**免密连接</p><img src="/posts/45608/image-20240503154119191.png" class="" title="image-20240503154119191"><p><strong>PS: 允许不同环境的终端配对的公钥可能不一样，这里使用git bash，要连接的服务器那边就需要使用git bash生成的公钥，才能实现免密登录，这样每次deploy时无需输入密码</strong></p><h2 id="二-blog域名"><a class="markdownIt-Anchor" href="#二-blog域名"></a> 二、Blog域名</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 博客搭建 </category>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> 博客 </tag>
            
            <tag> github </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ROS2】“人在回路”---与生成式人工智能交互的视觉医疗机器人</title>
      <link href="/posts/17498/"/>
      <url>/posts/17498/</url>
      
        <content type="html"><![CDATA[<h1 id="人在回路与生成式人工智能交互的视觉医疗机器人"><a class="markdownIt-Anchor" href="#人在回路与生成式人工智能交互的视觉医疗机器人"></a> “人在回路”—与生成式人工智能交互的视觉医疗机器人</h1><p><strong>第一次更新：2024.4.28</strong></p><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><ul><li><p>人在回路（Human-in-the-loop）是一种模式，类似于人机闭环系统或人机互助系统。这种模式被认为是机器学习、人工智能和机器智能的一种可行发展模式，需要人与机器之间的相互作用。在这种模式下，人类始终是模型的一部分，影响着模型的结果，并且需要人类的智能来帮助机器更加智能化。</p></li><li><p>ChatGPT是一款强大的基于深度学习的自然语言处理模型，能够生成高质量的自然语言文本。使用ChatGPT+TogetheROS，即ChatRobot将文字描述转化为小车控制指令，根据描述生成特定功能的代码，使机器人按照描述执行相应的任务。–转自NodeHube社区。–转自NobeHube</p></li></ul><p><strong>我们的机器人定位为医疗服务型机器人（小车），可以通过Opencv等进行视觉巡线，基于类似激光雷达测距的方法实现自主导航运动，满足不同场景下的控制需求。我们计划使用OpenAI提供的API接口写入小车系统，实现初步的语音交互到控制的过程。基于ROS2系统的基本概念，使用"人在回路"的模型训练方法，完善机器人行为模型的逻辑，在后续对GPT接口的开发中，我们设想可以与Chatgpt进行“人在回路”的系统训练，基本实现我们的设想目标。</strong></p><h3 id="xxxxxxxxxx-typedef-structtypedef为成员列表提供了一个gpio_inittypedef的名字gpio_inittypedefc"><a class="markdownIt-Anchor" href="#xxxxxxxxxx-typedef-structtypedef为成员列表提供了一个gpio_inittypedef的名字gpio_inittypedefc"></a> xxxxxxxxxx&nbsp;typedef struct//typedef为成员列表提供了一个GPIO_InitTypeDef的名字{}GPIO_InitTypeDef;c</h3><p><strong>传统的服务型机器人设计，往往是按照设定好的行为逻辑，这种设计过于机械化。而在医疗领域，传统的机器人显然不足以应对以人为核心的服务化需要。所以我们设想，利用“人在回路“是否可以使得机器人简单地接近于人类的思维模式。通过搭载国产AI领军行业地平线的RDK X3作为主控，制作一个能够服务于医疗看护领域，能够先实现简单的例如：自主导航、送药、语音交互（基于ChatGPT）。最终通过人机闭环互助的特性，能够服务于医疗产业，实现基本的环境监测、甚至能够某种程度上改善病人心理健康的服务型机器人，服务于人类社会</strong></p><p><strong>人类能够根据实际情况灵活调整策略和方法，这种能力是当前机器人或人工智能难以完全实现的。通过人在回路，机器人在执行任务时可以依据人类的指示灵活调整其行为和策略，更好地适应复杂多变的环境，这就是我们设计的初步思想，虽然从技术的角度出发还有非常遥远的距离，但是我们可以通过这种方法和思想，逐步完善机器人的基本功能</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> ROS2 </category>
          
          <category> Linux </category>
          
          <category> RDK X3 </category>
          
          <category> 人工智能 </category>
          
          <category> Ubuntu </category>
          
          <category> ROS2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> RDK X3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【微机原理】[软件操作]仿真调试</title>
      <link href="/posts/45531/"/>
      <url>/posts/45531/</url>
      
        <content type="html"><![CDATA[<h1 id="软键盘"><a class="markdownIt-Anchor" href="#软键盘"></a> 软键盘</h1><img src="/posts/45531/image-20240427152809497.png" class="" title="image-20240427152809497"><h1 id="选择使用按键的属性"><a class="markdownIt-Anchor" href="#选择使用按键的属性"></a> 选择使用按键的属性</h1><img src="/posts/45531/image-20240427152840915.png" class="" title="image-20240427152840915">]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> PIC单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> PIC单片机 </tag>
            
            <tag> MPLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【stm32单片机】[8]AD/DA转换</title>
      <link href="/posts/56223/"/>
      <url>/posts/56223/</url>
      
        <content type="html"><![CDATA[<h1 id="库函数解释"><a class="markdownIt-Anchor" href="#库函数解释"></a> 库函数解释</h1><blockquote><p><strong>配置ADC时钟的前分配比，配置APB2的分配，输入到ADCCLK</strong></p><p>void RCC_ADCCLKConfig(uint32_t RCC_PCLK2);</p><p><strong>恢复缺省配置</strong></p><p>void ADC_DeInit(ADC_TypeDef* ADCx);</p><p><strong>ADC初始化</strong></p><p>void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct);</p><p><strong>结构体初始化</strong></p><p>void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct);</p><p><strong>ADC上电</strong></p><p>void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);</p><p><strong>开启DMA输出信号</strong></p><p>void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState);</p><p><strong>中断输出控制</strong></p><p>void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState);</p><ul><li>用于控制某个中断能否通往NVIC</li></ul><p><strong>复位校准</strong></p><p>void ADC_ResetCalibration(ADC_TypeDef* ADCx);</p><p><strong>获取复位校准状态</strong></p><p>void ADC_ResetCalibration(ADC_TypeDef* ADCx);</p><p><strong>开始校准</strong></p><p>void ADC_StartCalibration(ADC_TypeDef* ADCx);</p><p><strong>获取开始校准状态</strong></p><p>FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx);</p><p><strong>ADC软件触发的函数</strong></p><p>void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);</p><p><strong>ADC获取软件转换状态</strong></p><p>FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx);</p><ul><li><p>实际上是获取CR2的SWSTART这一位,但是SWSTART在开始ADC转换后直接清除，所以并不能通过这个函数获得是否开始转换的信息</p><img src="/posts/56223/image-20240423220300035.png" class="" title="image-20240423220300035"></li></ul><p><strong><mark>如何获取ADC是否开启的状态？</mark></strong></p><p><strong>获取标志位状态</strong></p><p>FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);</p><ul><li>可以调用这个函数,ADC_FLAG选择EOC,判断EOC标志位是否置1</li></ul><p><strong>每隔几个通道间断一次</strong></p><p>void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number);</p><p><strong>是否启动间断模式</strong></p><p>void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);</p><p><mark><strong>ADC规则组通道配置</strong></mark></p><p>void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);</p><ul><li>ADCx</li><li>ADC_Channel：指定的通道</li><li>Rank：序列的位置</li><li>ADC_SampleTime：指定通道的采样时间</li></ul><p><strong>ADC外部触发转换控制（是否允许外部触发转换）</strong></p><p>void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);</p><p><mark><strong>ADC获取转换值</strong></mark></p><p>uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx);</p><ul><li>获取AD转换的数据寄存器，读取转换结果</li></ul><p><strong>ADC获取双模式转换值</strong></p><p>uint32_t ADC_GetDualModeConversionValue(void);</p><p><strong>是否启动模拟看门狗</strong></p><p>void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog);</p><p><strong>配置高低阈值</strong></p><p>void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold, uint16_t LowThreshold);</p><p><strong>配置看门的通道</strong></p><p>void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel);</p><p><strong>ADC温度传感器、内部参考电压控制</strong></p><p>void ADC_TempSensorVrefintCmd(FunctionalState NewState);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> stm32单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> stm32单片机 </tag>
            
            <tag> AD/DA转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【stm32单片机】[7]编码器接口测速</title>
      <link href="/posts/37664/"/>
      <url>/posts/37664/</url>
      
        <content type="html"><![CDATA[<h2 id="相关库函数"><a class="markdownIt-Anchor" href="#相关库函数"></a> 相关库函数</h2><blockquote><p><strong>定时器编码器配置</strong></p><p>void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,<br>uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity);</p><ul><li>TIMx:选择定时器</li><li>TIM_EncoderMode: 选择编码器模式，T1单独计数，T2单独计数，T1/T2同时计数</li></ul><img src="/posts/37664/image-20240420235549817.png" class="" title="image-20240420235549817"><ul><li>TIM_IC1Polarity：电平极性</li><li>TIM_IC2Polarity：电平极性  可以通过配置这两个参数，设置正相和反相</li></ul><img src="/posts/37664/image-20240420235814820.png" class="" title="image-20240420235814820"></blockquote><h2 id="编码器测计数"><a class="markdownIt-Anchor" href="#编码器测计数"></a> 编码器测计数</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stm32f10x.h"</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Encoder_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);<span class="comment">//开启TIM2时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure; <span class="comment">//结构体类型(已经定义好的） 结构体变量名 -&gt;结构体变量的定义</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin=GPIO_Pin_6|GPIO_Pin_7;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU;<span class="comment">//上拉输入</span></span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*时基单元初始化配置*/</span></span><br><span class="line">TIM_InternalClockConfig(TIM3);<span class="comment">//定时器上电后默认使用内部时钟,此语句也可以不写</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision =  TIM_CKD_DIV1 ;<span class="comment">//1分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//向上计数</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler= <span class="number">1</span><span class="number">-1</span>;<span class="comment">//PSC 不分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period= <span class="number">65536</span> - <span class="number">1</span>;<span class="comment">//ARR </span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter=<span class="number">0</span>;<span class="comment">//重复计数器，高级定时器钟存在，这里不需要用</span></span><br><span class="line">TIM_TimeBaseInit(TIM3,&amp;TIM_TimeBaseInitStructure);<span class="comment">//时基单元初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输入捕获单元配置*/</span></span><br><span class="line"><span class="comment">/**通道1配置**/</span></span><br><span class="line">TIM_ICInitTypeDef TIM_ICInitStructure;</span><br><span class="line">    TIM_ICStructInit(&amp;TIM_ICInitStructure);<span class="comment">//给结构体赋初始值，防止出现不确定的状态</span></span><br><span class="line">TIM_ICInitStructure.TIM_Channel=TIM_Channel_1;<span class="comment">//输入捕获通道选择</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICFilter=<span class="number">0XF</span>;<span class="comment">//输入捕获滤波器</span></span><br><span class="line"><span class="comment">//TIM_ICInitStructure.TIM_ICPolarity=TIM_ICPolarity_Rising;//极性，上升沿触发  TIM_EncoderInterfaceConfig重复配置了相同的寄存器</span></span><br><span class="line">TIM_ICInit(TIM3,&amp;TIM_ICInitStructure);</span><br><span class="line">    <span class="comment">/**通道2配置**/</span> <span class="comment">//注意：这里不需要再定义新的结构体。因为上一次的值已经写入硬件寄存器</span></span><br><span class="line">TIM_ICInitStructure.TIM_Channel=TIM_Channel_2;<span class="comment">//输入捕获通道选择</span></span><br><span class="line">TIM_ICInitStructure.TIM_ICFilter=<span class="number">0XF</span>;<span class="comment">//输入捕获滤波器</span></span><br><span class="line"><span class="comment">//TIM_ICInitStructure.TIM_ICPolarity=TIM_ICPolarity_Rising;//极性，上升沿触发</span></span><br><span class="line">TIM_ICInit(TIM3,&amp;TIM_ICInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*配置编码器接口*/</span></span><br><span class="line">    TIM_EncoderInterfaceConfig(TIM3,TIM_EncoderMode_TI12,TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);<span class="comment">//定时器3 ，T1T2同时使用，极性相同(上升沿/下降沿两个都是有效的)，即为正相</span></span><br><span class="line">    <span class="comment">//若要反相，那么一个配置位上升沿，一个配置为下降沿有效</span></span><br><span class="line">TIM_Cmd(TIM3,ENABLE);<span class="comment">//启动定时器</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int16_t</span> <span class="title function_">Encoder_Get</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//int16_t 表示有符号数，能把unint16_相比最高位变为了符号位,这里利用到了补码的特性</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> TIM_GetCounter(TIM3);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="编码器测速"><a class="markdownIt-Anchor" href="#编码器测速"></a> 编码器测速</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> stm32单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> stm32单片机 </tag>
            
            <tag> 输入捕获 </tag>
            
            <tag> 输出比较 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【微机原理】方波发生器-电子琴</title>
      <link href="/posts/46544/"/>
      <url>/posts/46544/</url>
      
        <content type="html"><![CDATA[<h1 id="如何得到精准的250us定时"><a class="markdownIt-Anchor" href="#如何得到精准的250us定时"></a> 如何得到精准的250us定时？</h1><p><strong>先确认大概的定时器计数器值，再利用跑马表调整误差</strong></p><img src="/posts/46544/image-20240416182439723.png" class="" title="image-20240416182439723">]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> PIC单片机 </category>
          
          <category> 项目设计学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> PIC单片机 </tag>
            
            <tag> MPLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【微机原理】[软件操作]-跑马表</title>
      <link href="/posts/15341/"/>
      <url>/posts/15341/</url>
      
        <content type="html"><![CDATA[<h1 id="如何打开stop-watch窗口"><a class="markdownIt-Anchor" href="#如何打开stop-watch窗口"></a> 如何打开Stop Watch窗口？</h1><blockquote><p><strong>在DEBUG下选mplab sim后，再点DEBUGSETTING来设好频率，设好后点stopwatch</strong></p></blockquote><h1 id="跑马表仿真测试"><a class="markdownIt-Anchor" href="#跑马表仿真测试"></a> 跑马表仿真测试</h1><p><mark>在中断<strong>对应</strong>的位置打上断点，点击仿真运行，即可通过跑马表查看每次进中断的运行时间</mark></p><img src="/posts/15341/image-20240405155601030.png" class="" title="image-20240405155601030"><h1 id="车辆里程表"><a class="markdownIt-Anchor" href="#车辆里程表"></a> 车辆里程表</h1><h2 id="proteus仿真"><a class="markdownIt-Anchor" href="#proteus仿真"></a> proteus仿真</h2><p><mark>可以通过工具栏<strong>调试</strong>选项</mark>，查看各个所需的调试窗口，运行调试工具。</p><p>ps:<strong>step into</strong>可以跳过断点</p><img src="/posts/15341/image-20240405170845407.png" class="" title="image-20240405170845407"><p>第二次进中断，LED灯点亮</p><img src="/posts/15341/image-20240405171351683.png" class="" title="image-20240405171351683"><p>ps:<strong>cof为仿真文件,hex为下载文件</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> PIC单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> PIC单片机 </tag>
            
            <tag> MPLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【微机原理】[2]中断系统</title>
      <link href="/posts/18816/"/>
      <url>/posts/18816/</url>
      
        <content type="html"><![CDATA[<h2 id="保护现场"><a class="markdownIt-Anchor" href="#保护现场"></a> 保护现场</h2><img src="/posts/18816/image-20240327212904491.png" class="" title="image-20240327212904491">]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> PIC单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> PIC单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【单片机】串口通信</title>
      <link href="/posts/25165/"/>
      <url>/posts/25165/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯部分"><a class="markdownIt-Anchor" href="#蓝桥杯部分"></a> 蓝桥杯部分</h1><h2 id="1串口底层"><a class="markdownIt-Anchor" href="#1串口底层"></a> 1.串口底层</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 串口初始化函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//9600bps@12.000MHz</span></span><br><span class="line">{</span><br><span class="line">SCON = <span class="number">0x50</span>;<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">AUXR |= <span class="number">0x01</span>;<span class="comment">//串口1选择定时器2为波特率发生器</span></span><br><span class="line">AUXR |= <span class="number">0x04</span>;<span class="comment">//定时器时钟1T模式</span></span><br><span class="line">T2L = <span class="number">0xC7</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">T2H = <span class="number">0xFE</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">AUXR |= <span class="number">0x10</span>;<span class="comment">//定时器2开始计时</span></span><br><span class="line">ES = <span class="number">1</span>;<span class="comment">//允许串口中断</span></span><br><span class="line">EA = <span class="number">1</span>;<span class="comment">//总中断开启</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字节发送函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> dat)</span></span><br><span class="line">{</span><br><span class="line">SBUF=dat;<span class="comment">//将dat数据赋给SBUF，将数据发送出去</span></span><br><span class="line"><span class="keyword">while</span>(TI == <span class="number">0</span>);<span class="comment">//等待数据发送</span></span><br><span class="line">TI = <span class="number">0</span>;<span class="comment">//将发送标志位清零</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字符串发送函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Send_String</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *dat)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(*dat != <span class="string">'\0'</span>)<span class="comment">//当字符不为空时，继续发送</span></span><br><span class="line">SendByte(*dat++);<span class="comment">//发送后指针dat加1，指向下一个字节</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2单片机发送字符串给上位机"><a class="markdownIt-Anchor" href="#2单片机发送字符串给上位机"></a> 2.单片机发送字符串给上位机</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件引用</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Key.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Nixie.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Uart.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Buf[<span class="number">8</span>]={<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>};<span class="comment">//数码管显示数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Pos;<span class="comment">//数码管数据数组位下标</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Point[<span class="number">8</span>]={<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//数码管每一段的“点”数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key;<span class="comment">//键值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key_Up,Key_Down,Key_Val,Key_Old;<span class="comment">//按键扫描变量</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ucLED[<span class="number">8</span>]={<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//LED显示数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Nixie_Timer;<span class="comment">//数码管定时更新</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Key_Timer;<span class="comment">//按键定时扫描</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//按键检测程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Key_Timer) <span class="keyword">return</span>;<span class="comment">//Key_Timer=0时执行下面的语句</span></span><br><span class="line">Key_Timer=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//按键扫描部分//</span></span><br><span class="line">Key_Val=Key_Read();</span><br><span class="line">Key_Down=Key_Val &amp; (Key_Old ^ Key_Val);</span><br><span class="line">Key_Up=~Key_Val &amp; (Key_Old ^ Key_Val);</span><br><span class="line">Key_Old=Key_Val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie_Proc</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//信息处理/显示程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Nixie_Timer) <span class="keyword">return</span>;<span class="comment">//Nixie_Timer=0时执行下面的语句</span></span><br><span class="line">Nixie_Timer=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Proc</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//LED“报警”程序</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Init</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//1毫秒@12.000MHz</span></span><br><span class="line">{</span><br><span class="line">AUXR &amp;= <span class="number">0x7F</span>;<span class="comment">//定时器时钟12T模式</span></span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TL0 = <span class="number">0x18</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TF0 = <span class="number">0</span>;<span class="comment">//清除TF0标志</span></span><br><span class="line">TR0 = <span class="number">1</span>;<span class="comment">//定时器0开始计时</span></span><br><span class="line">ET0 = <span class="number">1</span>;    <span class="comment">//定时器中断0打开</span></span><br><span class="line">EA = <span class="number">1</span>;     <span class="comment">//总中断打开</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay500ms</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">23</span>;</span><br><span class="line">j = <span class="number">205</span>;</span><br><span class="line">k = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">} <span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">Timer0_Init();<span class="comment">//定时器初始化</span></span><br><span class="line">System_Init();<span class="comment">//系统板初始化</span></span><br><span class="line"></span><br><span class="line">Uart1_Init();</span><br><span class="line"></span><br><span class="line">Delay500ms();<span class="comment">//mark:初始化后若立即发送数据，第一个字节会重复发送，所以先延时500ms,等待UART稳定工作，再发送字符串</span></span><br><span class="line"></span><br><span class="line">Uart1_SendString(<span class="string">"Hello UART"</span>);<span class="comment">//字符串发送数据在开启定时器中断时容易被打断,第一个字节刚好卡在没发完的时刻,造成死循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//循环执行任务</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//Key_Proc();</span></span><br><span class="line"><span class="comment">//Nixie_Proc();</span></span><br><span class="line"><span class="comment">//LED_Proc();</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Server</span><span class="params">(<span class="type">void</span>)</span>  interrupt 1<span class="comment">//中断服务程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(++Nixie_Timer==<span class="number">500</span>){Nixie_Timer=<span class="number">0</span>;}<span class="comment">//500ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Key_Timer==<span class="number">20</span>){Key_Timer=<span class="number">0</span>;}<span class="comment">//20ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Nixie_Pos==<span class="number">8</span>){Nixie_Pos=<span class="number">0</span>;}<span class="comment">//数码管动态显示</span></span><br><span class="line">Nixie_Disp(Nixie_Pos,Nixie_Buf[Nixie_Pos],Nixie_Point[Nixie_Pos]);<span class="comment">//数码管动态显示</span></span><br><span class="line">LED_Disp(Nixie_Pos,ucLED[Nixie_Pos]);<span class="comment">//LED，一轮即可点亮</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3上位机发送字符串给单片机"><a class="markdownIt-Anchor" href="#3上位机发送字符串给单片机"></a> 3.上位机发送字符串给单片机</h2><p><strong><mark>PS:按键4可发送单片机接收到的字符串给上位机</mark></strong></p><h3 id="串口处理模块"><a class="markdownIt-Anchor" href="#串口处理模块"></a> 串口处理模块</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Uart1_Server</span><span class="params">(<span class="type">void</span>)</span> interrupt 4</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(RI==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">Uart_RecData[Uart_RecData_Index]=SBUF;</span><br><span class="line">Uart_RecData_Index++;</span><br><span class="line">RI=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="按键程序"><a class="markdownIt-Anchor" href="#按键程序"></a> 按键程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//按键检测程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Key_Timer) <span class="keyword">return</span>;<span class="comment">//Key_Timer=0时执行下面的语句</span></span><br><span class="line">Key_Timer=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//按键扫描部分//</span></span><br><span class="line">Key_Val=Key_Read();</span><br><span class="line">Key_Down=Key_Val &amp; (Key_Old ^ Key_Val);</span><br><span class="line">Key_Up=~Key_Val &amp; (Key_Old ^ Key_Val);</span><br><span class="line">Key_Old=Key_Val;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(Key_Down)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">Uart_SendDataFlag=<span class="number">1</span>;</span><br><span class="line">ucLED[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="中断程序"><a class="markdownIt-Anchor" href="#中断程序"></a> 中断程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Uart1_Server</span><span class="params">(<span class="type">void</span>)</span> interrupt 4</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(RI==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">Uart_RecData[Uart_RecData_Index]=SBUF;</span><br><span class="line">Uart_RecData_Index++;</span><br><span class="line">RI=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Server</span><span class="params">(<span class="type">void</span>)</span>  interrupt 1<span class="comment">//中断服务程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(++Uart_Timer==<span class="number">100</span>){Uart_Timer=<span class="number">0</span>;}</span><br><span class="line"><span class="keyword">if</span>(++Nixie_Timer==<span class="number">500</span>){Nixie_Timer=<span class="number">0</span>;}<span class="comment">//500ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Key_Timer==<span class="number">10</span>){Key_Timer=<span class="number">0</span>;}<span class="comment">//20ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Nixie_Pos==<span class="number">8</span>){Nixie_Pos=<span class="number">0</span>;}<span class="comment">//数码管动态显示</span></span><br><span class="line">Nixie_Disp(Nixie_Pos,Nixie_Buf[Nixie_Pos],Nixie_Point[Nixie_Pos]);<span class="comment">//数码管动态显示</span></span><br><span class="line">LED_Disp(Nixie_Pos,ucLED[Nixie_Pos]);<span class="comment">//LED，一轮即可点亮</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Uart_SendDataFlag==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">Uart_SendDataFlag=<span class="number">0</span>;</span><br><span class="line">Uart1_SendString(Uart_RecData);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4上位机发送数据控制单片机led"><a class="markdownIt-Anchor" href="#4上位机发送数据控制单片机led"></a> 4.上位机发送数据控制单片机LED</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Uart_Proc</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Uart_Timer)<span class="keyword">return</span>;</span><br><span class="line">Uart_Timer=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if(Uart_RecData[Uart_RecData_Index-1]==0x0a &amp;&amp; Uart_RecData[Uart_RecData_Index-2]==0x0d) //0x0a--&gt;'\n' 0x0d--&gt;'\r'</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="comment">//if(Uart_RecData_Index==9 &amp;&amp; Uart_RecData[0]=='L' &amp;&amp; Uart_RecData[1]=='E' &amp;&amp; Uart_RecData[2]=='D' &amp;&amp; Uart_RecData[3]=='1' &amp;&amp; Uart_RecData[4]=='='&amp;&amp;Uart_RecData[5]=='1')</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="comment">//ucLED[0]=1;</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"><span class="keyword">if</span>(Uart_RecData[Uart_RecData_Index<span class="number">-1</span>]==<span class="number">0x0a</span> &amp;&amp; Uart_RecData[Uart_RecData_Index<span class="number">-2</span>]==<span class="number">0x0d</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Uart_RecData_Index==<span class="number">8</span> &amp;&amp; Uart_RecData[<span class="number">0</span>]==<span class="string">'L'</span> &amp;&amp; Uart_RecData[<span class="number">1</span>]==<span class="string">'E'</span> &amp;&amp; Uart_RecData[<span class="number">2</span>]==<span class="string">'D'</span> &amp;&amp; Uart_RecData[<span class="number">3</span>]==<span class="string">'1'</span> &amp;&amp; Uart_RecData[<span class="number">4</span>]==<span class="string">'='</span>&amp;&amp;Uart_RecData[<span class="number">5</span>]==<span class="string">'1'</span>)</span><br><span class="line">{</span><br><span class="line">Uart_RecData_Index=<span class="number">0</span>;</span><br><span class="line">ucLED[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">Uart_RecData_Index=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">Uart_RecData_Index=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2串口优化"><a class="markdownIt-Anchor" href="#2串口优化"></a> 2.串口优化</h2><h3 id="putchar重定向"><a class="markdownIt-Anchor" href="#putchar重定向"></a> putchar重定向</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 串口初始化函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//9600bps@12.000MHz</span></span><br><span class="line">{</span><br><span class="line">SCON = <span class="number">0x50</span>;<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">AUXR |= <span class="number">0x01</span>;<span class="comment">//串口1选择定时器2为波特率发生器</span></span><br><span class="line">AUXR |= <span class="number">0x04</span>;<span class="comment">//定时器时钟1T模式</span></span><br><span class="line">T2L = <span class="number">0xC7</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">T2H = <span class="number">0xFE</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">AUXR |= <span class="number">0x10</span>;<span class="comment">//定时器2开始计时</span></span><br><span class="line">ES = <span class="number">1</span>;<span class="comment">//允许串口中断</span></span><br><span class="line">EA = <span class="number">1</span>;<span class="comment">//总中断开启</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> <span class="title function_">putchar</span><span class="params">(<span class="type">char</span> ch)</span></span><br><span class="line">{</span><br><span class="line">    SBUF=ch; <span class="comment">///将dat数据</span></span><br><span class="line">    <span class="keyword">while</span>(TI==<span class="number">0</span>);</span><br><span class="line">    TI=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>(ch);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【蓝桥杯单片机】考点复盘1</title>
      <link href="/posts/5903/"/>
      <url>/posts/5903/</url>
      
        <content type="html"><![CDATA[<h1 id="一-led模块"><a class="markdownIt-Anchor" href="#一-led模块"></a> 一、LED模块</h1><h2 id="1led底层代码"><a class="markdownIt-Anchor" href="#1led底层代码"></a> 1.LED底层代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Led_Disp</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> addr, enable)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> temp = <span class="number">0x00</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> temp_old = <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">if</span> (enable)</span><br><span class="line">        temp |= <span class="number">0x01</span> &lt;&lt; addr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        temp &amp;= ~(<span class="number">0x01</span> &lt;&lt; addr);</span><br><span class="line">   <span class="keyword">if</span> (temp != temp_old)</span><br><span class="line">    {</span><br><span class="line">        P0 = ~temp;</span><br><span class="line">        P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0x80</span>;</span><br><span class="line">        P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">        temp_old = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2基本调用方式"><a class="markdownIt-Anchor" href="#2基本调用方式"></a> 2.基本调用方式</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ucLED[n]=x;</span><br><span class="line"></span><br><span class="line">中断程序</span><br><span class="line">{</span><br><span class="line">    Led_Disp(Nixie_Pos,ucLED[Nixie_Pos]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="二-按键模块"><a class="markdownIt-Anchor" href="#二-按键模块"></a> 二、按键模块</h1><h2 id="1按键底层代码"><a class="markdownIt-Anchor" href="#1按键底层代码"></a> 1.按键底层代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Key_Read</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp = <span class="number">0</span>;</span><br><span class="line">    ET0 = <span class="number">0</span>;</span><br><span class="line">    P44 = <span class="number">0</span>;P42 = <span class="number">1</span>;P35 = <span class="number">1</span>;P34 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(P33 == <span class="number">0</span>) temp = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(P32 == <span class="number">0</span>) temp = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span>(P31 == <span class="number">0</span>) temp = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">if</span>(P30 == <span class="number">0</span>) temp = <span class="number">7</span>;</span><br><span class="line">    P44 = <span class="number">1</span>;P42 = <span class="number">0</span>;P35 = <span class="number">1</span>;P34 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(P33 == <span class="number">0</span>) temp = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span>(P32 == <span class="number">0</span>) temp = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">if</span>(P31 == <span class="number">0</span>) temp = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(P30 == <span class="number">0</span>) temp = <span class="number">11</span>;</span><br><span class="line">    P44 = <span class="number">1</span>;P42 = <span class="number">1</span>;P35 = <span class="number">0</span>;P34 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(P33 == <span class="number">0</span>) temp = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">if</span>(P32 == <span class="number">0</span>) temp = <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">if</span>(P31 == <span class="number">0</span>) temp = <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">if</span>(P30 == <span class="number">0</span>) temp = <span class="number">15</span>;</span><br><span class="line">    P44 = <span class="number">1</span>;P42 = <span class="number">1</span>;P35 = <span class="number">1</span>;P34 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(P33 == <span class="number">0</span>) temp = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">if</span>(P32 == <span class="number">0</span>) temp = <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">if</span>(P31 == <span class="number">0</span>) temp = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">if</span>(P30 == <span class="number">0</span>) temp = <span class="number">19</span>;</span><br><span class="line">    P3 = <span class="number">0xff</span>;</span><br><span class="line">    ET0 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2基本调用方式-2"><a class="markdownIt-Anchor" href="#2基本调用方式-2"></a> 2.基本调用方式</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(Key_Down)<span class="comment">//下降沿</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">case</span> X:</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="23-模式切换"><a class="markdownIt-Anchor" href="#23-模式切换"></a> <strong>2.3</strong> <strong>模式切换</strong></h4><img src="/posts/5903/clip_image002.jpg" class="" title="img"><p>第十届省赛真题</p><img src="/posts/5903/clip_image004.jpg" class="" title="img"><p>第十二届省赛真题</p><h4 id="24-参数设置"><a class="markdownIt-Anchor" href="#24-参数设置"></a> <strong>2.4</strong> <strong>参数设置</strong></h4><img src="/posts/5903/clip_image006.jpg" class="" title="img"><p>第九届省赛真题</p><img src="/posts/5903/clip_image008.jpg" class="" title="img"><p>第八届省赛真题</p><h4 id="25-参数保存"><a class="markdownIt-Anchor" href="#25-参数保存"></a> <strong>2.5</strong> <strong>参数保存</strong></h4><img src="/posts/5903/clip_image010.jpg" class="" title="img"><p>第五届省赛真题</p><img src="/posts/5903/clip_image012.jpg" class="" title="img"><p>第十一届省赛真题</p><h4 id="26-特定使能"><a class="markdownIt-Anchor" href="#26-特定使能"></a> <strong>2.6</strong> <strong>特定使能</strong></h4><img src="/posts/5903/clip_image014.jpg" class="" title="img"><p>第十一届省赛真题</p><h4 id="27-长按跳转-松手返回"><a class="markdownIt-Anchor" href="#27-长按跳转-松手返回"></a> <strong>2.7</strong> <strong>长按跳转 松手返回</strong></h4><img src="/posts/5903/clip_image016.jpg" class="" title="img"><p>第八届省赛真题</p><h4 id="28-键盘输入"><a class="markdownIt-Anchor" href="#28-键盘输入"></a> <strong>2.8</strong> <strong>键盘输入</strong></h4><img src="/posts/5903/clip_image017.png" class="" title="img"><p>模拟训练二</p><h4 id="29-长按短按-效果不同"><a class="markdownIt-Anchor" href="#29-长按短按-效果不同"></a> <strong>2.9</strong> <strong>长按短按 效果不同</strong></h4><img src="/posts/5903/clip_image019.jpg" class="" title="img"><h1 id="三-数码管模块"><a class="markdownIt-Anchor" href="#三-数码管模块"></a> 三、数码管模块</h1><h2 id="1数码管底层代码"><a class="markdownIt-Anchor" href="#1数码管底层代码"></a> 1.数码管底层代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> seg_dula[] = {<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>,<span class="number">0xff</span>};</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> seg_wela[] = {<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x80</span>};</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seg_Disp</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> wela,dula,point)</span></span><br><span class="line">{</span><br><span class="line">    P0 = <span class="number">0xff</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xe0</span>;</span><br><span class="line">    P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line"></span><br><span class="line">    P0 = seg_wela[wela];</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xc0</span>;</span><br><span class="line">    P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">    </span><br><span class="line">    P0 = seg_dula[dula];</span><br><span class="line">    <span class="keyword">if</span>(point)</span><br><span class="line">        P0 &amp;= <span class="number">0x7f</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xe0</span>;</span><br><span class="line">    P2 &amp;= <span class="number">0x1f</span>; </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2基本调用方式-3"><a class="markdownIt-Anchor" href="#2基本调用方式-3"></a> 2.基本调用方式</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Seg_Buf[X] = Y;</span><br><span class="line">Seg_Point[X] = Y;</span><br></pre></td></tr></tbody></table></figure><h4 id="33-显示整数变量"><a class="markdownIt-Anchor" href="#33-显示整数变量"></a> <strong>3.3</strong> <strong>显示整数变量</strong></h4><img src="/posts/5903/clip_image002-1711183567913-109.jpg" class="" title="img"><p>第十二届省赛真题</p><h4 id="34-显示小数点变量"><a class="markdownIt-Anchor" href="#34-显示小数点变量"></a> <strong>3.4</strong> <strong>显示小数点变量</strong></h4><img src="/posts/5903/clip_image004-1711183567913-110.jpg" class="" title="img"><p>第十二届省赛真题</p><h4 id="35-不同状态显示不同内容"><a class="markdownIt-Anchor" href="#35-不同状态显示不同内容"></a> <strong>3.5</strong> <strong>不同状态显示不同内容</strong></h4><img src="/posts/5903/clip_image006-1711183567914-112.jpg" class="" title="img"><p>第十二届省赛真题</p><h4 id="36-高位熄灭"><a class="markdownIt-Anchor" href="#36-高位熄灭"></a> <strong>3.6</strong> <strong>高位熄灭</strong></h4><img src="/posts/5903/clip_image008-1711183567913-111.jpg" class="" title="img"><p>第十届省赛真题</p><h4 id="37-选中单元闪烁"><a class="markdownIt-Anchor" href="#37-选中单元闪烁"></a> <strong>3.7</strong> <strong>选中单元闪烁</strong></h4><img src="/posts/5903/clip_image010-1711183567914-113.jpg" class="" title="img"><p>第八届省赛真题</p><h1 id="四-继电器蜂鸣器"><a class="markdownIt-Anchor" href="#四-继电器蜂鸣器"></a> 四、继电器蜂鸣器</h1><h2 id="1底层代码"><a class="markdownIt-Anchor" href="#1底层代码"></a> 1.底层代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> temp_1 = <span class="number">0x00</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> temp_old_1 = <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Beep</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> flag)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        temp_1 |= <span class="number">0x40</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        temp_1 &amp;= ~<span class="number">0x40</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp_1 != temp_old_1)</span><br><span class="line">    {</span><br><span class="line">        P0 = temp_1;</span><br><span class="line">        P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xa0</span>;</span><br><span class="line">        P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">        temp_old_1 = temp_1;        </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Relay</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> flag)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        temp_1 |= <span class="number">0x10</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        temp_1 &amp;= ~<span class="number">0x10</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp_1 != temp_old_1)</span><br><span class="line">    {</span><br><span class="line">        P0 = temp_1;</span><br><span class="line">        P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xa0</span>;</span><br><span class="line">        P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">        temp_old_1 = temp_1;        </span><br><span class="line">    }   </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>…</p><h1 id="ne555"><a class="markdownIt-Anchor" href="#ne555"></a> NE555</h1><p>绑定定时器0，应采用计数器模式</p><h1 id="超声波"><a class="markdownIt-Anchor" href="#超声波"></a> #超声波</h1><h2 id="1超声波底层代码"><a class="markdownIt-Anchor" href="#1超声波底层代码"></a> 1.超声波底层代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delay12us</span><span class="params">()</span>        <span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">33</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Ut_Wave_Init</span><span class="params">()</span> <span class="comment">//超声波初始化函数 产生8个40Mhz的方波信号</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    {</span><br><span class="line">        Tx = <span class="number">1</span>;</span><br><span class="line">        Delay12us();</span><br><span class="line">        Tx = <span class="number">0</span>;</span><br><span class="line">        Delay12us();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Ut_Wave_Data</span><span class="params">()</span> <span class="comment">//超声波距离读取函数</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> time;<span class="comment">//时间储存变量</span></span><br><span class="line">    TMOD &amp;= <span class="number">0x0f</span>;<span class="comment">//配置定时器1计时模式</span></span><br><span class="line">    TH1 = TL1 = <span class="number">0</span>;<span class="comment">//复位计数值 等待超声波信号发出</span></span><br><span class="line">    Ut_Wave_Init();<span class="comment">//发送超声波信号</span></span><br><span class="line">    TR1 = <span class="number">1</span>;<span class="comment">//开始计时</span></span><br><span class="line">    <span class="keyword">while</span>((Rx == <span class="number">1</span>) &amp;&amp; (TF1 == <span class="number">0</span>));<span class="comment">//等待接受返回信号或者定时器溢出</span></span><br><span class="line">    TR1 = <span class="number">0</span>;<span class="comment">//停止计时</span></span><br><span class="line">    <span class="keyword">if</span>(TF1 == <span class="number">0</span>) <span class="comment">//定时器没有溢出</span></span><br><span class="line">    {</span><br><span class="line">        time = TH1 &lt;&lt; <span class="number">8</span> | TL1;<span class="comment">//读取当前时间</span></span><br><span class="line">        <span class="keyword">return</span> (time * <span class="number">0.017</span>);<span class="comment">//返回距离值</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        TF1 = <span class="number">0</span>;<span class="comment">//清除溢出标志位</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2pca写法"><a class="markdownIt-Anchor" href="#2pca写法"></a> 2.PCA写法</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Ut_Wave_Data</span><span class="params">()</span> <span class="comment">//超声波距离读取函数</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> time;<span class="comment">//时间储存变量</span></span><br><span class="line">    CMOD =  <span class="number">0x00</span>;<span class="comment">//配置PCA工作模式</span></span><br><span class="line">    CH = CL = <span class="number">0</span>;<span class="comment">//复位计数值 等待超声波信号发出</span></span><br><span class="line">    Ut_Wave_Init();<span class="comment">//发送超声波信号</span></span><br><span class="line">    CR = <span class="number">1</span>;<span class="comment">//开始计时</span></span><br><span class="line">    <span class="keyword">while</span>((Rx == <span class="number">1</span>) &amp;&amp; (CF == <span class="number">0</span>));<span class="comment">//等待接受返回信号或者定时器溢出</span></span><br><span class="line">    CR = <span class="number">0</span>;<span class="comment">//停止计时</span></span><br><span class="line">    <span class="keyword">if</span>(CF == <span class="number">0</span>) <span class="comment">//定时器没有溢出</span></span><br><span class="line">    {</span><br><span class="line">        time = CH &lt;&lt; <span class="number">8</span> | CL;<span class="comment">//读取当前时间</span></span><br><span class="line">        <span class="keyword">return</span> (time * <span class="number">0.017</span>);<span class="comment">//返回距离值</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        CF = <span class="number">0</span>;<span class="comment">//清除溢出标志位</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="串口"><a class="markdownIt-Anchor" href="#串口"></a> #串口</h1><h2 id="1串口底层"><a class="markdownIt-Anchor" href="#1串口底层"></a> 1.串口底层</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 串口初始化函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span>     <span class="comment">//9600bps@12.000MHz</span></span><br><span class="line">{</span><br><span class="line">    SCON = <span class="number">0x50</span>;        <span class="comment">//8位数据,可变波特率</span></span><br><span class="line">    AUXR |= <span class="number">0x01</span>;       <span class="comment">//串口1选择定时器2为波特率发生器</span></span><br><span class="line">    AUXR |= <span class="number">0x04</span>;       <span class="comment">//定时器时钟1T模式</span></span><br><span class="line">    T2L = <span class="number">0xC7</span>;     <span class="comment">//设置定时初始值</span></span><br><span class="line">    T2H = <span class="number">0xFE</span>;     <span class="comment">//设置定时初始值</span></span><br><span class="line">    AUXR |= <span class="number">0x10</span>;       <span class="comment">//定时器2开始计时</span></span><br><span class="line">    ES = <span class="number">1</span>;</span><br><span class="line">    EA = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字节发送函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> dat)</span></span><br><span class="line">{</span><br><span class="line">    SBUF=dat;<span class="comment">//将dat数据赋给SBUF，将数据发送出去</span></span><br><span class="line">    <span class="keyword">while</span>(TI == <span class="number">0</span>);<span class="comment">//等待数据发送</span></span><br><span class="line">    TI = <span class="number">0</span>;<span class="comment">//将发送标志位清零</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字符串发送函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Send_String</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *dat)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">while</span>(*dat != <span class="string">'\0'</span>)<span class="comment">//当字符不为空时，继续发送</span></span><br><span class="line">        SendByte(*dat++);<span class="comment">//发送后指针dat加1，指向下一个字节</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 串口1中断服务函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart1Server</span><span class="params">()</span> interrupt 4</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(RI == <span class="number">1</span>) <span class="comment">//串口接收数据</span></span><br><span class="line">    {</span><br><span class="line">        Uart_Recv[Uart_Recv_Index] = SBUF;</span><br><span class="line">        Uart_Recv_Index++;</span><br><span class="line">        RI = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-串口接收数据"><a class="markdownIt-Anchor" href="#2-串口接收数据"></a> **2. **串口接收数据</h2><p><strong>模拟题</strong></p><hr><img src="/posts/5903/clip_image002-1711190784499-119.jpg" class="" title="img"><hr><img src="/posts/5903/clip_image004-1711190784499-120.jpg" class="" title="img"><h2 id="3-串口发送数据"><a class="markdownIt-Anchor" href="#3-串口发送数据"></a> **3. **串口发送数据</h2><p><strong>模拟题</strong></p><hr><img src="/posts/5903/clip_image005.jpg" class="" title="img"><hr><img src="/posts/5903/clip_image006-1711190784499-121.jpg" class="" title="img"><ul><li><strong>内存溢出：idata/xdata/data/code</strong></li></ul><h2 id="第三部分-大模板"><a class="markdownIt-Anchor" href="#第三部分-大模板"></a> <mark>第三部分 大模板</mark></h2><h3 id="一-头文件声明区域"><a class="markdownIt-Anchor" href="#一-头文件声明区域"></a> 一、头文件声明区域</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 头文件声明区 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;STC15F2K60S2.H&gt;</span><span class="comment">//单片机寄存器专用头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Init.h&gt;</span><span class="comment">//初始化底层驱动专用头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Led.h&gt;</span><span class="comment">//Led底层驱动专用头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Key.h&gt;</span><span class="comment">//按键底层驱动专用头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Seg.h&gt;</span><span class="comment">//数码管底层驱动专用头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Uart.h&gt;</span><span class="comment">//串口底层驱动专用头文件</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="二-变量声明区域"><a class="markdownIt-Anchor" href="#二-变量声明区域"></a> 二、变量声明区域</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 变量声明区 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key_Val,Key_Down,Key_Old,Key_Up;<span class="comment">//按键专用变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key_Slow_Down;<span class="comment">//按键减速专用变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Seg_Buf[<span class="number">8</span>] = {<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>};<span class="comment">//数码管显示数据存放数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Seg_Point[<span class="number">8</span>] = {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//数码管小数点数据存放数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Seg_Pos;<span class="comment">//数码管扫描专用变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Seg_Slow_Down;<span class="comment">//数码管减速专用变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ucLed[<span class="number">8</span>] = {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//Led显示数据存放数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Uart_Slow_Down;<span class="comment">//串口减速专用变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Uart_Recv[<span class="number">10</span>];<span class="comment">//串口接收数据储存数组 默认10个字节 若接收数据较长 可更改最大字节数</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Uart_Recv_Index;<span class="comment">//串口接收数组指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Uart_Send[<span class="number">10</span>];<span class="comment">//串口接收数据储存数组 默认10个字节 若发送数据较长 可更改最大字节数</span></span><br></pre></td></tr></tbody></table></figure><h3 id="三-按键处理函数"><a class="markdownIt-Anchor" href="#三-按键处理函数"></a> 三、按键处理函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 键盘处理函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Key_Slow_Down) <span class="keyword">return</span>;<span class="comment">//作用：使得程序在每次定时扫描过程只执行一次，即Key_Slow_Down=0时立即置1，向下执行。</span></span><br><span class="line"></span><br><span class="line">  Key_Slow_Down = <span class="number">1</span>;<span class="comment">//键盘减速程序</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  Key_Val = Key_Read();<span class="comment">//实时读取键码值</span></span><br><span class="line"></span><br><span class="line">  Key_Down = Key_Val &amp; (Key_Old ^ Key_Val);<span class="comment">//捕捉按键下降沿</span></span><br><span class="line"></span><br><span class="line">  Key_Up = ~Key_Val &amp; (Key_Old ^ Key_Val);<span class="comment">//捕捉按键上降沿</span></span><br><span class="line"></span><br><span class="line">  Key_Old = Key_Val;<span class="comment">//辅助扫描变量</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="四-信息处理函数"><a class="markdownIt-Anchor" href="#四-信息处理函数"></a> 四、信息处理函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 信息处理函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seg_Proc</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Seg_Slow_Down) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  Seg_Slow_Down = <span class="number">1</span>;<span class="comment">//数码管减速程序</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="五-其他显示函数"><a class="markdownIt-Anchor" href="#五-其他显示函数"></a> 五、其他显示函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 其他显示函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="六-串口处理函数"><a class="markdownIt-Anchor" href="#六-串口处理函数"></a> 六、串口处理函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 串口处理函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Proc</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Uart_Slow_Down) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  Uart_Slow_Down = <span class="number">1</span>;<span class="comment">//串口减速程序 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="七-定时器初始化函数"><a class="markdownIt-Anchor" href="#七-定时器初始化函数"></a> 七、定时器初始化函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定时器0中断初始化函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0Init</span><span class="params">(<span class="type">void</span>)</span>    <span class="comment">//1毫秒@12.000MHz</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  AUXR &amp;= <span class="number">0x7F</span>;    <span class="comment">//定时器时钟12T模式</span></span><br><span class="line"></span><br><span class="line">  TMOD &amp;= <span class="number">0xF0</span>;    <span class="comment">//设置定时器模式</span></span><br><span class="line"></span><br><span class="line">  TL0 = <span class="number">0x18</span>;   <span class="comment">//设置定时初始值</span></span><br><span class="line"></span><br><span class="line">  TH0 = <span class="number">0xFC</span>;   <span class="comment">//设置定时初始值</span></span><br><span class="line"></span><br><span class="line">  TF0 = <span class="number">0</span>;     <span class="comment">//清除TF0标志</span></span><br><span class="line"></span><br><span class="line">  TR0 = <span class="number">1</span>;     <span class="comment">//定时器0开始计时</span></span><br><span class="line"></span><br><span class="line">  ET0 = <span class="number">1</span>;   <span class="comment">//定时器中断0打开</span></span><br><span class="line"></span><br><span class="line">  EA = <span class="number">1</span>;   <span class="comment">//总中断打开</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="八-中断服务函数"><a class="markdownIt-Anchor" href="#八-中断服务函数"></a> 八、中断服务函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定时器0中断服务函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0Server</span><span class="params">()</span> interrupt 1</span><br><span class="line"></span><br><span class="line">{  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(++Key_Slow_Down == <span class="number">10</span>) Key_Slow_Down = <span class="number">0</span>;<span class="comment">//键盘减速专用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(++Seg_Slow_Down == <span class="number">500</span>) Seg_Slow_Down = <span class="number">0</span>;<span class="comment">//数码管减速专用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(++Uart_Slow_Down == <span class="number">200</span>) Uart_Slow_Down = <span class="number">0</span>;<span class="comment">//串口减速专用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(++Seg_Pos == <span class="number">8</span>) Seg_Pos = <span class="number">0</span>;<span class="comment">//数码管显示专用</span></span><br><span class="line"></span><br><span class="line">  Seg_Disp(Seg_Pos,Seg_Buf[Seg_Pos],Seg_Point[Seg_Pos]);</span><br><span class="line"></span><br><span class="line">  Led_Disp(Seg_Pos,ucLed[Seg_Pos]);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="九-串口服务函数"><a class="markdownIt-Anchor" href="#九-串口服务函数"></a> 九、串口服务函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 串口1中断服务函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart1Server</span><span class="params">()</span> interrupt 4</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(RI == <span class="number">1</span>) <span class="comment">//串口接收数据</span></span><br><span class="line"></span><br><span class="line">  {</span><br><span class="line">      Uart_Recv[Uart_Recv_Index] = SBUF;</span><br><span class="line">  Uart_Recv_Index++;</span><br><span class="line">      RI = <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="十-主函数"><a class="markdownIt-Anchor" href="#十-主函数"></a> 十、主函数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Main */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  System_Init();</span><br><span class="line"></span><br><span class="line">  Timer0Init();</span><br><span class="line"></span><br><span class="line">  UartInit();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  {</span><br><span class="line"></span><br><span class="line">    Key_Proc();</span><br><span class="line"></span><br><span class="line">    Seg_Proc();</span><br><span class="line"></span><br><span class="line">    Led_Proc();</span><br><span class="line"></span><br><span class="line">    Uart_Proc();</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> 51单片机 </category>
          
          <category> 蓝桥杯 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> C语言 </tag>
            
            <tag> STC15 </tag>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【stm32单片机】[6]输入捕获和输出比较</title>
      <link href="/posts/64385/"/>
      <url>/posts/64385/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><p>xxxxxxxxxx&nbsp;$ tags: -数字电路与VHDL设计"bash</p><p>另外它们的CH1到CH4，4个通道的引脚，也是公用的</p><p>所以对于同一个定时器，输入捕获和输出比较只能用其中一个。</p><h2 id="一-输出比较"><a class="markdownIt-Anchor" href="#一-输出比较"></a> 一、输出比较</h2><img src="/posts/64385/image-20240317124437632.png" class="" title="image-20240317124437632"><img src="/posts/64385/image-20240317124510956.png" class="" title="image-20240317124510956"><p><strong>根据CNT和CCR的大小关系，从通道引脚输出高低电平</strong></p><h2 id="二-输入捕获"><a class="markdownIt-Anchor" href="#二-输入捕获"></a> 二、输入捕获</h2><img src="/posts/64385/image-20240317124716864.png" class="" title="image-20240317124716864"><img src="/posts/64385/image-20240317124815682.png" class="" title="image-20240317124815682"><p>输入滤波器：可以对毛刺信号进行滤波</p><p>交叉输入的作用？</p><p>TRC?</p><p>CNT计数器是由内部的标准时钟进行驱动的，可以用于测量外部检测两个上升沿的时间间隔，</p><p>所以需要在检测到一个上升沿过后，清零CNT，这样在第二次上升沿后，CNT值就是测周法的N，可以通过主从触发模式，自动完成。</p><p><strong>总结：</strong></p><p>输入捕获类似于外部中断。都是检测边沿，然后执行相应的动嘴，而在输入捕获中。检测到指定电平跳变后，CNT的值所存到CCR中。</p><ul><li><p>输出比较。引脚是输出端口，根据CNT和CCR的大小关系执行输出的动作。</p></li><li><p>输入捕获。引脚是输入端口，接收到输入信号，执行锁存的动作。</p></li></ul><p><strong>#主从触发模式：</strong></p><p>将主从触发模式和PWMI模式相结合，可以让硬件自动测量频率和占空比，软件无需进行干预。</p><h2 id="三-频率测量"><a class="markdownIt-Anchor" href="#三-频率测量"></a> 三、频率测量</h2><img src="/posts/64385/image-20240317125647320.png" class="" title="image-20240317125647320"><p><strong>PS：STM32测频率只能测量数字信号，若测量正选波，可以用运放电路搭建一个比较器。若测量的信号电压较高，需要考虑隔离的问题，比如隔离放大器，电压互感器等元件。总而言之，要用STM32测量频率，只能用数字信号，高电平3.3V，低电平0V</strong></p><p><strong>#区别</strong></p><ul><li><p>测频法：规定时间，记录上升沿次数，<mark>适合测量高频信号</mark>。在计次N过少时，误差会比较大。</p><p>​测频法自带均值滤波，得到的其实是平均频率。</p></li><li><p>测周法：从待测频率的第一个上升沿开始，以一个标准的频率计次，记录计数器的次数，直到检测到待测频率信号的第二个上升沿。<mark>适合测量低频信号</mark>，低频信号，周期长，计次多，有利于减小误差。</p><p>一般情况下，待测信号几百几千HZ以上，测周法更新更快，又因为测周法只测量一个周期，所以结果容易收到噪声的影响，波动较大。</p></li><li><p>两种方法都会出现正负1误差</p></li></ul><p>#<strong>中界频率</strong></p><ul><li>用于界定选用测频法还是测周法的频率</li></ul><h2 id="四-输入捕获通道"><a class="markdownIt-Anchor" href="#四-输入捕获通道"></a> 四、输入捕获通道</h2><img src="/posts/64385/image-20240317133236546.png" class="" title="image-20240317133236546"><p><mark>fDTS是滤波器的采样时钟来源。TI1是输入信号，TI1F是滤波后的信号，CCMR1寄存器中的ICF位可以控制滤波器的参数</mark></p><p>​ICF相关定义</p><img src="/posts/64385/image-20240317133728716.png" class="" title="image-20240317133728716"><p>滤波之后的信号通过后续的边沿检测器，并且可以通过CCIP选择极性。最终得到TI1FP1的触发信号，进入通道1后续的捕获电路。同样的，通道2也是一样的流程，不过图中省略了。</p><p>CC1E位，控制输出使能或失能。</p><p><strong>如何自动清零CNT？</strong></p><h3 id="主从触发模式"><a class="markdownIt-Anchor" href="#主从触发模式"></a> 主从触发模式</h3><img src="/posts/64385/image-20240317134635166.png" class="" title="image-20240317134635166"><ul><li><p>主模式可以将定时器内部的信号，映射到TRGO引脚，用于触发别的外设</p></li><li><p>从模式接收其他外设或者自身外设的一些信号，用于控制自身定时器的运行。</p></li></ul><p><strong>这里将TI1FP1作为触发源，从模式执行Reset操作，这样就可以实现CNT自动清零。</strong></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><h3 id="输入捕获基本结构"><a class="markdownIt-Anchor" href="#输入捕获基本结构"></a> 输入捕获基本结构</h3><img src="/posts/64385/image-20240317135641144.png" class="" title="image-20240317135641144"><p>这个结构只使用了一个通道，只能用于测量频率。</p><p>先转运CNT，再对CNT进行清零。</p><p>使用从模式自动清零CNT，只能用通道1和通道2。</p><h3 id="pwmi基本结构"><a class="markdownIt-Anchor" href="#pwmi基本结构"></a> PWMI基本结构</h3><img src="/posts/64385/image-20240317140209540.png" class="" title="image-20240317140209540"><p>开始，第一个上升沿，CCR1捕获并且清零CNT，CNT++。第一个下降沿，CCR2捕获CNT，但不会执行CNT清零。第二个上升沿，CCR1捕获CNT，同时CNT清零。</p><p>这样CCR1值就是整个周期的计数值，CCR2就是高电平期间的计数值。这样可以同时得到PWM的频率和占空比。</p><p>这里也可以配置两个通道同时捕获第二个引脚的输入，使用TI2FP1和TI2FP2两个引脚。</p><h1 id="代码部分"><a class="markdownIt-Anchor" href="#代码部分"></a> 代码部分</h1><blockquote><hr><p><strong>单独修改PSR值</strong></p><p>void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)</p><ul><li>TIMx：定时器</li><li>Prescaler：PSR值</li><li>TIM_PSCReloadMode：指定定时器预分频器的重装模式<ul><li>@arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event. 在更新事件中 重装<ul><li><pre><code>@arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately. 立即重装</code></pre></li></ul></li></ul></li></ul><hr><p><strong>输入捕获</strong></p><p>void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);</p><p>输入捕获函数，4个通道共用一个函数</p><hr><p><strong>给输入捕获结构体赋初值</strong></p><p>void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct);</p><hr><p><strong>选择输入触发源TIGI</strong></p><p>void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);</p><p>配置从模式的输入触发源</p><hr><p><strong>选择输出触发源TRGO</strong></p><p>void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);</p><p>配置主模式的输出触发源</p><hr><p><strong>配置从模式</strong></p><p>void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);</p><img src="/posts/64385/image-20240317150206255.png" class="" title="image-20240317150206255"><p><mark>ps:这三个从模式是给编码器接口用的，会有另外的函数进行配置</mark></p><hr><p><strong>配置通道1234的定时器</strong></p><p>void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);<br>void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);<br>void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);<br>void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);</p><hr><p><strong>读取4个通道的CCR</strong></p><p>uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx);<br>uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx);<br>uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx);<br>uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx);</p><p><strong>对于写4个通道CCR的函数</strong></p><p>void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);<br>void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);<br>void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);<br>void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);</p><p><mark>输入捕获模式下，CCR是只读的，要用GetCapture读出</mark></p><hr><p><strong><mark>TIM_PWMIConfig(TIM3,&amp;TIM_ICInitStructure);//标准库中已将上述注释部分封装好,即会将以及配置号的部分，再配置另外的通道将参数进行相反的设置</mark></strong></p><hr></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> stm32单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> stm32单片机 </tag>
            
            <tag> 输入捕获 </tag>
            
            <tag> 输出比较 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【蓝桥杯单片机】第九届省赛题</title>
      <link href="/posts/25039/"/>
      <url>/posts/25039/</url>
      
        <content type="html"><![CDATA[<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1><img src="/posts/25039/image-20240308235630315.png" class="" title="image-20240308235630315"><h2 id="题目分析思路"><a class="markdownIt-Anchor" href="#题目分析思路"></a> 题目分析（思路）</h2><ol><li><p>首先，定义按键所控制的相关变量</p></li><li><p>编写数码管显示的逻辑，以”设置状态为准“，测试按键是否能正常控制相关参数(工作模式、流转间隔)</p><ul><li>因为一共有四个工作模式，流转间隔定义为一个数组，存放各个元素的流转时长</li></ul></li><li><p>将工作模式1的相关逻辑（LED流转方式）编写出来</p><ul><li>这里使用一个指针用于LED的点亮(LED_OFF)，另一个用于LED的熄灭(LED_ON)</li></ul></li><li><p>将工作模式，流转间隔的逻辑与LED工作模式1关联，测试按键功能是否正常，LED是否能被流转间隔控制</p></li><li><p>如果以上程序测试正确，编写其他三个工作模式的LED模块</p><ul><li>此时进行程序测试，功能正常，但是切换其他流转模式会有上一个模式的LED”残留“ (如双LED模式切换到单LED模式时)，因此需要进行LED的复位（在按键控制模块中编写）</li></ul></li><li><p>修改完毕后，编写亮度控制，此时注意到，一个定时器0无法满足对LED扫描的同时进行亮度控制，因此再调用定时器1，用于LED的<strong>扫描指针偏移</strong>，以及LED的<strong>PWM控制亮度</strong>。</p><ul><li>这里修改完程序后，发现数码管闪烁，这是因为定时器1的频率较高，会打断主函数中数码管显示模块，因此将Nixie_Proc()函数放入定时器1中进行运行</li></ul></li><li><p>当以上各个功能全部测试完毕后，调用EEPROM模块，保存流转间隔</p></li></ol><h1 id="程序部分"><a class="markdownIt-Anchor" href="#程序部分"></a> 程序部分</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件引用</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Key.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Nixie.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Timer0.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iic.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Buf[<span class="number">8</span>]={<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>};<span class="comment">//数码管显示数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Pos;<span class="comment">//数码管数据数组位下标</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Point[<span class="number">8</span>]={<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//数码管每一段的“点”数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key;<span class="comment">//键值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key_Up,Key_Down,Key_Val,Key_Old;<span class="comment">//按键扫描变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ucLED[<span class="number">8</span>]={<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//LED显示数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Nixie_Timer;<span class="comment">//数码管定时更新</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Key_Timer;<span class="comment">//按键定时扫描</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Work_Mode;<span class="comment">//工作模式参数 0-模式1 1-模式2 2-模式3 3-模式4</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Set_Mode;<span class="comment">// 0-数码管熄灭 1-模式编号 2-流转间隔</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_FlashFlag;<span class="comment">//闪烁标志位</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Timer_800ms;<span class="comment">//0.8s定时（闪烁用）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> LED_Flow_Timer_Set[]={<span class="number">400</span>,<span class="number">400</span>,<span class="number">400</span>,<span class="number">400</span>};<span class="comment">//流转间隔参数,控制流转速度</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> LED_Flow_Timer;<span class="comment">//流转定时</span></span><br><span class="line">bit LED_Enable=<span class="number">0</span>;<span class="comment">//LED流转使能位，1时LED流转使能，默认LED流转启动</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LED_Level_ShowFlag;<span class="comment">//按下按键4显示LED亮度等级</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LED_ON=<span class="number">0</span>;<span class="comment">//LED点亮指针</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LED_OFF=<span class="number">7</span>;<span class="comment">//LED熄灭指针</span></span><br><span class="line"><span class="comment">/*LED亮度控制相关参数*/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LED_Count;<span class="comment">//LED显示周期</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LED_Level;<span class="comment">//LED等级</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LED_Pos;<span class="comment">//LED扫描位</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//按键检测程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Key_Timer) <span class="keyword">return</span>;<span class="comment">//Key_Timer=0时执行下面的语句</span></span><br><span class="line">Key_Timer=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按键扫描模块*/</span></span><br><span class="line">Key_Val=Key_Read();</span><br><span class="line">Key_Down=Key_Val &amp; (Key_Old ^ Key_Val);</span><br><span class="line">Key_Up=~Key_Val &amp; (Key_Old ^ Key_Val);</span><br><span class="line">Key_Old=Key_Val;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按键4按下*/</span></span><br><span class="line"><span class="keyword">if</span>(Key_Old==<span class="number">4</span>)</span><br><span class="line">{</span><br><span class="line">LED_Level_ShowFlag=<span class="number">1</span>;<span class="comment">//显示LED亮度等级</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LED_Level_ShowFlag=<span class="number">0</span>;<span class="comment">//松开，LED亮度等级标志位失效</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按键控制模块*/</span></span><br><span class="line"><span class="keyword">switch</span>(Key_Down)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="comment">//按键7，用于控制LED的启动和暂停</span></span><br><span class="line">LED_Enable^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//按键6，控制设置界面</span></span><br><span class="line"><span class="keyword">if</span>(++Set_Mode==<span class="number">3</span>)</span><br><span class="line">Set_Mode=<span class="number">0</span>;</span><br><span class="line">EEPROM_Write(LED_Flow_Timer_Set,<span class="number">0x00</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//按键5</span></span><br><span class="line"><span class="keyword">if</span>(Set_Mode==<span class="number">2</span>)<span class="comment">//设置界面位于“流转间隔“对应”运行模式“的流转间隔+100ms</span></span><br><span class="line">{</span><br><span class="line">LED_Flow_Timer_Set[Work_Mode]+=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(LED_Flow_Timer_Set[Work_Mode]&gt;=<span class="number">1300</span>)</span><br><span class="line">LED_Flow_Timer_Set[Work_Mode]=<span class="number">400</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Set_Mode==<span class="number">1</span>)<span class="comment">//设置界面位于“运行模式”运行模式切换</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(++Work_Mode==<span class="number">4</span>)</span><br><span class="line">Work_Mode=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*每次模式切换，对LED指针进行复位*/</span></span><br><span class="line"><span class="keyword">if</span>(Work_Mode==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//上一个模式为4</span></span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;<span class="comment">//控制熄灭的LED指针</span></span><br><span class="line">ucLED[<span class="number">7</span>-LED_OFF]=<span class="number">0</span>;<span class="comment">//控制熄灭的LED指针</span></span><br><span class="line">LED_ON=<span class="number">0</span>;<span class="comment">//LED点亮指针复位</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Work_Mode==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//上一个模式为1</span></span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;<span class="comment">//控制熄灭的LED指针</span></span><br><span class="line">LED_ON=<span class="number">7</span>;<span class="comment">//LED点亮指针复位</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Work_Mode==<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//上一个模式为2</span></span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;<span class="comment">//控制熄灭的LED指针</span></span><br><span class="line">LED_ON=<span class="number">0</span>;<span class="comment">//LED点亮指针复位</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//上一个模式为3</span></span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;<span class="comment">//控制熄灭的LED指针</span></span><br><span class="line">ucLED[<span class="number">7</span>-LED_OFF]=<span class="number">0</span>;<span class="comment">//控制熄灭的LED指针</span></span><br><span class="line">LED_ON=<span class="number">3</span>;<span class="comment">//LED点亮指针复位</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">if</span>(Set_Mode==<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">LED_Flow_Timer_Set[Work_Mode]-=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(LED_Flow_Timer_Set[Work_Mode]&lt;=<span class="number">300</span>)</span><br><span class="line">LED_Flow_Timer_Set[Work_Mode]=<span class="number">1200</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Set_Mode==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(--Work_Mode==<span class="number">255</span>)</span><br><span class="line">Work_Mode=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*每次模式切换，对LED指针进行复位*/</span></span><br><span class="line"><span class="keyword">if</span>(Work_Mode==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;</span><br><span class="line">LED_ON=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Work_Mode==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;</span><br><span class="line">ucLED[<span class="number">7</span>-LED_OFF]=<span class="number">0</span>;</span><br><span class="line">LED_ON=<span class="number">7</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Work_Mode==<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;</span><br><span class="line">ucLED[<span class="number">7</span>-LED_OFF]=<span class="number">0</span>;</span><br><span class="line">LED_ON=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;</span><br><span class="line">LED_ON=<span class="number">3</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie_Proc</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//信息处理/显示程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Nixie_Timer) <span class="keyword">return</span>;<span class="comment">//Nixie_Timer=0时执行下面的语句</span></span><br><span class="line">Nixie_Timer=<span class="number">1</span>;</span><br><span class="line">LED_Level=<span class="number">4</span>-((AD_Read(<span class="number">0x01</span>))/<span class="number">64</span>);</span><br><span class="line"><span class="keyword">switch</span>(Set_Mode)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">Nixie_Buf[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">1</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">2</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">3</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">4</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">5</span>]=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(LED_Level_ShowFlag)</span><br><span class="line">{</span><br><span class="line">Nixie_Buf[<span class="number">7</span>]=LED_Level;</span><br><span class="line">Nixie_Buf[<span class="number">6</span>]=<span class="number">17</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">Nixie_Buf[<span class="number">6</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">7</span>]=<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">Nixie_Buf[<span class="number">0</span>]=<span class="number">17</span>;</span><br><span class="line">Nixie_Buf[<span class="number">1</span>]=Nixie_FlashFlag?Work_Mode:<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">2</span>]=<span class="number">17</span>;</span><br><span class="line">Nixie_Buf[<span class="number">3</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">4</span>]=(LED_Flow_Timer_Set[Work_Mode]/<span class="number">1000</span>)?LED_Flow_Timer_Set[Work_Mode]/<span class="number">1000</span>:<span class="number">10</span>;<span class="comment">//高位熄灭</span></span><br><span class="line">Nixie_Buf[<span class="number">5</span>]=LED_Flow_Timer_Set[Work_Mode]/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">6</span>]=LED_Flow_Timer_Set[Work_Mode]/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">7</span>]=LED_Flow_Timer_Set[Work_Mode]%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">Nixie_Buf[<span class="number">0</span>]=<span class="number">17</span>;</span><br><span class="line">Nixie_Buf[<span class="number">1</span>]=Work_Mode;</span><br><span class="line">Nixie_Buf[<span class="number">2</span>]=<span class="number">17</span>;</span><br><span class="line">Nixie_Buf[<span class="number">3</span>]=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(Nixie_FlashFlag)</span><br><span class="line">{</span><br><span class="line">Nixie_Buf[<span class="number">4</span>]=(LED_Flow_Timer_Set[Work_Mode]/<span class="number">1000</span>)?LED_Flow_Timer_Set[Work_Mode]/<span class="number">1000</span>:<span class="number">10</span>;<span class="comment">//高位熄灭</span></span><br><span class="line">Nixie_Buf[<span class="number">5</span>]=LED_Flow_Timer_Set[Work_Mode]/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">6</span>]=LED_Flow_Timer_Set[Work_Mode]/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">7</span>]=LED_Flow_Timer_Set[Work_Mode]%<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">Nixie_Buf[<span class="number">4</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">5</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">6</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">7</span>]=<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Proc</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//LED“报警”程序</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">if</span>(LED_Flow_Timer)<span class="keyword">return</span>;</span><br><span class="line">LED_Flow_Timer=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*LED工作模式控制模块*/</span></span><br><span class="line"><span class="keyword">switch</span>(Work_Mode)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span>(LED_Enable)<span class="comment">//LED流转使能位有效</span></span><br><span class="line">{</span><br><span class="line">ucLED[LED_ON]=<span class="number">1</span>;</span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(++LED_ON==<span class="number">8</span>)</span><br><span class="line">{</span><br><span class="line">LED_ON=<span class="number">0</span>;LED_OFF=<span class="number">7</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LED_OFF=LED_ON<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">ucLED[LED_ON]=<span class="number">1</span>;</span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(LED_Enable)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(--LED_ON==<span class="number">255</span>)</span><br><span class="line">{</span><br><span class="line">LED_ON=<span class="number">7</span>;LED_OFF=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LED_OFF=LED_ON+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">ucLED[LED_ON]=<span class="number">1</span>;</span><br><span class="line">ucLED[<span class="number">7</span>-LED_ON]=<span class="number">1</span>;</span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;</span><br><span class="line">ucLED[<span class="number">7</span>-LED_OFF]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(LED_Enable)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(++LED_ON==<span class="number">4</span>)</span><br><span class="line">{</span><br><span class="line">LED_ON=<span class="number">0</span>;LED_OFF=<span class="number">3</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LED_OFF=LED_ON<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">ucLED[LED_ON]=<span class="number">1</span>;</span><br><span class="line">ucLED[<span class="number">7</span>-LED_ON]=<span class="number">1</span>;</span><br><span class="line">ucLED[LED_OFF]=<span class="number">0</span>;</span><br><span class="line">ucLED[<span class="number">7</span>-LED_OFF]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(LED_Enable)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(--LED_ON==<span class="number">255</span>)</span><br><span class="line">{</span><br><span class="line">LED_ON=<span class="number">3</span>;LED_OFF=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LED_OFF=LED_ON+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Init</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//125微秒@12.000MHz</span></span><br><span class="line">{</span><br><span class="line">AUXR &amp;= <span class="number">0xBF</span>;<span class="comment">//定时器时钟12T模式</span></span><br><span class="line">TMOD &amp;= <span class="number">0x0F</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TL1 = <span class="number">0x83</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH1 = <span class="number">0xFF</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TF1 = <span class="number">0</span>;<span class="comment">//清除TF1标志</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//定时器1开始计时</span></span><br><span class="line">ET1 = <span class="number">1</span>; <span class="comment">//定时器i打开</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">EEPROM_Read(LED_Flow_Timer_Set,<span class="number">0x00</span>,<span class="number">4</span>);<span class="comment">//读取AT24C02中的数据</span></span><br><span class="line">Timer0_Init();<span class="comment">//定时器初始化</span></span><br><span class="line">Timer1_Init();</span><br><span class="line">System_Init();<span class="comment">//系统板初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//循环执行任务</span></span><br><span class="line">{</span><br><span class="line">Key_Proc();</span><br><span class="line"><span class="comment">//Nixie_Proc();</span></span><br><span class="line">LED_Proc();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Server</span><span class="params">(<span class="type">void</span>)</span>  interrupt 1<span class="comment">//中断服务程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(++Nixie_Timer==<span class="number">300</span>){Nixie_Timer=<span class="number">0</span>;}<span class="comment">//500ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Key_Timer==<span class="number">20</span>){Key_Timer=<span class="number">0</span>;}<span class="comment">//20ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Nixie_Pos==<span class="number">8</span>){Nixie_Pos=<span class="number">0</span>;}<span class="comment">//数码管动态显示</span></span><br><span class="line"><span class="keyword">if</span>(++LED_Flow_Timer&gt;=LED_Flow_Timer_Set[Work_Mode]){LED_Flow_Timer=<span class="number">0</span>;}<span class="comment">//控制LED流转速度</span></span><br><span class="line"><span class="keyword">if</span>(++LED_Count==<span class="number">13</span>){LED_Count=<span class="number">0</span>;}<span class="comment">//LED亮起的周期（PWM周期），12MS</span></span><br><span class="line"><span class="keyword">if</span>(++Timer_800ms==<span class="number">800</span>){Timer_800ms=<span class="number">0</span>;Nixie_FlashFlag^=<span class="number">1</span>;}</span><br><span class="line">Nixie_Disp(Nixie_Pos,Nixie_Buf[Nixie_Pos],Nixie_Point[Nixie_Pos]);<span class="comment">//数码管动态显示</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Server</span><span class="params">(<span class="type">void</span>)</span>  interrupt 3</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(++LED_Pos==<span class="number">8</span>){LED_Pos=<span class="number">0</span>;}<span class="comment">//LED每1ms完成一次扫描</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(LED_Count&lt;((LED_Level<span class="number">-1</span>)*<span class="number">3</span>))<span class="comment">//LED占空比</span></span><br><span class="line">{</span><br><span class="line">LED_Disp(LED_Pos,ucLED[LED_Pos]);<span class="comment">//LED点亮，1ms</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LED_Disp(LED_Pos,<span class="number">0</span>);<span class="comment">//LED熄灭,1ms</span></span><br><span class="line">}</span><br><span class="line">Nixie_Proc();<span class="comment">//如果数码管放置在主程序中，由于定时器1频率高，优先级高，主函数会被频繁打断出现闪烁现象</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> 51单片机 </category>
          
          <category> 蓝桥杯 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> C语言 </tag>
            
            <tag> STC15 </tag>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【单片机】SPI协议</title>
      <link href="/posts/23815/"/>
      <url>/posts/23815/</url>
      
        <content type="html"><![CDATA[<h1 id="基础概念"><a class="markdownIt-Anchor" href="#基础概念"></a> 基础概念</h1><h3 id="什么是spi"><a class="markdownIt-Anchor" href="#什么是spi"></a> 什么是SPI？</h3><p>SPI是串行外设接口(Serial Peripheral Interface)的缩写。是 Motorola 公司推出的一 种同步串行接口技术，是一种高速的，全双工，同步的通信总线。</p><p><strong>SPI优点</strong>:支持全双工通信 通信简单 数据传输速率块</p><p><strong>缺点</strong> :没有指定的流控制，没有应答机制确认是否接收到数据，所以跟IIC总线协议比较在数据 可靠性上有一定的缺陷。</p><p><strong>特点</strong>:</p><ol><li>高速、同步、全双工、非差分、总线式</li><li>主从机通信模式</li></ol><h1 id="蓝桥杯相关暂未使用spi"><a class="markdownIt-Anchor" href="#蓝桥杯相关暂未使用spi"></a> 蓝桥杯相关（暂未使用SPI）</h1><h2 id="ds1302时钟芯片底层"><a class="markdownIt-Anchor" href="#ds1302时钟芯片底层"></a> DS1302（时钟芯片）底层</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"ds1302.h"</span></span></span><br><span class="line">sbit SCK=P1^<span class="number">7</span>;</span><br><span class="line">sbit SDA=P2^<span class="number">3</span>;</span><br><span class="line">sbit RST = P1^<span class="number">3</span>;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Ds1302</span><span class="params">(<span class="type">unsigned</span>  <span class="type">char</span> temp)</span> </span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)     </span><br><span class="line">{ </span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">SDA=temp&amp;<span class="number">0x01</span>;</span><br><span class="line">temp&gt;&gt;=<span class="number">1</span>; </span><br><span class="line">SCK=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}   </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Ds1302_Byte</span><span class="params">( <span class="type">unsigned</span> <span class="type">char</span> address,<span class="type">unsigned</span> <span class="type">char</span> dat )</span>     </span><br><span class="line">{</span><br><span class="line"> RST=<span class="number">0</span>;_nop_();</span><br><span class="line"> SCK=<span class="number">0</span>;_nop_();</span><br><span class="line"> RST=<span class="number">1</span>; _nop_();  </span><br><span class="line"> Write_Ds1302(address);</span><br><span class="line"> Write_Ds1302(dat);</span><br><span class="line"> RST=<span class="number">0</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Read_Ds1302_Byte</span> <span class="params">( <span class="type">unsigned</span> <span class="type">char</span> address )</span></span><br><span class="line">{</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> i,temp=<span class="number">0x00</span>;</span><br><span class="line"> RST=<span class="number">0</span>;_nop_();</span><br><span class="line"> SCK=<span class="number">0</span>;_nop_();</span><br><span class="line"> RST=<span class="number">1</span>;_nop_();</span><br><span class="line"> Write_Ds1302(address);</span><br><span class="line"> <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) </span><br><span class="line"> {</span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">temp&gt;&gt;=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(SDA)</span><br><span class="line"> temp|=<span class="number">0x80</span>;</span><br><span class="line"> SCK=<span class="number">1</span>;</span><br><span class="line">} </span><br><span class="line"> RST=<span class="number">0</span>;_nop_();</span><br><span class="line"> SCK=<span class="number">0</span>;_nop_();</span><br><span class="line">SCK=<span class="number">1</span>;_nop_();</span><br><span class="line">SDA=<span class="number">0</span>;_nop_();</span><br><span class="line">SDA=<span class="number">1</span>;_nop_();</span><br><span class="line"><span class="keyword">return</span> (temp);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="基于底层的时序编写"><a class="markdownIt-Anchor" href="#基于底层的时序编写"></a> 基于底层的时序编写</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Set_Rtc</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* ucRtc)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>,<span class="number">0</span>);<span class="comment">//关闭写保护</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x84</span>-i*<span class="number">2</span>,ucRtc[i]);<span class="comment">//给ds1302写入数据,0x84时 0x82分 0x80秒</span></span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>,<span class="number">1</span>);<span class="comment">//打开写保护</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Read_Rtc</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* ucRtc)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">ucRtc[i] = Read_Ds1302_Byte(<span class="number">0x85</span>-i*<span class="number">2</span>);<span class="comment">//读取ds1302的数据</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Set_Date</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* ucDate)</span></span><br><span class="line">{</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>,<span class="number">0</span>);<span class="comment">//关闭写保护</span></span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8c</span>,ucDate[<span class="number">0</span>]);</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x88</span>,ucDate[<span class="number">1</span>]);</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x86</span>,ucDate[<span class="number">2</span>]);</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>,<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Read_Date</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* ucDate)</span></span><br><span class="line">{</span><br><span class="line">ucDate[<span class="number">0</span>] = Read_Ds1302_Byte(<span class="number">0x8d</span>);</span><br><span class="line">ucDate[<span class="number">1</span>] = Read_Ds1302_Byte(<span class="number">0x89</span>);</span><br><span class="line">ucDate[<span class="number">2</span>] = Read_Ds1302_Byte(<span class="number">0x87</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="超声波底层"><a class="markdownIt-Anchor" href="#超声波底层"></a> 超声波底层</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Ultrasonic.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;INTRINS.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit TX = P1^<span class="number">0</span>;</span><br><span class="line">sbit RX = P1^<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay12us</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data i;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">33</span>;</span><br><span class="line"><span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Ut_Wave_Init</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">//超声波初始化函数 产生8个40Mhz的方波信号</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    {</span><br><span class="line">        TX=<span class="number">1</span>;</span><br><span class="line">        Delay12us();</span><br><span class="line">        TX=<span class="number">0</span>;</span><br><span class="line">        Delay12us();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="基于底层的时序编写-2"><a class="markdownIt-Anchor" href="#基于底层的时序编写-2"></a> 基于底层的时序编写</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">Ut_Wave_Data</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> time;</span><br><span class="line">    TMOD &amp;= <span class="number">0x0F</span>;</span><br><span class="line">    TL1=TH1=<span class="number">0</span>;</span><br><span class="line">    Ut_Wave_Init();</span><br><span class="line">    TR1=<span class="number">1</span>; <span class="comment">//开始计时</span></span><br><span class="line">    <span class="keyword">while</span>((RX==<span class="number">1</span>) &amp;&amp; (TF1==<span class="number">0</span>));<span class="comment">//等待超声波返回或定时器溢出</span></span><br><span class="line"></span><br><span class="line">    TR1=<span class="number">0</span>;<span class="comment">//停止计时</span></span><br><span class="line">    <span class="keyword">if</span>(TF1==<span class="number">0</span>)<span class="comment">//定时器没有溢出</span></span><br><span class="line">    {</span><br><span class="line">        time = TH1&lt;&lt;<span class="number">8</span> | TL1;</span><br><span class="line">        <span class="keyword">return</span> (time *<span class="number">0.017</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        TF1=<span class="number">0</span>;<span class="comment">//清除溢出标志位</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【单片机】OneWire通信协议</title>
      <link href="/posts/46163/"/>
      <url>/posts/46163/</url>
      
        <content type="html"><![CDATA[<h3 id="一-onewire单总线协议"><a class="markdownIt-Anchor" href="#一-onewire单总线协议"></a> 一、OneWire（单总线）协议</h3><p>•单总线（1-Wire BUS）是由Dallas公司开发的一种通用数据总线</p><p>•一根通信线：DQ</p><p>•异步、半双工</p><p>•单总线只需要一根通信线即可实现数据的双向传输，当采用寄生供电时，还可以省去设备的VDD线路，此时，供电加通信只需要DQ和GND两根线</p><h3 id="二-单总线电路规范"><a class="markdownIt-Anchor" href="#二-单总线电路规范"></a> 二、单总线电路规范</h3><p>•设备的DQ均要配置成开漏输出模式</p><p>•DQ添加一个上拉电阻，阻值一般为4.7KΩ左右</p><p>•若此总线的从机采取寄生供电，则主机还应配一个强上拉输出电路</p><img src="/posts/46163/image-20240302232447437.png" class="" title="image-20240302232447437"><h3 id="三-单总线的时序结构"><a class="markdownIt-Anchor" href="#三-单总线的时序结构"></a> 三、单总线的时序结构</h3><img src="/posts/46163/image-20240302232633388.png" class="" title="image-20240302232633388"><img src="/posts/46163/image-20240302232648244.png" class="" title="image-20240302232648244"><img src="/posts/46163/image-20240302232700200.png" class="" title="image-20240302232700200"><img src="/posts/46163/image-20240302232708528.png" class="" title="image-20240302232708528"><hr><h1 id="蓝桥杯相关"><a class="markdownIt-Anchor" href="#蓝桥杯相关"></a> 蓝桥杯相关</h1><h2 id="onewire底层"><a class="markdownIt-Anchor" href="#onewire底层"></a> OneWire底层</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"onewire.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"reg52.h"</span></span></span><br><span class="line"></span><br><span class="line">sbit DQ = P1^<span class="number">4</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//单总线内部延时函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_OneWire</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> t)</span>  </span><br><span class="line">{</span><br><span class="line">t *= <span class="number">12</span>;</span><br><span class="line"><span class="keyword">while</span>(t--);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//单总线写操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_DS18B20</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> dat)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">DQ = <span class="number">0</span>;</span><br><span class="line">DQ = dat&amp;<span class="number">0x01</span>;</span><br><span class="line">Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">DQ = <span class="number">1</span>;</span><br><span class="line">dat &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//单总线读操作</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Read_DS18B20</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dat;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">DQ = <span class="number">0</span>;</span><br><span class="line">dat &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">DQ = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(DQ)</span><br><span class="line">{</span><br><span class="line">dat |= <span class="number">0x80</span>;</span><br><span class="line">}    </span><br><span class="line">Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dat;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//DS18B20初始化</span></span><br><span class="line">bit <span class="title function_">init_ds18b20</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">  bit initflag = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  DQ = <span class="number">1</span>;</span><br><span class="line">  Delay_OneWire(<span class="number">12</span>);</span><br><span class="line">  DQ = <span class="number">0</span>;</span><br><span class="line">  Delay_OneWire(<span class="number">80</span>);</span><br><span class="line">  DQ = <span class="number">1</span>;</span><br><span class="line">  Delay_OneWire(<span class="number">10</span>); </span><br><span class="line">    initflag = DQ;     </span><br><span class="line">  Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> initflag;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ds18b20温度读取时序"><a class="markdownIt-Anchor" href="#ds18b20温度读取时序"></a> DS18B20温度读取时序</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*基于底层编写*/</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">ds18b20_read</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> low,high;<span class="comment">//高八位，低八位，DS18B20温度数据是十六位二进制</span></span><br><span class="line">init_ds18b20();<span class="comment">//ds18b20初始化时序</span></span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>);<span class="comment">//ds18b20跳过rom指令</span></span><br><span class="line">Write_DS18B20(<span class="number">0x44</span>);<span class="comment">//ds18b20开始温度转换</span></span><br><span class="line">    </span><br><span class="line">init_ds18b20();<span class="comment">//ds18b20初始化时序</span></span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>);<span class="comment">//ds18b20跳过rom指令</span></span><br><span class="line">Write_DS18B20(<span class="number">0xbe</span>);<span class="comment">//ds18b20开始温度读取</span></span><br><span class="line">low=Read_DS18B20();</span><br><span class="line">high=Read_DS18B20();</span><br><span class="line"><span class="keyword">return</span>((high &lt;&lt; <span class="number">8</span> )| low) /<span class="number">16.0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【单片机】IIC通信协议</title>
      <link href="/posts/19787/"/>
      <url>/posts/19787/</url>
      
        <content type="html"><![CDATA[<h3 id="一-单片机通信基础概念"><a class="markdownIt-Anchor" href="#一-单片机通信基础概念"></a> 一、单片机通信基础概念</h3><p><strong>全双工和半双工的区别：</strong></p><p>一、全双工（Full Duplex）通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合。全双工指可以同时（瞬时）进行信号的双向传输（A→B且B→A）。指A→B的同时B→A，是瞬时同步的。</p><p>二、半双工（Half Duplex）数据传输指数据可以在一个信号载体的两个方向上传输，但是不能同时传输。</p><p><strong>MCU中常见的通信协议：</strong></p><img src="/posts/19787/5490adeb2e9d43dcae940a3b83a35b73.png" class="" title="在这里插入图片描述"><h3 id="二-推挽输出和开漏输出"><a class="markdownIt-Anchor" href="#二-推挽输出和开漏输出"></a> 二、推挽输出和开漏输出</h3><p><strong>推挽输出：</strong></p><blockquote><p>推挽输出结构是由两个MOS或者<a href="https://so.csdn.net/so/search?q=%E4%B8%89%E6%9E%81%E7%AE%A1&amp;spm=1001.2101.3001.7020">三极管</a>收到互补控制的信号控制，两个管子时钟一个在导通，一个在截止，如图1所示：</p></blockquote><img src="/posts/19787/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdHRsZV9veA==,size_16,color_FFFFFF,t_70.png" class="" title="图1 推挽输出结构"><p>特点:</p><ul><li>推挽输出可以输出高电平和低电平，在两种电平下都具有驱动能力。</li><li>相比于后面介绍的开漏输出，输出高电平时的驱动能力强很多</li><li>缺点：推挽输出不能实现" 线与"。</li></ul><p><strong>开漏输出：</strong></p><blockquote><p>常说的与推挽输出相对的就是开漏输出，抽象地说就是COMS反相器去掉了NMOS部分，PMOS管漏极输出，即开漏输出。PMOS管由高电平导通输出低电平，高电平没有驱动能力，需要借助“上拉电阻” (一般上拉电阻值较大，即弱上拉模式)<a href="https://blog.csdn.net/monkey_d_xue/article/details/129802153">什么是弱上拉?</a></p></blockquote><img src="/posts/19787/20201208174916607.png" class="" title="图4 OD"><h5 id="开漏输出的另一个优点在于可以实现线与功能所谓的线与指的是多个信号线直接连接在一起只有当所有信号全部为高电平时合在一起的总线为高电平只要有任意一个或者多个信号为低电平则总线为低电平这就是为什么后面用到iic通信当一个信号线为低电平要释放总线"><a class="markdownIt-Anchor" href="#开漏输出的另一个优点在于可以实现线与功能所谓的线与指的是多个信号线直接连接在一起只有当所有信号全部为高电平时合在一起的总线为高电平只要有任意一个或者多个信号为低电平则总线为低电平这就是为什么后面用到iic通信当一个信号线为低电平要释放总线"></a> <strong>开漏输出的另一个优点在于可以实现"线与"功能，所谓的"线与"指的是多个信号线直接连接在一起，只有当所有信号全部为高电平时，合在一起的总线为高电平；只要有任意一个或者多个信号为低电平，则总线为低电平(这就是为什么后面用到IIC通信,当一个信号线为低电平,要"释放总线")。</strong></h5><h5 id="而推挽输出就不行如果高电平和低电平连在一起会出现电流倒灌损坏器件"><a class="markdownIt-Anchor" href="#而推挽输出就不行如果高电平和低电平连在一起会出现电流倒灌损坏器件"></a> <strong>而推挽输出就不行，如果高电平和低电平连在一起，会出现电流倒灌，损坏器件</strong></h5><p><mark><strong>IIC为什么要开漏输出模式？</strong></mark></p><ul><li>输出端浮空，电平易受外界干扰，不稳定</li></ul><h3 id="三-i2c总线介绍"><a class="markdownIt-Anchor" href="#三-i2c总线介绍"></a> 三、I2C总线介绍：</h3><ul><li>I2C总线（Inter IC BUS）是由Philips公司开发的一种通用数据总线</li><li>两根通信线：SCL（Serial Clock）、SDA（Serial Data）</li><li>同步、半双工，带数据应答</li><li>通用的I2C总线，可以使各种设备的通信标准统一，对于厂家来说，使用成熟的方案可以缩短芯片设计周期、提高稳定性，对于应用者来说，使用通用的通信协议可以避免学习各种各样的自定义协议，降低了学习和应用的难度</li></ul><h3 id="四-i2c电路规范"><a class="markdownIt-Anchor" href="#四-i2c电路规范"></a> 四、I2C电路规范</h3><ul><li><p>所有I2C设备的SCL连在一起，SDA连在一起</p></li><li><p>设备的SCL和SDA均要配置成开漏输出模式</p></li><li><p>SCL和SDA各添加一个上拉电阻，阻值一般为4.7KΩ左右</p></li><li><p>开漏输出和上拉电阻的共同作用实现了“线与”的功能，此设计主要是为了解决多机通信互相干扰的问题</p></li></ul><h3 id="五-i2c时序结构"><a class="markdownIt-Anchor" href="#五-i2c时序结构"></a> 五、I2C时序结构</h3><hr><img src="/posts/19787/1baf27e6e69a429394f21dd1a30900f1.png" class="" title="在这里插入图片描述"><img src="/posts/19787/115006bca35b4b2a8193651f437b65fc.png" class="" title="在这里插入图片描述"><img src="/posts/19787/a1ec063743594e96bb853e3fe69a3800.png" class="" title="在这里插入图片描述"><img src="/posts/19787/image-20240302223549490.png" class="" title="image-20240302223549490"><img src="/posts/19787/72b48d4af46f41ec9fe40720751e4a39.png" class="" title="在这里插入图片描述"><img src="/posts/19787/image-20240302225440107.png" class="" title="image-20240302225440107"><hr><p><strong>总结：IIC的 时序模块</strong></p><ul><li>起始条件</li><li>中止条件</li><li>发送一个字节</li><li>接收一个字节</li><li>接收应答</li><li>发送应答</li></ul><h1 id="蓝桥杯相关"><a class="markdownIt-Anchor" href="#蓝桥杯相关"></a> 蓝桥杯相关</h1><h2 id="iic模块"><a class="markdownIt-Anchor" href="#iic模块"></a> IIC模块</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"iic.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELAY_TIME 5</span></span><br><span class="line"><span class="comment">// I2C总线内部延时函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> i)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    {</span><br><span class="line">        _nop_();</span><br><span class="line">    } <span class="keyword">while</span> (i--);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// I2C总线启动信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    SDA = <span class="number">1</span>;</span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SDA = <span class="number">0</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// I2C总线停止信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    SDA = <span class="number">0</span>;</span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SDA = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送应答或非应答信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_SendAck</span><span class="params">(bit ackbit)</span></span><br><span class="line">{</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">    SDA = ackbit;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">    SDA = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待应答</span></span><br><span class="line">bit <span class="title function_">IIC_WaitAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    bit ackbit;</span><br><span class="line"></span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    ackbit = SDA;</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    <span class="keyword">return</span> ackbit;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// I2C总线发送一个字节数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_SendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byt)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        SCL = <span class="number">0</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">        <span class="keyword">if</span> (byt &amp; <span class="number">0x80</span>)</span><br><span class="line">            SDA = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            SDA = <span class="number">0</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">        SCL = <span class="number">1</span>;</span><br><span class="line">        byt &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">    }</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// I2C总线接收一个字节数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">IIC_RecByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, da;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        SCL = <span class="number">1</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">        da &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (SDA)</span><br><span class="line">            da |= <span class="number">1</span>;</span><br><span class="line">        SCL = <span class="number">0</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> da;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="adda转换模块"><a class="markdownIt-Anchor" href="#adda转换模块"></a> AD/DA转换模块</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">AD_Read</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line">    </span><br><span class="line">    IIC_Start();       <span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0x90</span>); <span class="comment">//主机发送寻址信号, 确认PCF8591，写模式</span></span><br><span class="line">    IIC_WaitAck();      <span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_SendByte(addr); <span class="comment">//主机发送一个字节(要操作数据的地址),对应AD转换的通道</span></span><br><span class="line">    IIC_WaitAck();      <span class="comment">//主机等待应答</span></span><br><span class="line">    </span><br><span class="line">    IIC_Start(); <span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0x91</span>); <span class="comment">//主机发送寻址信号, 确认PCF8591，读模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">    temp = IIC_RecByte(); <span class="comment">//从机送出数据,主机读入的数据用变量存储</span></span><br><span class="line">    IIC_SendAck(<span class="number">1</span>);<span class="comment">//主机发送应答,1表示完成数据的接收,从机停止发送数据</span></span><br><span class="line">    IIC_Stop();<span class="comment">//中止信号,结束IIC通信</span></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DA_Write</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Data)</span></span><br><span class="line">{</span><br><span class="line">    IIC_Start();<span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0x90</span>);<span class="comment">//主机发送寻址信号, 确认PCF8591，写模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_SendByte(<span class="number">0x41</span>); <span class="comment">//主机发送一个字节(要操作数据的地址),对应DA转换的通道</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_SendByte(Data); <span class="comment">//主机送出DA输出的数据字节</span></span><br><span class="line">    IIC_WaitAck(); <span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_Stop(); <span class="comment">//中止信号,结束IIC通信</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="at24c02epprom模块"><a class="markdownIt-Anchor" href="#at24c02epprom模块"></a> AT24C02（EPPROM）模块</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EEPROM_Write</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *EEPROM_String,<span class="type">unsigned</span> <span class="type">char</span> addr,<span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">{</span><br><span class="line">IIC_Start();<span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0xA0</span>);<span class="comment">//主机发送寻址信号，确认EEPROM芯片，写模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_SendByte(addr);<span class="comment">//发送一个要操作数据的地址字节,最好是八的倍数，如果不是8的倍数，将无法写入整页的字节</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(num--)<span class="comment">//循环发送数据字节,存入AT24C02</span></span><br><span class="line">    {</span><br><span class="line">        IIC_SendByte(*EEPROM_String++);<span class="comment">//发送数据字节,要存入AT24C02的数据,字节个数为num</span></span><br><span class="line">        IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">        IIC_Delay(<span class="number">200</span>);<span class="comment">//延时200ms,保证从机(AT24C02能够完整收到数据)</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    IIC_Stop();<span class="comment">//终止IIC通信</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EEPROM_Read</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *EEPROM_String,<span class="type">unsigned</span> <span class="type">char</span> addr,<span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">{</span><br><span class="line">    IIC_Start();<span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0xA0</span>);<span class="comment">//主机发送寻址信号，确认EEPROM芯片，写模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line"></span><br><span class="line">    IIC_SendByte(addr);<span class="comment">//发送一个要操作数据的地址字节</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答  </span></span><br><span class="line"></span><br><span class="line">    IIC_Start();<span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0xA1</span>);<span class="comment">//主机发送寻址信号，确认EEPROM芯片，读模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(num--)<span class="comment">//循环接收数据字节,存入EEPROM_String指向的地址</span></span><br><span class="line">    {</span><br><span class="line">        *EEPROM_String++=IIC_RecByte();<span class="comment">//指针移位读取数据到对应的地址中</span></span><br><span class="line">        <span class="keyword">if</span>(num)<span class="comment">//判断是否读取完数据</span></span><br><span class="line">        {</span><br><span class="line">            IIC_SendAck(<span class="number">0</span>);<span class="comment">//发送应答0,表示继续接收数据</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        {</span><br><span class="line">            IIC_SendAck(<span class="number">1</span>);<span class="comment">//发送应答1,表示停止接收数据</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    IIC_Stop();<span class="comment">//终止IIC通信</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【51单片机】AT24C02(EEPROM储存)</title>
      <link href="/posts/4799/"/>
      <url>/posts/4799/</url>
      
        <content type="html"><![CDATA[<p>2.26更新</p><h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><h2 id="前置概念"><a class="markdownIt-Anchor" href="#前置概念"></a> #前置概念</h2><blockquote><p>所用外设：</p><p><mark>AT24C02(EEPROM储存) 使用IIC协议</mark></p></blockquote><h3 id="一-单片机通信协议本文以iic为重点"><a class="markdownIt-Anchor" href="#一-单片机通信协议本文以iic为重点"></a> 一、单片机通信协议（本文以IIC为重点）</h3><p><strong>全双工和半双工的区别：</strong></p><p>一、全双工（Full Duplex）通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合。全双工指可以同时（瞬时）进行信号的双向传输（A→B且B→A）。指A→B的同时B→A，是瞬时同步的。</p><p>二、半双工（Half Duplex）数据传输指数据可以在一个信号载体的两个方向上传输，但是不能同时传输。</p><p><strong>MCU中常见的通信协议：</strong></p><img src="/posts/4799/5490adeb2e9d43dcae940a3b83a35b73.png" class="" title="在这里插入图片描述"><h3 id="二-推挽输出和开漏输出"><a class="markdownIt-Anchor" href="#二-推挽输出和开漏输出"></a> 二、推挽输出和开漏输出</h3><p><strong>推挽输出：</strong></p><ul><li>推挽输出可以输出高电平和低电平，在两种电平下都具有驱动能力。</li><li>相比于后面介绍的开漏输出，输出高电平时的驱动能力强很多</li><li>缺点：推挽输出不能实现" 线与"。</li></ul><p><strong>开漏输出：</strong></p><ul><li>常说的与推挽输出相对的就是开漏输出，抽象地说就是COMS反相器去掉了NMOS部分，PMOS管漏极输出，即开漏输出。PMOS管由高电平导通输出低电平，高电平没有驱动能力，需要借助“上拉电阻” (一般上拉电阻值较大，即弱上拉模式)<a href="https://blog.csdn.net/monkey_d_xue/article/details/129802153">什么是弱上拉?</a></li></ul><p><mark><strong>IIC为什么要开漏输出模式？</strong></mark></p><ul><li>输出端浮空，电平易受外界干扰，不稳定</li></ul><h3 id="三-i2c总线介绍"><a class="markdownIt-Anchor" href="#三-i2c总线介绍"></a> 三、I2C总线介绍：</h3><ul><li>I2C总线（Inter IC BUS）是由Philips公司开发的一种通用数据总线</li><li>两根通信线：SCL（Serial Clock）、SDA（Serial Data）</li><li>同步、半双工，带数据应答</li><li>通用的I2C总线，可以使各种设备的通信标准统一，对于厂家来说，使用成熟的方案可以缩短芯片设计周期、提高稳定性，对于应用者来说，使用通用的通信协议可以避免学习各种各样的自定义协议，降低了学习和应用的难度</li></ul><h3 id="四-i2c电路规范"><a class="markdownIt-Anchor" href="#四-i2c电路规范"></a> 四、I2C电路规范</h3><ul><li><p>所有I2C设备的SCL连在一起，SDA连在一起</p></li><li><p>设备的SCL和SDA均要配置成开漏输出模式</p></li><li><p>SCL和SDA各添加一个上拉电阻，阻值一般为4.7KΩ左右</p></li><li><p>开漏输出和上拉电阻的共同作用实现了“线与”的功能，此设计主要是为了解决多机通信互相干扰的问题</p></li></ul><h3 id="五-i2c时序结构"><a class="markdownIt-Anchor" href="#五-i2c时序结构"></a> 五、I2C时序结构</h3><hr><img src="/posts/4799/1baf27e6e69a429394f21dd1a30900f1.png" class="" title="在这里插入图片描述"><img src="/posts/4799/115006bca35b4b2a8193651f437b65fc.png" class="" title="在这里插入图片描述"><img src="/posts/4799/a1ec063743594e96bb853e3fe69a3800.png" class="" title="在这里插入图片描述"><img src="/posts/4799/image-20240302223549490.png" class="" title="image-20240302223549490"><img src="/posts/4799/72b48d4af46f41ec9fe40720751e4a39.png" class="" title="在这里插入图片描述"><img src="/posts/4799/image-20240302225440107.png" class="" title="image-20240302225440107"><hr><p><strong>总结：IIC的工作模块</strong></p><ul><li>起始条件</li><li>中止条件</li><li>发送一个字节</li><li>接收一个字节</li><li>接收应答</li><li>发送应答</li></ul><hr><h2 id="存储器at24c02"><a class="markdownIt-Anchor" href="#存储器at24c02"></a> #存储器/AT24C02</h2><h3 id="一-ram和rom"><a class="markdownIt-Anchor" href="#一-ram和rom"></a> 一、RAM和ROM</h3><blockquote><p>**RAM : 易失性存储器 (高速存储） **</p><p><mark>单片机内RAM为中间数据存储器</mark></p></blockquote><ul><li>SRAM：静态RAM，电脑中的CPU，高速缓存，容量少，成本高</li><li>DRAM：动态RAM，使用电容存储，电容容值小，需要补电能，成本相较于SRAM更低，容量更大</li><li>掉电丢失</li></ul><blockquote><p><strong>ROM:非易失性存储器</strong></p><p><mark>单片机内ROM为指令存储器</mark></p></blockquote><ul><li>Mask ROM(掩膜ROM），只能读，不能写</li><li>PROM：可编程ROM，可以写，但是只能写入一次</li><li>EPROM：可擦除可编程ROM，可以编程，也可以清除（30分钟紫外线）</li><li>E2PROM： 电可擦除可编程ROM，5V电可擦除，掉电不丢失</li><li>Flash（闪存）：</li><li>硬盘、软盘、光盘等：磁介质、光信号</li></ul><hr><img src="/posts/4799/image-20240302224153992.png" class="" title="image-20240302224153992"><blockquote><p>单片机烧录的由来：早期通过编程储存数据，实际上是将特殊的二极管击穿，相当于“烧毁”（PROM）</p></blockquote><hr><h3 id="二-at24c02"><a class="markdownIt-Anchor" href="#二-at24c02"></a> 二、AT24C02</h3><img src="/posts/4799/image-20240302224329935.png" class="" title="image-20240302224329935"><img src="/posts/4799/7b07f23e9e7640f1b8db85bc873a9e36.png" class="" title="在这里插入图片描述"><h1 id="代码部分"><a class="markdownIt-Anchor" href="#代码部分"></a> 代码部分</h1><h2 id="一-给at24c02写入数据"><a class="markdownIt-Anchor" href="#一-给at24c02写入数据"></a> 一、给AT24C02写入数据</h2><blockquote><p><strong>实现：AT24C02掉电不丢失</strong></p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"LCD1602.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"AT24C02.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Data;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"Hello World"</span>);</span><br><span class="line"><span class="comment">//AT24C02_WriteByte(1,123);</span></span><br><span class="line">Delay(<span class="number">5</span>);<span class="comment">//AT21C02写一个序列的有效停止条件开始至内部写周期结束的时间</span></span><br><span class="line">Data=AT24C02_ReadByte(<span class="number">1</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,Data,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>完善代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"LCD1602.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"AT24C02.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> KeyNum;</span><br><span class="line"><span class="comment">//unsigned char Num; 这里要用到整型</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Num;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">1</span>,Num,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">KeyNum=Key();</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">Num++;</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">1</span>,Num,<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">Num--;</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">1</span>,Num,<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line">AT24C02_WriteByte(<span class="number">0</span>,Num%<span class="number">256</span>);<span class="comment">//低八位</span></span><br><span class="line">Delay(<span class="number">5</span>);</span><br><span class="line">AT24C02_WriteByte(<span class="number">1</span>,Num/<span class="number">256</span>);<span class="comment">//高八位</span></span><br><span class="line">Delay(<span class="number">5</span>);</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"Write OK"</span>);<span class="comment">//完成写入数据，提示</span></span><br><span class="line">Delay(<span class="number">1000</span>);</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"        "</span>);<span class="comment">//延时清除</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">4</span>)<span class="comment">//读的时候不需要Delay</span></span><br><span class="line">{</span><br><span class="line">Num=AT24C02_ReadByte(<span class="number">0</span>);</span><br><span class="line">Num|=AT24C02_ReadByte(<span class="number">1</span>)&lt;&lt;<span class="number">8</span>;</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">1</span>,Num,<span class="number">5</span>);</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"Read OK"</span>);<span class="comment">//完成读取数据，提示</span></span><br><span class="line">Delay(<span class="number">1000</span>);</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"        "</span>);<span class="comment">//延时清除</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>为什么要写:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AT24C02_WriteByte(<span class="number">0</span>,Num%<span class="number">256</span>);<span class="comment">//低八位</span></span><br><span class="line">Delay(<span class="number">5</span>);</span><br><span class="line">AT24C02_WriteByte(<span class="number">1</span>,Num/<span class="number">256</span>);<span class="comment">//高八位</span></span><br></pre></td></tr></tbody></table></figure><p>因为：int类型最高65535,对应的二进制为16位</p><h2 id="二-定时器扫描按键"><a class="markdownIt-Anchor" href="#二-定时器扫描按键"></a> 二、定时器扫描按键</h2><blockquote><p><strong>实验：定时器按键扫描，<mark>实现键值的数码管显示</mark></strong></p><p><strong>实验结果：如果直接让Nixie在判断键码后显示Keynum值，只能显示一瞬间，数码管的显示方式不同于LCD1602，所以需要一个缓存量Temp</strong></p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*错误写法*/</span><br><span class="line">Temp=Key();</span><br><span class="line">if(KeyNum)//显示结果只在一瞬间显示</span><br><span class="line">{</span><br><span class="line">Nixie(1,KeyNum);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/*正确写法*/</span><br><span class="line">if(Temp)</span><br><span class="line">{</span><br><span class="line">KeyNum=Temp;</span><br><span class="line">}</span><br><span class="line">Nixie(1,KeyNum);</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>实验：定时器按键扫描实列2</strong></p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;REGX52.H&gt;</span><br><span class="line">#include "Key.h"</span><br><span class="line">#include "AT24C02.h"</span><br><span class="line">#include "Timer0.h"</span><br><span class="line">#include "Nixie.h"</span><br><span class="line">#include "Delay.h"</span><br><span class="line">unsigned char KeyNum;</span><br><span class="line">void main()</span><br><span class="line">{</span><br><span class="line">Timer0_Init();</span><br><span class="line">while(1)</span><br><span class="line">{</span><br><span class="line">KeyNum=Key();</span><br><span class="line">if(KeyNum)</span><br><span class="line">{</span><br><span class="line">Nixie_SetBuf(1,KeyNum);</span><br><span class="line">Nixie_SetBuf(2,KeyNum);</span><br><span class="line">Nixie_SetBuf(3,KeyNum);</span><br><span class="line">Delay(1000);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void Timer0_Routine() interrupt 1 //中断子程序</span><br><span class="line">{</span><br><span class="line">static unsigned int T0Count1,T0Count2;//静态局部变量，保证退出函数之后不销毁</span><br><span class="line">TL0 = 0x66;//设置定时初始值</span><br><span class="line">TH0 = 0xFC;//设置定时初始值</span><br><span class="line">T0Count1++;//每次进入中断子程序，秒控制器自加一</span><br><span class="line">if(T0Count1&gt;=20)//每隔20ms，按键函数会被调用一次</span><br><span class="line">{</span><br><span class="line">T0Count1=0;</span><br><span class="line">Key_Loop(); </span><br><span class="line">}</span><br><span class="line">T0Count2++;</span><br><span class="line">if(T0Count2&gt;=2)</span><br><span class="line">{</span><br><span class="line"> T0Count2=0;</span><br><span class="line"> Nixie_Loop();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>实验结果：</strong></p><img src="/posts/4799/cd3ca4af62f4478d9e79c4a31087a160.jpeg" class="" title="请添加图片描述"><img src="/posts/4799/858d834686d84ec7b7dab21610cca5db.jpeg" class="" title="请添加图片描述"><p><strong><mark>这时，按下按键，数码管显示会延时一秒改变，可见，使用定时器扫描按键，不会被延时函数影响，相较于延时函数使单片机的工作更具有可靠性</mark></strong></p></blockquote><hr><blockquote><p><strong>秒表源代码：</strong><br>操作方式：</p><ul><li>按键1暂停</li><li>按键2清零</li><li>按键3通过AT24C02写入数据</li><li>按键4通过AT24C02读取数据</li></ul></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"AT24C02.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Timer0.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Nixie.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> KeyNum;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Min,Sec,MiniSec;<span class="comment">//单位：分，秒，1/100s=10ms</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> RunFlag;<span class="comment">//启动暂定标志位</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">P2_5=<span class="number">0</span>;<span class="comment">//蜂鸣器关闭</span></span><br><span class="line">Timer0_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">KeyNum=Key();</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">RunFlag=!RunFlag;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">Min=<span class="number">0</span>;Sec=<span class="number">0</span>;MiniSec=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line">AT24C02_WriteByte(<span class="number">0</span>,Min);</span><br><span class="line">Delay(<span class="number">5</span>);</span><br><span class="line">AT24C02_WriteByte(<span class="number">1</span>,Sec);</span><br><span class="line">Delay(<span class="number">5</span>);</span><br><span class="line">AT24C02_WriteByte(<span class="number">2</span>,MiniSec);</span><br><span class="line">Delay(<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">4</span>)</span><br><span class="line">{</span><br><span class="line">Min=AT24C02_ReadByte(<span class="number">0</span>);</span><br><span class="line">Sec=AT24C02_ReadByte(<span class="number">1</span>);</span><br><span class="line">MiniSec=AT24C02_ReadByte(<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Nixie_SetBuf(<span class="number">1</span>,Min/<span class="number">10</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">2</span>,Min%<span class="number">10</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">3</span>,<span class="number">11</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">4</span>,Sec/<span class="number">10</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">5</span>,Sec%<span class="number">10</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">7</span>,MiniSec/<span class="number">10</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">8</span>,MiniSec%<span class="number">10</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Sec_Loop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(RunFlag)</span><br><span class="line">{</span><br><span class="line">MiniSec++;</span><br><span class="line"><span class="keyword">if</span>(MiniSec&gt;=<span class="number">100</span>)</span><br><span class="line">{</span><br><span class="line">MiniSec=<span class="number">0</span>;</span><br><span class="line">Sec++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(Sec&gt;=<span class="number">60</span>)</span><br><span class="line">{</span><br><span class="line">Sec=<span class="number">0</span>;</span><br><span class="line">Min++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(Min&gt;=<span class="number">60</span>)</span><br><span class="line">{</span><br><span class="line">Min=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Routine</span><span class="params">()</span> interrupt 1 <span class="comment">//中断子程序</span></span><br><span class="line">{</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> T0Count1,T0Count2,T0Count3;<span class="comment">//静态局部变量，保证退出函数之后不销毁</span></span><br><span class="line">TL0 = <span class="number">0x66</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">T0Count1++;<span class="comment">//每次进入中断子程序，秒控制器自加一</span></span><br><span class="line"><span class="keyword">if</span>(T0Count1&gt;=<span class="number">20</span>)<span class="comment">//每隔20ms，按键函数会被调用一次</span></span><br><span class="line">{</span><br><span class="line">T0Count1=<span class="number">0</span>;</span><br><span class="line">Key_Loop(); </span><br><span class="line">}</span><br><span class="line">T0Count2++;</span><br><span class="line"><span class="keyword">if</span>(T0Count2&gt;=<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line"> T0Count2=<span class="number">0</span>;</span><br><span class="line"> Nixie_Loop();</span><br><span class="line">}</span><br><span class="line">T0Count3++;</span><br><span class="line"><span class="keyword">if</span>(T0Count3&gt;=<span class="number">10</span>)<span class="comment">//10ms</span></span><br><span class="line">{</span><br><span class="line"> T0Count3=<span class="number">0</span>;</span><br><span class="line"> Sec_Loop();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>题外话: 6-1矩阵键盘密码锁：为什么密码不能设置为0开头?<br>因为0开头代表八进制,比如0123实际上对应的十进制数是83</p></blockquote><hr><h1 id="蓝桥杯stc15拓展"><a class="markdownIt-Anchor" href="#蓝桥杯stc15拓展"></a> #蓝桥杯(STC15)拓展</h1><p><strong>IIC通信底层</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"iic.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELAY_TIME 5</span></span><br><span class="line"><span class="comment">// I2C总线内部延时函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> i)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    {</span><br><span class="line">        _nop_();</span><br><span class="line">    } <span class="keyword">while</span> (i--);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// I2C总线启动信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    SDA = <span class="number">1</span>;</span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SDA = <span class="number">0</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// I2C总线停止信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    SDA = <span class="number">0</span>;</span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SDA = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送应答或非应答信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_SendAck</span><span class="params">(bit ackbit)</span></span><br><span class="line">{</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">    SDA = ackbit;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">    SDA = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待应答</span></span><br><span class="line">bit <span class="title function_">IIC_WaitAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    bit ackbit;</span><br><span class="line"></span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    ackbit = SDA;</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    <span class="keyword">return</span> ackbit;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// I2C总线发送一个字节数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_SendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byt)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        SCL = <span class="number">0</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">        <span class="keyword">if</span> (byt &amp; <span class="number">0x80</span>)</span><br><span class="line">            SDA = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            SDA = <span class="number">0</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">        SCL = <span class="number">1</span>;</span><br><span class="line">        byt &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">    }</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// I2C总线接收一个字节数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">IIC_RecByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, da;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        SCL = <span class="number">1</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">        da &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (SDA)</span><br><span class="line">            da |= <span class="number">1</span>;</span><br><span class="line">        SCL = <span class="number">0</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> da;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*基于IIC底层，编写AT24C02函数模块*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief 写入EEPROM</span></span><br><span class="line"><span class="comment">  * @param  需要写的字符串，写入的地址，写入数量</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EEPROM_Write</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *EEPROM_String,<span class="type">unsigned</span> <span class="type">char</span> addr,<span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">{</span><br><span class="line">IIC_Start();<span class="comment">//发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0xA0</span>);<span class="comment">//主机发送寻址信号，确认EEPROM芯片，写模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//等待应答</span></span><br><span class="line">    </span><br><span class="line">    IIC_SendByte(addr);<span class="comment">//写入要储存的数据地址,最好是八的倍数，如果不是8的倍数，将无法写入整页的字节</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//等待应答</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(num--)</span><br><span class="line">    {</span><br><span class="line">        IIC_SendByte(*EEPROM_String++);<span class="comment">//要存入AT24C02的数据,按位存</span></span><br><span class="line">        IIC_WaitAck();<span class="comment">//等待应答</span></span><br><span class="line">        IIC_Delay(<span class="number">200</span>);</span><br><span class="line">    }</span><br><span class="line">    IIC_Stop();<span class="comment">//停止IIC命令</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief 读取EEPROM数据,替换需要读取字符串的数据</span></span><br><span class="line"><span class="comment">  * @param  需要读取的字符串，写入的地址，写入数量</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EEPROM_Read</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *EEPROM_String,<span class="type">unsigned</span> <span class="type">char</span> addr,<span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">{</span><br><span class="line">    IIC_Start();<span class="comment">//发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0xA0</span>);<span class="comment">//主机发送寻址信号，确认EEPROM芯片，写模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//等待应答</span></span><br><span class="line"></span><br><span class="line">    IIC_SendByte(addr);<span class="comment">//写入要读取的数据地址,最好是八的倍数，如果不是8的倍数，将无法写入整页的字节</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//等待应答  </span></span><br><span class="line"></span><br><span class="line">    IIC_Start();<span class="comment">//发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0xA1</span>);<span class="comment">//主机发送寻址信号，确认EEPROM芯片，读模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//等待应答</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(num--)</span><br><span class="line">    {</span><br><span class="line">        *EEPROM_String++=IIC_RecByte();<span class="comment">//按位取数据</span></span><br><span class="line">        <span class="keyword">if</span>(num)<span class="comment">//未取完数据</span></span><br><span class="line">        {</span><br><span class="line">            IIC_SendAck(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        {</span><br><span class="line">            IIC_SendAck(<span class="number">1</span>);<span class="comment">//主机接收完数据，发送应答</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    IIC_Stop();<span class="comment">//停止IIC通信</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【stm32单片机】[5]定时器控制PWM</title>
      <link href="/posts/32351/"/>
      <url>/posts/32351/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>配置结构体初始化输出比较单元</strong></p><p>void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);<br>void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);<br>void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);<br>void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);</p><p><strong>设置结构体初始值</strong></p><p>void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct);</p><hr><p><strong>*配置强制输出</strong></p><p>void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);<br>void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);<br>void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);<br>void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);</p><p><strong>*配置影子寄存器</strong></p><p>void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);<br>void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);<br>void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);<br>void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);</p><p><strong>*配置快速使能</strong></p><p>void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);<br>void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);<br>void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);<br>void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);</p><p><strong>*清除REF信号</strong></p><p>void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);<br>void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);<br>void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);<br>void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);</p><p><strong>配置输出极性</strong></p><blockquote><p>带N即高级定时器里互补通道的配置</p><p>OC4无互补通道</p><p>结构体初始化中也可以设置极性</p></blockquote><p>void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);<br>void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);<br>void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);<br>void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);<br>void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);<br>void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);<br>void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);</p><p>void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx);<br>void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN);</p><p><strong>单独修改输出使能参数</strong></p><p>void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx);<br>void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN);</p><p><strong>单独更改输出比较模式</strong></p><p>void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode);</p><p><strong>单独更改CCR寄存器的函数</strong></p><p>void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);<br>void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);<br>void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);<br>void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);</p><p><strong>高级定时器，使能PWM，否则无法正常输出</strong></p><p>void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> stm32单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> stm32单片机 </tag>
            
            <tag> 定时器 </tag>
            
            <tag> PWM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【蓝桥杯单片机】程序模板设计</title>
      <link href="/posts/18220/"/>
      <url>/posts/18220/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p><strong>为了确保程序的准确性，总结了以下要点</strong></p><ol><li><mark>保证程序<strong>逻辑正确</strong>，其次再是“基于现象上”的正确，保证程序不会出现<strong>隐性问题</strong></mark></li><li><mark>在逻辑正确的前提下，保证数据读取的<strong>实时性</strong>，尽量优化代码执行效率</mark></li><li><mark>对数据的处理，在确保程序完全正常运行的前提下，最大限度地提高内存空间的<strong>利用率</strong></mark></li><li><mark>编写程序时，先写主框架，验证逻辑后，再依次验证其他模块</mark></li></ol><h1 id="数码管led模块工作原理"><a class="markdownIt-Anchor" href="#数码管led模块工作原理"></a> 数码管/LED模块工作原理</h1><p><mark>例如：数码管的段选/位选输出由两个74HC573锁存器控制</mark></p><img src="/posts/18220/image-20240301234539921.png" class="" title="image-20240301234539921"><blockquote><p><strong>锁存器送出数据的过程</strong></p><ol><li><p>P0输出8位数据</p></li><li><p>锁存器不使能，Q0~Q7为之前的数据，D0 ~ D7等待被送出</p></li><li><p>锁存器使能，数据送出，Q0~Q7即为P00 ~ P07的信号</p><p>注意：OE此处默认接GND</p></li></ol></blockquote><blockquote><p>**如何控制锁存器送出数据的顺序/使锁存器单个送出数据? **</p><ul><li>由一个或非门(U25)的四个输出控制四个锁存器的输入使能信号(Y7C~Y4C)</li></ul><img src="/posts/18220/image-20240301235153721.png" class="" title="image-20240301235153721"><ul><li>或非门的输入Y7 ~ Y4由一个译码器的输出控制，或非门的一端WR默认为低电平，那么这里的或非门就相当于一个输入为Y（n）的非门</li><li>其中74HC138(U24)的输入为P2口的P27~P25</li><li>通过推导可知，P27 ~ P25对应的三位二进制数即为后面会使能的锁存器，即111使得Y7=0，继而使得与非门输出Y7C=1，使得控制数码管段选的锁存器使能，送出数据。</li></ul><img src="/posts/18220/image-20240301235438487.png" class="" title="image-20240301235438487"><p>总结：P27~P25对应组成的二进制值即为使能的锁存器, LED/数码管/外设控制都是由锁存器控制，锁存器的输入共用<mark>P0口</mark>，这样通过多个锁存器，以及逻辑电路，节省了单片机的IO口</p></blockquote><h1 id="程序设计与分析"><a class="markdownIt-Anchor" href="#程序设计与分析"></a> 程序设计与分析</h1><h2 id="ct107d初始化"><a class="markdownIt-Anchor" href="#ct107d初始化"></a> CT107D初始化</h2><p><strong><mark>上电时，默认所有IO口为高电平，未被使能过的锁存器默认输出低电平，这会导致全部LED被点亮，有源蜂鸣器响(也是低电平有效),这就需要我们写一个程序初始化函数，关闭这些影响后续功能的现象</mark></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief系统初始化函数</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">System_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*关闭LED*/</span></span><br><span class="line">P0 = <span class="number">0xFF</span>;</span><br><span class="line">P2 = P2 &amp; <span class="number">0x1F</span> | <span class="number">0x80</span>;    <span class="comment">//100X XXXX 锁存器Y4C使能</span></span><br><span class="line">P2 &amp;= <span class="number">0x1F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*关闭蜂鸣器*/</span></span><br><span class="line">P0=<span class="number">0x00</span>;<span class="comment">//锁存器输出会经过ULN2003，相当于反相器，预载值应为全低电平，这样最终输出的是高电平</span></span><br><span class="line">P2 = P2 &amp; <span class="number">0x1F</span> | <span class="number">0xA0</span>;    <span class="comment">//101X XXXX 锁存器Y5C使能</span></span><br><span class="line">P2 &amp;= <span class="number">0x1F</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：锁存器输出会经过ULN2003，相当于(增强驱动能力)反相器，预载值(P2)应为全低电平，这样最终输出的是高电平。</strong></p><p>ULN2003：<a href="https://blog.csdn.net/qq_38410730/article/details/79787766">【常用芯片】ULN2003工作原理及中文资料（实例：STM32驱动28BYJ48步进电机）_uln2003驱动板说明书-CSDN博客</a></p><p><strong>由于单片机的引脚输出电流太低了，无法驱动大部分的设备。而ULN2003只相当于是一个开关，设备（负载）的供电是在外围电路上，而它能够通过微弱的单片机输出电流来控制外围电路的开闭。这某种程度上也可以说是，放大电流，增加驱动能力</strong></p><img src="/posts/18220/image-20240302002932910.png" class="" title="image-20240302002932910"><img src="/posts/18220/image-20240302003020482.png" class="" title="image-20240302003020482"><h2 id="led模块"><a class="markdownIt-Anchor" href="#led模块"></a> LED模块</h2><p>原理图</p><img src="/posts/18220/image-20240302002203560.png" class="" title="image-20240302002203560"><img src="/posts/18220/image-20240302002230011.png" class="" title="image-20240302002230011"><h2 id="led蜂鸣器继电器"><a class="markdownIt-Anchor" href="#led蜂鸣器继电器"></a> LED/蜂鸣器/继电器</h2><p>ps:~(0x01&lt;&lt;addr); 一定要加括号，否则会出现逻辑错误，如 0000 0001–&gt; 1110 1111 变成 1111 1110 – &gt; 1110 0000 ，最终经过一系列运行导致<mark>LED亮度降低</mark>(待考究)。</p><p>ps:<mark>一定要仔细注意逻辑，不能记忆性写程序！</mark></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LED.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  LED控制函数</span></span><br><span class="line"><span class="comment">  * @param  LED位，使能标志位</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> temp_1;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> temp_old_1;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Disp</span><span class="params">(<span class="type">unsigned</span> addr,enable)</span> </span><br><span class="line">{</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> temp=<span class="number">0x00</span>;   <span class="comment">// led暂存值</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> temp_old=<span class="number">0xFF</span>; <span class="comment">//上下两个变量应当赋不想等的初值</span></span><br><span class="line"><span class="keyword">if</span>(enable)<span class="comment">//LED使能时</span></span><br><span class="line">{</span><br><span class="line">temp|=<span class="number">0x01</span>&lt;&lt;addr; <span class="comment">//点亮第一位, 即 0x01&lt;&lt;0 temp=xxxx xxx1</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">temp&amp;=~(<span class="number">0x01</span>&lt;&lt;addr); <span class="comment">//熄灭第一位，即~ (0x01&lt;&lt;0) temp=xxxx xxx0</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(temp!=temp_old) <span class="comment">// temp的值发生变化时（即外部调用此函数，想要改变LED的状态），才会对P0进行赋值操作，因为P0口负责多个锁存器的预载值，LED一般是静态的，不应该对P0进行反复赋值</span></span><br><span class="line">{</span><br><span class="line">P0=~temp; <span class="comment">//低电平有效，故按位取反</span></span><br><span class="line">P2 = P2 &amp; <span class="number">0x1F</span> | <span class="number">0x80</span>;    <span class="comment">//100X XXXX 锁存器（Y4C使能）</span></span><br><span class="line">P2 &amp;= <span class="number">0x1F</span>;<span class="comment">//000 x xxxx</span></span><br><span class="line">temp_old=temp;<span class="comment">//记录当前的led暂存值</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Beep</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> flag)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">temp_1 |= <span class="number">0x40</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp_1 &amp;= ~<span class="number">0x40</span>;</span><br><span class="line"><span class="keyword">if</span>(temp_1 != temp_old_1)</span><br><span class="line">{</span><br><span class="line">P0 = temp_1;</span><br><span class="line">P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xa0</span>; <span class="comment">//锁存器（Y5C使能）</span></span><br><span class="line">P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">temp_old_1 = temp_1;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Relay</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> flag)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">temp_1 |= <span class="number">0x10</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp_1 &amp;= ~<span class="number">0x10</span>;</span><br><span class="line"><span class="keyword">if</span>(temp_1 != temp_old_1)</span><br><span class="line">{</span><br><span class="line">P0 = temp_1;</span><br><span class="line">P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xa0</span>;<span class="comment">//锁存器（Y5C使能）</span></span><br><span class="line">P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">temp_old_1 = temp_1;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>PS:按位取或/按位取与，通常用于对单个BIT位进行操作</strong></p><h2 id="数码管模块"><a class="markdownIt-Anchor" href="#数码管模块"></a> 数码管模块</h2><p>ps:<strong><mark>蓝桥杯单片机开发板使用的是共阳极数码管，注意段码和位码，以及Disp函数的逻辑</mark></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Nixie.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//共阳极数码管</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_seg[] = <span class="comment">//段码</span></span><br><span class="line">{</span><br><span class="line"><span class="number">0xc0</span>, <span class="comment">//0</span></span><br><span class="line"><span class="number">0xf9</span>, <span class="comment">//1</span></span><br><span class="line"><span class="number">0xa4</span>, <span class="comment">//2</span></span><br><span class="line"><span class="number">0xb0</span>, <span class="comment">//3</span></span><br><span class="line"><span class="number">0x99</span>, <span class="comment">//4</span></span><br><span class="line"><span class="number">0x92</span>, <span class="comment">//5</span></span><br><span class="line"><span class="number">0x82</span>, <span class="comment">//6</span></span><br><span class="line"><span class="number">0xf8</span>, <span class="comment">//7</span></span><br><span class="line"><span class="number">0x80</span>, <span class="comment">//8</span></span><br><span class="line"><span class="number">0x90</span>, <span class="comment">//9</span></span><br><span class="line"><span class="number">0xFF</span>, <span class="comment">//熄灭&lt;10&gt;</span></span><br><span class="line"><span class="number">0x88</span>, <span class="comment">//A &lt;11&gt;</span></span><br><span class="line"><span class="number">0x83</span>, <span class="comment">//b&lt;12&gt;</span></span><br><span class="line"><span class="number">0xc6</span>, <span class="comment">//C&lt;13&gt;</span></span><br><span class="line"><span class="number">0xa1</span>, <span class="comment">//d&lt;14&gt;</span></span><br><span class="line"><span class="number">0x86</span>, <span class="comment">//E&lt;15&gt;</span></span><br><span class="line"><span class="number">0x8e</span>  <span class="comment">//F&lt;16&gt;</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Location[] =  <span class="comment">//位码</span></span><br><span class="line">{</span><br><span class="line"><span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x02</span>,</span><br><span class="line"><span class="number">0x04</span>,</span><br><span class="line"><span class="number">0x08</span>,</span><br><span class="line"><span class="number">0x10</span>,</span><br><span class="line"><span class="number">0x20</span>,</span><br><span class="line"><span class="number">0x40</span>,</span><br><span class="line"><span class="number">0x80</span></span><br><span class="line">};</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief数码管点亮函数</span></span><br><span class="line"><span class="comment">  * @param  位选，段选，小数点</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie_Disp</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Location,Seg,Point)</span></span><br><span class="line">{</span><br><span class="line">P0=<span class="number">0xFF</span>; <span class="comment">//段码，数码管熄灭，消影</span></span><br><span class="line">P2 = P2 &amp; <span class="number">0x1F</span> | <span class="number">0xE0</span>;    <span class="comment">//111X XXXX 锁存器 Y7C使能</span></span><br><span class="line">P2 &amp;= <span class="number">0x1F</span>;<span class="comment">//关闭锁存器</span></span><br><span class="line"></span><br><span class="line">P0=Nixie_Location[Location];<span class="comment">//位选预载值</span></span><br><span class="line">P2 = P2 &amp; <span class="number">0x1F</span> | <span class="number">0xC0</span>;    <span class="comment">//101X XXXX 锁存器 Y5C使能</span></span><br><span class="line">P2 &amp;= <span class="number">0x1F</span>;<span class="comment">//关闭锁存器</span></span><br><span class="line"></span><br><span class="line">P0=Nixie_seg[Seg];<span class="comment">//段选预载值</span></span><br><span class="line">    <span class="comment">//这里的Point即为数码管‘点’的使能位，实质上‘点’对应的是数码管段码的BIT7，最高位</span></span><br><span class="line"><span class="keyword">if</span>(Point){P0 &amp;= <span class="number">0x7F</span>;}    <span class="comment">//错误写法：P0|=0x80; 共阳极数码管！，逻辑0点亮！</span></span><br><span class="line">P2 = P2 &amp; <span class="number">0x1F</span> | <span class="number">0xE0</span>;   <span class="comment">//111X XXXX 锁存器 Y7C使能</span></span><br><span class="line">P2 &amp;= <span class="number">0x1F</span>;<span class="comment">//关闭锁存器</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="定时器模块"><a class="markdownIt-Anchor" href="#定时器模块"></a> 定时器模块</h2><p><strong><mark>注意，STC15单片机的定时器是支持自动重装载的，这里不需要在中断子程序中赋初值，否则会出现定时器定时值的混乱</mark></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Timer0.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief定时器初始化</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Init</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//1毫秒@12.000MHz</span></span><br><span class="line">{</span><br><span class="line">AUXR &amp;= <span class="number">0x7F</span>;<span class="comment">//定时器时钟12T模式</span></span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TL0 = <span class="number">0x18</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TF0 = <span class="number">0</span>;<span class="comment">//清除TF0标志</span></span><br><span class="line">TR0 = <span class="number">1</span>;<span class="comment">//定时器0开始计时</span></span><br><span class="line">ET0 = <span class="number">1</span>;<span class="comment">//定时器中断0打开</span></span><br><span class="line">EA  = <span class="number">1</span>;<span class="comment">//总中断打开</span></span><br><span class="line">PT0 = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void Timer0_Server(void)  interrupt 1</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="按键模块"><a class="markdownIt-Anchor" href="#按键模块"></a> 按键模块</h2><p>ps:<strong><mark>键值读取函数中定义局部变量temp一定要赋初值！！！否则会出现在没有按键按下时键值读取异常值的情况。</mark></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Key.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief矩阵按键读取函数</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/*矩阵按键模式*/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Key_Read</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> temp=<span class="number">0</span>;<span class="comment">//局部变量初始化为0</span></span><br><span class="line">    ET0=<span class="number">0</span>;<span class="comment">//串口使用屏蔽</span></span><br><span class="line">P44=<span class="number">0</span>;P42=<span class="number">1</span>;P35=<span class="number">1</span>;P34=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(P33==<span class="number">0</span>){temp=<span class="number">4</span>;}</span><br><span class="line"><span class="keyword">if</span>(P32==<span class="number">0</span>){temp=<span class="number">5</span>;}</span><br><span class="line"><span class="keyword">if</span>(P31==<span class="number">0</span>){temp=<span class="number">6</span>;}</span><br><span class="line"><span class="keyword">if</span>(P30==<span class="number">0</span>){temp=<span class="number">7</span>;}</span><br><span class="line">P44=<span class="number">0</span>;P42=<span class="number">1</span>;P35=<span class="number">1</span>;P34=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(P33==<span class="number">0</span>){temp=<span class="number">8</span>;}</span><br><span class="line"><span class="keyword">if</span>(P32==<span class="number">0</span>){temp=<span class="number">9</span>;}</span><br><span class="line"><span class="keyword">if</span>(P31==<span class="number">0</span>){temp=<span class="number">10</span>;}</span><br><span class="line"><span class="keyword">if</span>(P30==<span class="number">0</span>){temp=<span class="number">11</span>;}</span><br><span class="line">P44=<span class="number">0</span>;P42=<span class="number">1</span>;P35=<span class="number">1</span>;P34=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(P33==<span class="number">0</span>){temp=<span class="number">12</span>;}</span><br><span class="line"><span class="keyword">if</span>(P32==<span class="number">0</span>){temp=<span class="number">13</span>;}</span><br><span class="line"><span class="keyword">if</span>(P31==<span class="number">0</span>){temp=<span class="number">14</span>;}</span><br><span class="line"><span class="keyword">if</span>(P30==<span class="number">0</span>){temp=<span class="number">15</span>;}</span><br><span class="line">P44=<span class="number">0</span>;P42=<span class="number">1</span>;P35=<span class="number">1</span>;P34=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(P33==<span class="number">0</span>){temp=<span class="number">16</span>;}</span><br><span class="line"><span class="keyword">if</span>(P32==<span class="number">0</span>){temp=<span class="number">17</span>;}</span><br><span class="line"><span class="keyword">if</span>(P31==<span class="number">0</span>){temp=<span class="number">18</span>;}</span><br><span class="line"><span class="keyword">if</span>(P30==<span class="number">0</span>){temp=<span class="number">19</span>;}</span><br><span class="line">    ET0=<span class="number">1</span>;<span class="comment">//串口使用打开</span></span><br><span class="line">    P3=<span class="number">0xff</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief独立按键读取函数</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/*独立按键模式*/</span></span><br><span class="line"><span class="comment">/*unsigned char Key_Read(void)</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">if(P33==0){temp=4;}</span></span><br><span class="line"><span class="comment">if(P32==0){temp=5;}</span></span><br><span class="line"><span class="comment">if(P31==0){temp=6;}</span></span><br><span class="line"><span class="comment">if(P30==0){temp=7;}</span></span><br><span class="line"><span class="comment">return temp;</span></span><br><span class="line"><span class="comment">}*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="主函数模块"><a class="markdownIt-Anchor" href="#主函数模块"></a> 主函数模块</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件引用</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Key.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Nixie.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Timer0.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Buf[<span class="number">8</span>]={<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>};<span class="comment">//数码管显示数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Pos;<span class="comment">//数码管数据数组位下标</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Point[<span class="number">8</span>]={<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//数码管每一段的“点”数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key;<span class="comment">//键值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key_Up,Key_Down,Key_Val,Key_Old;<span class="comment">//按键扫描变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ucLED[<span class="number">8</span>]={<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//LED显示数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Nixie_Timer;<span class="comment">//数码管定时更新</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Key_Timer;<span class="comment">//按键定时扫描</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*按键处理函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Key_Timer) <span class="keyword">return</span>;<span class="comment">//Key_Timer=0时执行下面的语句</span></span><br><span class="line">Key_Timer=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//按键扫描部分//</span></span><br><span class="line">Key_Val=Key_Read();</span><br><span class="line">Key_Down=Key_Val &amp; (Key_Old ^ Key_Val);</span><br><span class="line">Key_Up=~Key_Val &amp; (Key_Old ^ Key_Val);</span><br><span class="line">Key_Old=Key_Val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*信息（数码管）显示处理函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie_Proc</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//信息处理/显示程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Nixie_Timer) <span class="keyword">return</span>;<span class="comment">//Nixie_Timer=0时执行下面的语句</span></span><br><span class="line">Nixie_Timer=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*其他信息处理函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Proc</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//LED“报警”程序</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*串口处理函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">Timer0_Init();<span class="comment">//定时器初始化</span></span><br><span class="line">System_Init();<span class="comment">//系统板初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//循环执行程序模块</span></span><br><span class="line">{</span><br><span class="line">Key_Proc();</span><br><span class="line">Nixie_Proc();</span><br><span class="line">LED_Proc();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Server</span><span class="params">(<span class="type">void</span>)</span> interrupt 4</span><br><span class="line">{</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Server</span><span class="params">(<span class="type">void</span>)</span>  interrupt 1<span class="comment">//中断服务程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(++Nixie_Timer==<span class="number">500</span>){Nixie_Timer=<span class="number">0</span>;}<span class="comment">//500ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Key_Timer==<span class="number">20</span>){Key_Timer=<span class="number">0</span>;}<span class="comment">//20ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Nixie_Pos==<span class="number">8</span>){Nixie_Pos=<span class="number">0</span>;}<span class="comment">//数码管动态显示</span></span><br><span class="line">Nixie_Disp(Nixie_Pos,Nixie_Buf[Nixie_Pos],Nixie_Point[Nixie_Pos]);<span class="comment">//数码管动态显示</span></span><br><span class="line">LED_Disp(Nixie_Pos,ucLED[Nixie_Pos]);<span class="comment">//LED，一轮即可点亮</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="超声波模块使用pca"><a class="markdownIt-Anchor" href="#超声波模块使用pca"></a> 超声波模块（使用PCA）</h2><p><strong>ps:<mark>返回值的单位是cm,可以根据题目要求更改底层</mark></strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ultrasound.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"intrins.h"</span></span></span><br><span class="line"></span><br><span class="line">sbit Tx = P1^<span class="number">0</span>;</span><br><span class="line">sbit Rx = P1^<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay12us</span><span class="params">()</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">38</span>;</span><br><span class="line"><span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Ut_Wave_Init</span><span class="params">()</span> <span class="comment">//超声波模块初始化</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">Tx = <span class="number">1</span>;</span><br><span class="line">Delay12us();</span><br><span class="line">Tx = <span class="number">0</span>;</span><br><span class="line">Delay12us();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Ut_Wave_Data</span><span class="params">()</span> <span class="comment">//超声波距离读取函数</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> time;<span class="comment">//时间储存变量</span></span><br><span class="line">    CCON =  <span class="number">0x00</span>;<span class="comment">// 初始化PCA控制寄存器，PCA定时器停止，清除CF</span></span><br><span class="line">    CH = CL = <span class="number">0</span>;<span class="comment">//复位计数值 等待超声波信号发出</span></span><br><span class="line">    EA=<span class="number">0</span>;<span class="comment">//总中断关闭</span></span><br><span class="line">    Ut_Wave_Init();<span class="comment">//发送超声波信号</span></span><br><span class="line">    EA=<span class="number">1</span>;<span class="comment">//总中断打开</span></span><br><span class="line">    CR = <span class="number">1</span>;<span class="comment">//开始计时</span></span><br><span class="line">    <span class="keyword">while</span>((Rx == <span class="number">1</span>) &amp;&amp; (CF == <span class="number">0</span>));<span class="comment">//等待接受返回信号或者定时器溢出</span></span><br><span class="line">    CR = <span class="number">0</span>;<span class="comment">//停止计时</span></span><br><span class="line">    <span class="keyword">if</span>(CF == <span class="number">0</span>) <span class="comment">//定时器没有溢出</span></span><br><span class="line">    {</span><br><span class="line">        time = CH &lt;&lt; <span class="number">8</span> | CL;<span class="comment">//读取当前时间</span></span><br><span class="line">        <span class="keyword">return</span> (time * <span class="number">0.017</span>);<span class="comment">//返回距离值</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        CF = <span class="number">0</span>;<span class="comment">//清除溢出标志位</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="串口模块putchar重定向"><a class="markdownIt-Anchor" href="#串口模块putchar重定向"></a> 串口模块（putchar重定向）</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 串口初始化函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart1_Init</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//9600bps@12.000MHz</span></span><br><span class="line">{</span><br><span class="line">SCON = <span class="number">0x50</span>;<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">AUXR |= <span class="number">0x01</span>;<span class="comment">//串口1选择定时器2为波特率发生器</span></span><br><span class="line">AUXR |= <span class="number">0x04</span>;<span class="comment">//定时器时钟1T模式</span></span><br><span class="line">T2L = <span class="number">0xC7</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">T2H = <span class="number">0xFE</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">AUXR |= <span class="number">0x10</span>;<span class="comment">//定时器2开始计时</span></span><br><span class="line">ES = <span class="number">1</span>;<span class="comment">//允许串口中断</span></span><br><span class="line">EA = <span class="number">1</span>;<span class="comment">//总中断开启</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* putchar重定向 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">putchar</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> ch)</span></span><br><span class="line">{</span><br><span class="line">SBUF= ch;<span class="comment">//将dat数据赋给SBUF，将数据发送出去</span></span><br><span class="line"><span class="keyword">while</span>(TI == <span class="number">0</span>);<span class="comment">//等待数据发送</span></span><br><span class="line">TI = <span class="number">0</span>;<span class="comment">//将发送标志位清零</span></span><br><span class="line"><span class="keyword">return</span> (ch);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="串口中断服务程序"><a class="markdownIt-Anchor" href="#串口中断服务程序"></a> 串口中断服务程序</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Uart_Server</span><span class="params">()</span> interrupt 4</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(RI == <span class="number">1</span> &amp;&amp; Uart_RecData_Index &lt;<span class="number">8</span>)</span><br><span class="line">    {</span><br><span class="line">        Uart_RecData[Uart_RecData_Index++]=SBUF;</span><br><span class="line">        RI=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(Uart_RecData_Index == <span class="number">6</span>)</span><br><span class="line">    {</span><br><span class="line">        Uart_RecData_Index=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="定时器使用注意事项"><a class="markdownIt-Anchor" href="#定时器使用注意事项"></a> 定时器使用注意事项：</h2><ul><li>定时器0：主要工作定时器.NE555方波发生器</li><li>定时器1：一般用于PWM,使用NE555时,主要定时器选为定时器1</li><li>定时器2：串口中断1绑定</li><li>PCA：用于超声波模块</li></ul><h1 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> #补充</h1><h2 id="一-iic模块"><a class="markdownIt-Anchor" href="#一-iic模块"></a> 一、IIC模块</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  程序说明: IIC总线驱动程序</span></span><br><span class="line"><span class="comment">  软件环境: Keil uVision 4.10 </span></span><br><span class="line"><span class="comment">  硬件环境: CT107单片机综合实训平台 8051，12MHz</span></span><br><span class="line"><span class="comment">  日    期: 2011-8-9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"iic.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"intrins.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELAY_TIME 5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Photo_Res_Channel 0x41</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Adj_Res_Channel 0x43</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//总线引脚定义</span></span><br><span class="line">sbit SDA = P2^<span class="number">1</span>;  <span class="comment">/* 数据线 */</span></span><br><span class="line">sbit SCL = P2^<span class="number">0</span>;  <span class="comment">/* 时钟线 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> i)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">do</span>{_nop_();}</span><br><span class="line">    <span class="keyword">while</span>(i--);        </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay200us</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data i, j;</span><br><span class="line"></span><br><span class="line">i = <span class="number">3</span>;</span><br><span class="line">j = <span class="number">82</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//总线启动条件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    SDA = <span class="number">1</span>;</span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SDA = <span class="number">0</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//总线停止条件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    SDA = <span class="number">0</span>;</span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SDA = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送应答</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_SendAck</span><span class="params">(bit ackbit)</span></span><br><span class="line">{</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">    SDA = ackbit;  <span class="comment">// 0：应答，1：非应答</span></span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    SCL = <span class="number">0</span>; </span><br><span class="line">    SDA = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待应答</span></span><br><span class="line">bit <span class="title function_">IIC_WaitAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    bit ackbit;</span><br><span class="line"></span><br><span class="line">    SCL  = <span class="number">1</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    ackbit = SDA;</span><br><span class="line">    SCL = <span class="number">0</span>;</span><br><span class="line">    IIC_Delay(DELAY_TIME);</span><br><span class="line">    <span class="keyword">return</span> ackbit;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过I2C总线发送数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_SendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byt)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        SCL  = <span class="number">0</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">        <span class="keyword">if</span>(byt &amp; <span class="number">0x80</span>) SDA  = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> SDA  = <span class="number">0</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">        SCL = <span class="number">1</span>;</span><br><span class="line">        byt &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        IIC_Delay(DELAY_TIME);</span><br><span class="line">    }</span><br><span class="line">    SCL  = <span class="number">0</span>;  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//从I2C总线上接收数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">IIC_RecByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, da;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">    {   </span><br><span class="line">    SCL = <span class="number">1</span>;</span><br><span class="line">IIC_Delay(DELAY_TIME);</span><br><span class="line">da &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(SDA) da |= <span class="number">1</span>;</span><br><span class="line">SCL = <span class="number">0</span>;</span><br><span class="line">IIC_Delay(DELAY_TIME);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> da;    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="基于iic的adda转换"><a class="markdownIt-Anchor" href="#基于iic的adda转换"></a> 基于IIC的AD/DA转换</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">AD_Read</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line">    </span><br><span class="line">    IIC_Start();       <span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0x90</span>); <span class="comment">//主机发送寻址信号, 确认PCF8591，写模式</span></span><br><span class="line">    IIC_WaitAck();      <span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_SendByte(addr); <span class="comment">//主机发送一个字节(要操作数据的地址),对应AD转换的通道</span></span><br><span class="line">    IIC_WaitAck();      <span class="comment">//主机等待应答</span></span><br><span class="line">    </span><br><span class="line">    IIC_Start(); <span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0x91</span>); <span class="comment">//主机发送寻址信号, 确认PCF8591，读模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">    temp = IIC_RecByte(); <span class="comment">//从机送出数据,主机读入的数据用变量存储</span></span><br><span class="line">    IIC_SendAck(<span class="number">1</span>);<span class="comment">//主机发送应答,1表示完成数据的接收,从机停止发送数据</span></span><br><span class="line">    IIC_Stop();<span class="comment">//中止信号,结束IIC通信</span></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DA_Write</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Data)</span></span><br><span class="line">{</span><br><span class="line">    IIC_Start();<span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0x90</span>);<span class="comment">//主机发送寻址信号, 确认PCF8591，写模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_SendByte(<span class="number">0x41</span>); <span class="comment">//主机发送一个字节(要操作数据的地址),对应DA转换的通道</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_SendByte(Data); <span class="comment">//主机送出DA输出的数据字节</span></span><br><span class="line">    IIC_WaitAck(); <span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_Stop(); <span class="comment">//中止信号,结束IIC通信</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="基于iic的at24c02epprom储存器"><a class="markdownIt-Anchor" href="#基于iic的at24c02epprom储存器"></a> 基于IIC的AT24C02(EPPROM)储存器</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EEPROM_Write</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *EEPROM_String,<span class="type">unsigned</span> <span class="type">char</span> addr,<span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">{</span><br><span class="line">IIC_Start();<span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0xA0</span>);<span class="comment">//主机发送寻址信号，确认EEPROM芯片，写模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_SendByte(addr);<span class="comment">//发送一个要操作数据的地址字节,最好是八的倍数，如果不是8的倍数，将无法写入整页的字节</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(num--)<span class="comment">//循环发送数据字节,存入AT24C02</span></span><br><span class="line">    {</span><br><span class="line">        IIC_SendByte(*EEPROM_String++);<span class="comment">//发送数据字节,要存入AT24C02的数据,字节个数为num</span></span><br><span class="line">        IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">        IIC_Delay(<span class="number">200</span>);<span class="comment">//延时200ms,保证从机(AT24C02能够完整收到数据)</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    IIC_Stop();<span class="comment">//终止IIC通信</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EEPROM_Read</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *EEPROM_String,<span class="type">unsigned</span> <span class="type">char</span> addr,<span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">{</span><br><span class="line">    IIC_Start();<span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0xA0</span>);<span class="comment">//主机发送寻址信号，确认EEPROM芯片，写模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line">    IIC_SendByte(addr);<span class="comment">//发送一个要操作数据的地址字节</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答  </span></span><br><span class="line"></span><br><span class="line">    IIC_Start();<span class="comment">//主机发送开始信号</span></span><br><span class="line">    IIC_SendByte(<span class="number">0xA1</span>);<span class="comment">//主机发送寻址信号，确认EEPROM芯片，读模式</span></span><br><span class="line">    IIC_WaitAck();<span class="comment">//主机等待应答</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(num--)<span class="comment">//循环接收数据字节,存入EEPROM_String指向的地址</span></span><br><span class="line">    {</span><br><span class="line">        *EEPROM_String++=IIC_RecByte();<span class="comment">//指针移位读取数据到对应的地址中</span></span><br><span class="line">        <span class="keyword">if</span>(num)<span class="comment">//判断是否读取完数据</span></span><br><span class="line">        {</span><br><span class="line">            IIC_SendAck(<span class="number">0</span>);<span class="comment">//发送应答0,表示继续接收数据</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        {</span><br><span class="line">            IIC_SendAck(<span class="number">1</span>);<span class="comment">//发送应答1,表示停止接收数据</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    IIC_Stop();<span class="comment">//终止IIC通信</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="二-onewire模块"><a class="markdownIt-Anchor" href="#二-onewire模块"></a> 二、onewire模块</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"onewire.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"reg52.h"</span></span></span><br><span class="line"></span><br><span class="line">sbit DQ = P1^<span class="number">4</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//单总线内部延时函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_OneWire</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> t)</span>  </span><br><span class="line">{</span><br><span class="line">t *= <span class="number">12</span>;</span><br><span class="line"><span class="keyword">while</span>(t--);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//单总线写操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_DS18B20</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> dat)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">DQ = <span class="number">0</span>;</span><br><span class="line">DQ = dat&amp;<span class="number">0x01</span>;</span><br><span class="line">Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">DQ = <span class="number">1</span>;</span><br><span class="line">dat &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//单总线读操作</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Read_DS18B20</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dat;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">DQ = <span class="number">0</span>;</span><br><span class="line">dat &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">DQ = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(DQ)</span><br><span class="line">{</span><br><span class="line">dat |= <span class="number">0x80</span>;</span><br><span class="line">}    </span><br><span class="line">Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dat;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//DS18B20初始化</span></span><br><span class="line">bit <span class="title function_">init_ds18b20</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">  bit initflag = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  DQ = <span class="number">1</span>;</span><br><span class="line">  Delay_OneWire(<span class="number">12</span>);</span><br><span class="line">  DQ = <span class="number">0</span>;</span><br><span class="line">  Delay_OneWire(<span class="number">80</span>);</span><br><span class="line">  DQ = <span class="number">1</span>;</span><br><span class="line">  Delay_OneWire(<span class="number">10</span>); </span><br><span class="line">    initflag = DQ;     </span><br><span class="line">  Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> initflag;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">rd_temperature</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> low,high;</span><br><span class="line">init_ds18b20();<span class="comment">//初始化ds18b20;</span></span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>);<span class="comment">//跳过ROM指令</span></span><br><span class="line">Write_DS18B20(<span class="number">0x44</span>);<span class="comment">//开始温度转换</span></span><br><span class="line"></span><br><span class="line">init_ds18b20();<span class="comment">//初始化ds18b20;</span></span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>);<span class="comment">//跳过ROM指令</span></span><br><span class="line">Write_DS18B20(<span class="number">0xBe</span>);<span class="comment">//开始温度读取</span></span><br><span class="line"></span><br><span class="line">low = Read_DS18B20();</span><br><span class="line">high = Read_DS18B20();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (high &lt;&lt; <span class="number">8</span> | low)/<span class="number">16.0</span>;<span class="comment">//二进制转十进制</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ds1302模块"><a class="markdownIt-Anchor" href="#ds1302模块"></a> #DS1302模块</h2><h3 id="ds1302时钟芯片底层"><a class="markdownIt-Anchor" href="#ds1302时钟芯片底层"></a> DS1302（时钟芯片）底层</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"ds1302.h"</span></span></span><br><span class="line">sbit SCK=P1^<span class="number">7</span>;</span><br><span class="line">sbit SDA=P2^<span class="number">3</span>;</span><br><span class="line">sbit RST = P1^<span class="number">3</span>;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Ds1302</span><span class="params">(<span class="type">unsigned</span>  <span class="type">char</span> temp)</span> </span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)     </span><br><span class="line">{ </span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">SDA=temp&amp;<span class="number">0x01</span>;</span><br><span class="line">temp&gt;&gt;=<span class="number">1</span>; </span><br><span class="line">SCK=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}   </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Ds1302_Byte</span><span class="params">( <span class="type">unsigned</span> <span class="type">char</span> address,<span class="type">unsigned</span> <span class="type">char</span> dat )</span>     </span><br><span class="line">{</span><br><span class="line"> RST=<span class="number">0</span>;_nop_();</span><br><span class="line"> SCK=<span class="number">0</span>;_nop_();</span><br><span class="line"> RST=<span class="number">1</span>; _nop_();  </span><br><span class="line"> Write_Ds1302(address);</span><br><span class="line"> Write_Ds1302(dat);</span><br><span class="line"> RST=<span class="number">0</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Read_Ds1302_Byte</span> <span class="params">( <span class="type">unsigned</span> <span class="type">char</span> address )</span></span><br><span class="line">{</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> i,temp=<span class="number">0x00</span>;</span><br><span class="line"> RST=<span class="number">0</span>;_nop_();</span><br><span class="line"> SCK=<span class="number">0</span>;_nop_();</span><br><span class="line"> RST=<span class="number">1</span>;_nop_();</span><br><span class="line"> Write_Ds1302(address);</span><br><span class="line"> <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) </span><br><span class="line"> {</span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">temp&gt;&gt;=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(SDA)</span><br><span class="line"> temp|=<span class="number">0x80</span>;</span><br><span class="line"> SCK=<span class="number">1</span>;</span><br><span class="line">} </span><br><span class="line"> RST=<span class="number">0</span>;_nop_();</span><br><span class="line"> SCK=<span class="number">0</span>;_nop_();</span><br><span class="line">SCK=<span class="number">1</span>;_nop_();</span><br><span class="line">SDA=<span class="number">0</span>;_nop_();</span><br><span class="line">SDA=<span class="number">1</span>;_nop_();</span><br><span class="line"><span class="keyword">return</span> (temp);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="基于底层的时序编写"><a class="markdownIt-Anchor" href="#基于底层的时序编写"></a> 基于底层的时序编写</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Set_Rtc</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* ucRtc)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>,<span class="number">0x00</span>);<span class="comment">//关闭写保护</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x84</span>-i*<span class="number">2</span>,ucRtc[i]);<span class="comment">//给ds1302写入数据,0x84时 0x82分 0x80秒</span></span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>,<span class="number">0x80</span>);<span class="comment">//打开写保护</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Read_Rtc</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* ucRtc)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">ucRtc[i] = Read_Ds1302_Byte(<span class="number">0x85</span>-i*<span class="number">2</span>);<span class="comment">//读取ds1302的数据</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Set_Date</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* ucDate)</span></span><br><span class="line">{</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>,<span class="number">0x00</span>);<span class="comment">//关闭写保护</span></span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8c</span>,ucDate[<span class="number">0</span>]);</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x88</span>,ucDate[<span class="number">1</span>]);</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x86</span>,ucDate[<span class="number">2</span>]);</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>,<span class="number">0x80</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Read_Date</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* ucDate)</span></span><br><span class="line">{</span><br><span class="line">ucDate[<span class="number">0</span>] = Read_Ds1302_Byte(<span class="number">0x8d</span>);</span><br><span class="line">ucDate[<span class="number">1</span>] = Read_Ds1302_Byte(<span class="number">0x89</span>);</span><br><span class="line">ucDate[<span class="number">2</span>] = Read_Ds1302_Byte(<span class="number">0x87</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li><p><strong>程序模板使用到的模块：</strong></p><ul><li>系统初始化、按键、数码管、LED（继电器、蜂鸣器）</li><li>串口(定时器2)、超声波(PCA)，NE555(定时器0（计数器模式))，定时器1</li><li>IIC（AD/DA转换、AT24C02存储器）、OneWire（ds18b20温度读取）</li><li>DS1302时钟芯片</li></ul></li><li><p><strong>单片机程序设计，模块化，可读性强，执行效率高，占用储存空间小，以及契合硬件电路底层原理是最重要的思路</strong></p></li><li><p><strong>后续设计功能更复杂，更强的单片机/嵌入式系统时，就要拓展相关的知识面，进一步提升对单片机/各种芯片/电路的认识。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> 51单片机 </category>
          
          <category> 蓝桥杯 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> C语言 </tag>
            
            <tag> STC15 </tag>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【微机原理】[1] 文件寄存器RAM</title>
      <link href="/posts/52613/"/>
      <url>/posts/52613/</url>
      
        <content type="html"><![CDATA[<h2 id="课堂记录"><a class="markdownIt-Anchor" href="#课堂记录"></a> 课堂记录</h2><img src="/posts/52613/image-20240229103029035.png" class="" title="image-20240229103029035"><h2 id="配置位"><a class="markdownIt-Anchor" href="#配置位"></a> 配置位</h2><img src="/posts/52613/image-20240229205150184.png" class="" title="image-20240229205150184">]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> PIC单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> PIC单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【stm32单片机】[4]定时器中断</title>
      <link href="/posts/57601/"/>
      <url>/posts/57601/</url>
      
        <content type="html"><![CDATA[<ul><li><p>打开RCC内部时钟</p></li><li><p>选择时基单元时钟源</p></li><li><p>配置时基单元</p></li><li><p>配置输出中断控制，允许更新中断输出到NVIC</p></li><li><p>配置NVIC，打开定时器通道，并分配一个优先级</p></li><li><p>运行控制</p></li></ul><h1 id="相关函数"><a class="markdownIt-Anchor" href="#相关函数"></a> 相关函数</h1><blockquote><ul><li>恢复缺省配置</li></ul><p>TIM_DeInit(TIM_TypeDef* TIMx);</p><ul><li>时基单元初始化</li></ul><p>TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);</p><blockquote><p>TIMx：选择定时器</p><p>TIM_TimeBaseInitStruct：结构体，定时器有关的配置</p></blockquote><ul><li>结构体初始化</li></ul><p>TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);</p><ul><li>使能计数器，对应<mark>运行控制</mark></li></ul><p>TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState);</p><ul><li>中断输出使能控制</li></ul><p>TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState); 使能中断输出</p><blockquote><p>uint16_t TIM 选择中断输出</p><p>NewState：使能状态</p></blockquote><p><strong>时基单元的时钟选择部分函数：</strong></p><ul><li>选择内部时钟</li></ul><p>void TIM_InternalClockConfig(TIM_TypeDef* TIMx);</p><ul><li>选择ITRX其他定时器的时钟</li></ul><p>void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);</p><blockquote><p>TIMx 选择要配置的寄存器</p><p>TIM_InputTriggerSource 选择接入的寄存器</p></blockquote><ul><li>选择TIX捕获通道的时钟</li></ul><p>void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,uint16_t TIM_ICPolarity, uint16_t ICFilter);</p><blockquote><p>TIM_TIxExternalCLKSource,uint16_t  选择TIX具体的引脚</p><p>TIM_ICPolarity 输入的极性</p><p>ICFilter 滤波器</p></blockquote><ul><li>选择ETR通过外部时钟模式1输入的时钟</li></ul><p>void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,  uint16_t ExtTRGFilter);</p><blockquote><p>TIM_ExtTRGPrescaler 可以对ETR外部时钟再次分频</p><p>ExtTRGPolarity/ExtTRGFilter 极性/滤波器</p></blockquote><ul><li>选择ETR通过外部时钟模式1输入的时钟</li></ul><p>void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter);</p><blockquote><p>同TIM_ETRClockMode1Config(</p></blockquote><ul><li>单独配置ETR引脚的预分频器、极性、滤波器这些参数</li></ul><p>void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,<br>uint16_t ExtTRGFilter);</p></blockquote><p><strong>初始化后，像自动重装值和预分频值等等，可能需要修改，有一些函数可以单独修改这些参数</strong></p><blockquote><ul><li>单独修改预分频值</li></ul><p>void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode);</p><blockquote><p>uint16_t Prescaler 要写入的预分频值</p><p>PSCReloadMode 写入的模式</p></blockquote><ul><li>改变计数器的计数模式</li></ul><p>void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode);</p><blockquote><p>TIM_CounterMode 计数器的计数模式</p></blockquote><ul><li>自动重装器<mark>预装功能</mark>配置</li></ul><p>void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState);</p><blockquote><p>NewState 使能状态</p></blockquote><ul><li>给计数器写入一个值</li></ul><p>void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter);</p><ul><li>给自动重装器写入一个值</li></ul><p>void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload);</p><ul><li>获取当前计数器的值</li></ul><p>uint16_t TIM_GetCounter(TIM_TypeDef* TIMx);</p><ul><li>获取当前预分频器的值</li></ul><p>uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx);</p><ul><li>获取/清除标志位相关函数</li></ul><p>FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);<br>void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);<br>ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);<br>void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);</p></blockquote><h2 id="编写定时器初始化框架"><a class="markdownIt-Anchor" href="#编写定时器初始化框架"></a> 编写定时器初始化框架</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);<span class="comment">//开启TIM2时钟</span></span><br><span class="line"></span><br><span class="line">TIM_InternalClockConfig(TIM2);<span class="comment">//定时器上电后默认使用内部时钟,此语句也可以不写</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="滤波原理"><a class="markdownIt-Anchor" href="#滤波原理"></a> 滤波原理</h2><img src="/posts/57601/image-20240229000125982.png" class="" title="image-20240229000125982"><ul><li><p>在一个固定的时钟频率f下进行采样，如果连续N个采样点都是相同的电平，说明信号稳定，如果N个采样点抖动，就让输出保持不变，这样就能保证输出信号在一定程度上被滤波保护。</p></li><li><p>采样点数越多，滤波效果越好，但是同时信号延迟越大</p></li><li><p>采样频率的来源？</p><ul><li>由内部时钟直接而来</li><li>也可是内部时钟+一个时钟分频而来</li></ul></li></ul><p><strong>TIM_Clock_Division_CKD的取值</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define TIM_CKD_DIV1                       ((uint16_t)0x0000)//1分频</span><br><span class="line">#define TIM_CKD_DIV2                       ((uint16_t)0x0100)</span><br><span class="line">#define TIM_CKD_DIV4                       ((uint16_t)0x0200)</span><br></pre></td></tr></tbody></table></figure><h2 id="代码部分"><a class="markdownIt-Anchor" href="#代码部分"></a> 代码部分</h2><h3 id="一-定时器中断内部时钟"><a class="markdownIt-Anchor" href="#一-定时器中断内部时钟"></a> 一、定时器中断（内部时钟）</h3><p><strong>定时器底层程序</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stm32f10x.h"</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);<span class="comment">//开启TIM2时钟</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*时基单元初始化配置*/</span></span><br><span class="line">TIM_InternalClockConfig(TIM2);<span class="comment">//定时器上电后默认使用内部时钟,此语句也可以不写</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision =  TIM_CKD_DIV1 ;<span class="comment">//1分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//向上计数</span></span><br><span class="line"><span class="comment">/*时基单元关键寄存器*/</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler= <span class="number">7200</span> - <span class="number">1</span>;<span class="comment">//ARR ， 对72MHZ进行7200分频 也就是10MHZ</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period= <span class="number">10000</span> - <span class="number">1</span>;<span class="comment">//PSC，计数器重装载值，10000次清零,控制ARR和PSC可以控制计数频率</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter=<span class="number">0</span>;<span class="comment">//重复计数器，高级定时器钟存在，这里不需要用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);<span class="comment">//时基单元初始化</span></span><br><span class="line"><span class="comment">//1--&gt;注意：更新中断和更新事件同时发生，初始化会立刻进入中断</span></span><br><span class="line">TIM_ClearFlag(TIM2,TIM_FLAG_Update);<span class="comment">//2--&gt;手动清理中断标志位</span></span><br><span class="line"></span><br><span class="line">TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);<span class="comment">//中断配置，选择更新中断,使能</span></span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel= TIM2_IRQn;<span class="comment">//定时器通道设置，选择TIM2_IRQn</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd= ENABLE;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">2</span>;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//定时器初始化</span></span><br><span class="line"></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);<span class="comment">//启动定时器</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断服务程序模板</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void TIM2_IRQHandler(void)</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">if (TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)//获取中断标志位，参数：定时器2，检测更新标志位</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">TIM_ClearITPendingBit(TIM2,TIM_IT_Update);//清除标志位</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p><strong>主程序</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;OLED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CountSensor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Encoder.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Timer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> Num;<span class="comment">//定义一个16位的全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">OLED_Init();</span><br><span class="line">Timer_Init();</span><br><span class="line"></span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"Num:"</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"CNT:"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">OLED_ShowNum(<span class="number">1</span>,<span class="number">5</span>,Num,<span class="number">5</span>);<span class="comment">//计时的值</span></span><br><span class="line">OLED_ShowNum(<span class="number">2</span>,<span class="number">5</span>,TIM_GetCounter(TIM2),<span class="number">5</span>);<span class="comment">//CNT计数器的值</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)<span class="comment">//获取中断标志位，参数：定时器2，检测更新标志位</span></span><br><span class="line">{</span><br><span class="line">Num++;</span><br><span class="line">TIM_ClearITPendingBit(TIM2,TIM_IT_Update);<span class="comment">//清除标志位</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="二-外部时钟"><a class="markdownIt-Anchor" href="#二-外部时钟"></a> 二、外部时钟</h3><p><strong>定时器底层程序</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stm32f10x.h"</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);<span class="comment">//开启TIM2时钟</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);<span class="comment">//开启GPIOA时钟</span></span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU;<span class="comment">//上拉输入模式</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin=GPIO_Pin_0;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//TIM_InternalClockConfig(TIM2);//定时器上电后默认使用内部时钟,此语句也可以不写</span></span><br><span class="line">TIM_ETRClockMode2Config(TIM2,TIM_ExtTRGPSC_OFF,TIM_ExtTRGPolarity_NonInverted,<span class="number">0x00</span>);<span class="comment">//通过ETR引脚的外部时钟模式2配置</span></span><br><span class="line"><span class="comment">//定时器选择    不需要分频    外部触发的极性：不反相     外部触发滤波器,决定F和N，这里不需要滤波器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*时基单元初始化配置*/</span></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision =  TIM_CKD_DIV1 ;<span class="comment">//1分频</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//向上计数</span></span><br><span class="line"><span class="comment">/**时基单元关键寄存器**/</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler= <span class="number">1</span> - <span class="number">1</span>;<span class="comment">//ARR ， 对72MHZ进行7200分频 也就是10MHZ</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period= <span class="number">10</span> - <span class="number">1</span>;<span class="comment">//PSC，计数器重装载值，10000次清零,控制ARR和PSC可以控制计数频率</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter=<span class="number">0</span>;<span class="comment">//重复计数器，高级定时器钟存在，这里不需要用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);<span class="comment">//时基单元初始化</span></span><br><span class="line"><span class="comment">//1--&gt;注意：更新中断和更新事件同时发生，初始化会立刻进入中断</span></span><br><span class="line">TIM_ClearFlag(TIM2,TIM_FLAG_Update);<span class="comment">//2--&gt;手动清理中断标志位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*中断配置*/</span></span><br><span class="line">TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);<span class="comment">//中断配置，选择更新中断,使能</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*NVIC配置*/</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel= TIM2_IRQn;<span class="comment">//定时器通道设置，选择TIM2_IRQn</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd= ENABLE;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">2</span>;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//NVIC初始化</span></span><br><span class="line"></span><br><span class="line">TIM_Cmd(TIM2,ENABLE);<span class="comment">//启动定时器</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//CNT值封装函数</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">Timer_GetCounter</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> TIM_GetCounter(TIM2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void TIM2_IRQHandler(void)</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">if (TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)//获取中断标志位，参数：定时器2，检测更新标志位</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">TIM_ClearITPendingBit(TIM2,TIM_IT_Update);//清除标志位</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p><strong>主程序</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;OLED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CountSensor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Encoder.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Timer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> Num=<span class="number">0</span>;<span class="comment">//定义一个16位的全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">OLED_Init();</span><br><span class="line">Timer_Init();</span><br><span class="line"></span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"Num:"</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"CNT:"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">OLED_ShowNum(<span class="number">1</span>,<span class="number">5</span>,Num,<span class="number">5</span>);<span class="comment">//计时的值</span></span><br><span class="line">OLED_ShowNum(<span class="number">2</span>,<span class="number">5</span>,Timer_GetCounter(),<span class="number">5</span>);<span class="comment">//CNT计数器的值</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)<span class="comment">//获取中断标志位，参数：定时器2，检测更新标志位</span></span><br><span class="line">{</span><br><span class="line">Num++;</span><br><span class="line">TIM_ClearITPendingBit(TIM2,TIM_IT_Update);<span class="comment">//清除标志位</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><mark><strong>什么时候可以使用浮空输入？</strong></mark></p><p>如果外部输入的信号功率很小时，内部的上拉电阻可能影响到外部输入信号，这时候就使用浮空输入模式，防止影响外部输入电平。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> stm32单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> stm32单片机 </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【stm32单片机】[3]EXTI外部中断</title>
      <link href="/posts/44123/"/>
      <url>/posts/44123/</url>
      
        <content type="html"><![CDATA[<h1 id="stm32的中断结构"><a class="markdownIt-Anchor" href="#stm32的中断结构"></a> stm32的中断结构</h1><img src="/posts/44123/image-20240228002139630.png" class="" title="image-20240228002139630"><h2 id="nvic"><a class="markdownIt-Anchor" href="#nvic"></a> NVIC</h2><p><a href="https://blog.csdn.net/liuqi3256797/article/details/89891621">STM32中的NVIC详解_stm32 nvic-CSDN博客</a></p><h2 id="exti"><a class="markdownIt-Anchor" href="#exti"></a> EXTI</h2><img src="/posts/44123/image-20240228002339511.png" class="" title="image-20240228002339511"><img src="/posts/44123/image-20240228002507136.png" class="" title="image-20240228002507136"><h2 id="一-对射式红外传感器计次"><a class="markdownIt-Anchor" href="#一-对射式红外传感器计次"></a> 一、对射式红外传感器计次</h2><h3 id="红外传感器底层程序"><a class="markdownIt-Anchor" href="#红外传感器底层程序"></a> 红外传感器底层程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stm32f10x.h"</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> CountSensor_Count;<span class="comment">//全局变量，用于计数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 函    数：计数传感器初始化</span></span><br><span class="line"><span class="comment">  * 参    数：无</span></span><br><span class="line"><span class="comment">  * 返 回 值：无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CountSensor_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/*外部中断的定义*/</span></span><br><span class="line"><span class="comment">/*开启时钟*/</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<span class="comment">//开启GPIOB的时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);<span class="comment">//开启AFIO的时钟，外部中断必须开启AFIO的时钟</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*GPIO初始化*/</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);<span class="comment">//将PB14引脚初始化为上拉输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*AFIO选择中断引脚*/</span></span><br><span class="line">GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource14);<span class="comment">//将外部中断的14号线映射到GPIOB，即选择PB14为外部中断引脚</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*EXTI初始化*/</span></span><br><span class="line">EXTI_InitTypeDef EXTI_InitStructure;<span class="comment">//定义结构体变量</span></span><br><span class="line">EXTI_InitStructure.EXTI_Line = EXTI_Line14;<span class="comment">//选择配置外部中断的14号线</span></span><br><span class="line">EXTI_InitStructure.EXTI_LineCmd = ENABLE;<span class="comment">//指定外部中断线使能</span></span><br><span class="line">EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;<span class="comment">//指定外部中断线为中断模式</span></span><br><span class="line">EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;<span class="comment">//指定外部中断线为下降沿触发</span></span><br><span class="line">EXTI_Init(&amp;EXTI_InitStructure);<span class="comment">//将结构体变量交给EXTI_Init，配置EXTI外设</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*NVIC中断分组*/</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//配置NVIC为分组2</span></span><br><span class="line"><span class="comment">//即抢占优先级范围：0~3，响应优先级范围：0~3</span></span><br><span class="line"><span class="comment">//此分组配置在整个工程中仅需调用一次</span></span><br><span class="line"><span class="comment">//若有多个中断，可以把此代码放在main函数内，while循环之前</span></span><br><span class="line"><span class="comment">//若调用多次配置分组的代码，则后执行的配置会覆盖先执行的配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*NVIC配置*/</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;<span class="comment">//定义结构体变量</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;<span class="comment">//选择配置NVIC的EXTI15_10线</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//指定NVIC线路使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;<span class="comment">//指定NVIC线路的抢占优先级为1</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;<span class="comment">//指定NVIC线路的响应优先级为1</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//将结构体变量交给NVIC_Init，配置NVIC外设</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 函    数：获取计数传感器的计数值</span></span><br><span class="line"><span class="comment">  * 参    数：无</span></span><br><span class="line"><span class="comment">  * 返 回 值：计数值，范围：0~65535</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">CountSensor_Get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> CountSensor_Count;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 函    数：EXTI15_10外部中断函数</span></span><br><span class="line"><span class="comment">  * 参    数：无</span></span><br><span class="line"><span class="comment">  * 返 回 值：无</span></span><br><span class="line"><span class="comment">  * 注意事项：此函数为中断函数，无需调用，中断触发后自动执行</span></span><br><span class="line"><span class="comment">  *           函数名为预留的指定名称，可以从启动文件复制</span></span><br><span class="line"><span class="comment">  *           请确保函数名正确，不能有任何差异，否则中断函数将不能进入</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//每次进入中断服务程序，中断标志位都会置1</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (EXTI_GetITStatus(EXTI_Line14) == SET)<span class="comment">//判断是否是外部中断14号线触发的中断</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/*如果出现数据乱跳的现象，可再次判断引脚电平，以避免抖动*/</span></span><br><span class="line"><span class="keyword">if</span> (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_14) == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">CountSensor_Count ++;<span class="comment">//计数值自增一次</span></span><br><span class="line">}</span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line14);<span class="comment">//清除外部中断14号线的中断标志位</span></span><br><span class="line"><span class="comment">//中断标志位必须清除</span></span><br><span class="line"><span class="comment">//否则中断将连续不断地触发，导致主程序卡死</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="主程序"><a class="markdownIt-Anchor" href="#主程序"></a> 主程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;OLED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CountSensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">OLED_Init();</span><br><span class="line">OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"Count:"</span>);</span><br><span class="line">CountSensor_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">OLED_ShowNum(<span class="number">1</span>,<span class="number">7</span>,CountSensor_Get(),<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="二-旋转编码器"><a class="markdownIt-Anchor" href="#二-旋转编码器"></a> 二、旋转编码器</h2><h3 id="底层程序"><a class="markdownIt-Anchor" href="#底层程序"></a> 底层程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stm32f10x.h"</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> CountSensor_Count;<span class="comment">//全局变量，用于计数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 函    数：计数传感器初始化</span></span><br><span class="line"><span class="comment">  * 参    数：无</span></span><br><span class="line"><span class="comment">  * 返 回 值：无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CountSensor_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/*外部中断的定义*/</span></span><br><span class="line"><span class="comment">/*开启时钟*/</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<span class="comment">//开启GPIOB的时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);<span class="comment">//开启AFIO的时钟，外部中断必须开启AFIO的时钟</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*GPIO初始化*/</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);<span class="comment">//将PB14引脚初始化为上拉输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*AFIO选择中断引脚*/</span></span><br><span class="line">GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource14);<span class="comment">//将外部中断的14号线映射到GPIOB，即选择PB14为外部中断引脚</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*EXTI初始化*/</span></span><br><span class="line">EXTI_InitTypeDef EXTI_InitStructure;<span class="comment">//定义结构体变量</span></span><br><span class="line">EXTI_InitStructure.EXTI_Line = EXTI_Line14;<span class="comment">//选择配置外部中断的14号线</span></span><br><span class="line">EXTI_InitStructure.EXTI_LineCmd = ENABLE;<span class="comment">//指定外部中断线使能</span></span><br><span class="line">EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;<span class="comment">//指定外部中断线为中断模式</span></span><br><span class="line">EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;<span class="comment">//指定外部中断线为下降沿触发</span></span><br><span class="line">EXTI_Init(&amp;EXTI_InitStructure);<span class="comment">//将结构体变量交给EXTI_Init，配置EXTI外设</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*NVIC中断分组*/</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//配置NVIC为分组2</span></span><br><span class="line"><span class="comment">//即抢占优先级范围：0~3，响应优先级范围：0~3</span></span><br><span class="line"><span class="comment">//此分组配置在整个工程中仅需调用一次</span></span><br><span class="line"><span class="comment">//若有多个中断，可以把此代码放在main函数内，while循环之前</span></span><br><span class="line"><span class="comment">//若调用多次配置分组的代码，则后执行的配置会覆盖先执行的配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*NVIC配置*/</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;<span class="comment">//定义结构体变量</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;<span class="comment">//选择配置NVIC的EXTI15_10线</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//指定NVIC线路使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;<span class="comment">//指定NVIC线路的抢占优先级为1</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;<span class="comment">//指定NVIC线路的响应优先级为1</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//将结构体变量交给NVIC_Init，配置NVIC外设</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 函    数：获取计数传感器的计数值</span></span><br><span class="line"><span class="comment">  * 参    数：无</span></span><br><span class="line"><span class="comment">  * 返 回 值：计数值，范围：0~65535</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">CountSensor_Get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> CountSensor_Count;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 函    数：EXTI15_10外部中断函数</span></span><br><span class="line"><span class="comment">  * 参    数：无</span></span><br><span class="line"><span class="comment">  * 返 回 值：无</span></span><br><span class="line"><span class="comment">  * 注意事项：此函数为中断函数，无需调用，中断触发后自动执行</span></span><br><span class="line"><span class="comment">  *           函数名为预留的指定名称，可以从启动文件复制</span></span><br><span class="line"><span class="comment">  *           请确保函数名正确，不能有任何差异，否则中断函数将不能进入</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//每次进入中断服务程序，中断标志位都会置1</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (EXTI_GetITStatus(EXTI_Line14) == SET)<span class="comment">//判断是否是外部中断14号线触发的中断</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/*如果出现数据乱跳的现象，可再次判断引脚电平，以避免抖动*/</span></span><br><span class="line"><span class="keyword">if</span> (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_14) == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">CountSensor_Count ++;<span class="comment">//计数值自增一次</span></span><br><span class="line">}</span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line14);<span class="comment">//清除外部中断14号线的中断标志位</span></span><br><span class="line"><span class="comment">//中断标志位必须清除</span></span><br><span class="line"><span class="comment">//否则中断将连续不断地触发，导致主程序卡死</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="主程序-2"><a class="markdownIt-Anchor" href="#主程序-2"></a> 主程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;OLED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CountSensor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Encoder.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">OLED_Init();</span><br><span class="line">Encoder_Init();</span><br><span class="line">OLED_ShowString(<span class="number">1</span>, <span class="number">1</span>, <span class="string">"Encoder_Count:"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">n += Encoder_Get_Change_value();</span><br><span class="line">OLED_ShowSignedNum(<span class="number">2</span>, <span class="number">1</span>, n, <span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> stm32单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> stm32单片机 </tag>
            
            <tag> 外部中断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【stm32单片机】[2]stm32GPIO输出</title>
      <link href="/posts/56552/"/>
      <url>/posts/56552/</url>
      
        <content type="html"><![CDATA[<h1 id="gpio输入"><a class="markdownIt-Anchor" href="#gpio输入"></a> GPIO输入</h1><h2 id="一-led闪烁"><a class="markdownIt-Anchor" href="#一-led闪烁"></a> 一、LED闪烁</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Delay.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);<span class="comment">//配置GPIOA外部时钟</span></span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;<span class="comment">//一般输出用推挽输出模式</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin=GPIO_Pin_0  ;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//四个基本的输出电平设置函数</span></span><br><span class="line"><span class="comment">//GPIO_SetBits(GPIOA,GPIO_Pin_0);//LED灭</span></span><br><span class="line"><span class="comment">//GPIO_ResetBits(GPIOA,GPIO_Pin_0);//LED亮</span></span><br><span class="line"><span class="comment">//GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_RESET);//LED亮</span></span><br><span class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_SET);<span class="comment">//LED灭</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_RESET);</span><br><span class="line">Delay_ms(<span class="number">100</span>);</span><br><span class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_SET);</span><br><span class="line">Delay_ms(<span class="number">100</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="二-led流水灯"><a class="markdownIt-Anchor" href="#二-led流水灯"></a> 二、LED流水灯</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;<span class="comment">//一般输出用推挽输出模式</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin=GPIO_Pin_All;<span class="comment">//可以用按位或的方式同时初始化多个引脚</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">GPIO_Write(GPIOA,~(<span class="number">0x0001</span>&lt;&lt;i)); <span class="comment">//0000 0000 0000 0001</span></span><br><span class="line">Delay_ms(<span class="number">20</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="三-蜂鸣器"><a class="markdownIt-Anchor" href="#三-蜂鸣器"></a> 三、蜂鸣器</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Delay.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;<span class="comment">//一般输出用推挽输出模式</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin=GPIO_Pin_12;<span class="comment">//可以用按位或的方式同时初始化多个引脚</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB,&amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">GPIO_ResetBits(GPIOB,GPIO_Pin_12);</span><br><span class="line">Delay_ms(<span class="number">50</span>);</span><br><span class="line">GPIO_SetBits(GPIOB,GPIO_Pin_12);</span><br><span class="line">Delay_ms(<span class="number">50</span>);</span><br><span class="line">GPIO_ResetBits(GPIOB,GPIO_Pin_12);</span><br><span class="line">Delay_ms(<span class="number">50</span>);</span><br><span class="line">GPIO_SetBits(GPIOB,GPIO_Pin_12);</span><br><span class="line">Delay_ms(<span class="number">700</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="gpio常用函数"><a class="markdownIt-Anchor" href="#gpio常用函数"></a> GPIO常用函数</h1><ul><li>typedef struct//typedef为成员列表提供了一个GPIO_InitTypeDef的名字{}GPIO_InitTypeDef;c</li><li>GPIO_ResetBits(GPIOA,GPIO_Pin_0);<strong>将GPIOA_0设置为低电平</strong></li><li>GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_RESET);<strong>将GPIOA_0<mark>选择</mark>为高电平</strong></li></ul><img src="/posts/56552/image-20240228000033935.png" class="" title="image-20240228000033935"><ul><li>GPIO_DeInit(*GPIO_InitTypeDef,GPIOX) <strong>初始化指定的GPIO的时钟</strong></li></ul><h1 id="gpio输出"><a class="markdownIt-Anchor" href="#gpio输出"></a> GPIO输出</h1><h2 id="一-按键控制led"><a class="markdownIt-Anchor" href="#一-按键控制led"></a> 一、按键控制LED</h2><h3 id="led底层代码"><a class="markdownIt-Anchor" href="#led底层代码"></a> LED底层代码</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief </span></span><br><span class="line"><span class="comment">  * @param  </span></span><br><span class="line"><span class="comment">  * @retval </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure; <span class="comment">//结构体类型(已经定义好的） 结构体变量名 -&gt;结构体变量的定义</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin=GPIO_Pin_All;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">GPIO_SetBits(GPIOA,GPIO_Pin_All);<span class="comment">//初始化默认低电平输出，所以要置高电平</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief </span></span><br><span class="line"><span class="comment">  * @param  </span></span><br><span class="line"><span class="comment">  * @retval </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_ON</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">GPIO_ResetBits(GPIOA,GPIO_Pin_1);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief </span></span><br><span class="line"><span class="comment">  * @param  </span></span><br><span class="line"><span class="comment">  * @retval </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_OFF</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">GPIO_SetBits(GPIOA,GPIO_Pin_1);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief </span></span><br><span class="line"><span class="comment">  * @param  </span></span><br><span class="line"><span class="comment">  * @retval </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_ON</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">GPIO_ResetBits(GPIOA,GPIO_Pin_2);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief </span></span><br><span class="line"><span class="comment">  * @param  </span></span><br><span class="line"><span class="comment">  * @retval </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_OFF</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">GPIO_SetBits(GPIOA,GPIO_Pin_2);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief </span></span><br><span class="line"><span class="comment">  * @param  </span></span><br><span class="line"><span class="comment">  * @retval </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED1_Turn</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_1)==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">GPIO_SetBits(GPIOA,GPIO_Pin_1);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">GPIO_ResetBits(GPIOA,GPIO_Pin_1);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief </span></span><br><span class="line"><span class="comment">  * @param  </span></span><br><span class="line"><span class="comment">  * @retval </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED2_Turn</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_2)==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">GPIO_SetBits(GPIOA,GPIO_Pin_2);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">GPIO_ResetBits(GPIOA,GPIO_Pin_2);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="二-按键底层代码"><a class="markdownIt-Anchor" href="#二-按键底层代码"></a> 二、按键底层代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stm32f10x.h"</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);<span class="comment">//GPIOB外部时钟配置</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure; <span class="comment">//结构体类型(已经定义好的） 结构体变量名 -&gt;结构体变量的定义</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;<span class="comment">//输入最大频率</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin=GPIO_Pin_1|GPIO_Pin_11;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU;<span class="comment">//上拉输入模式</span></span><br><span class="line">GPIO_Init(GPIOB,&amp;GPIO_InitStructure);<span class="comment">//引脚初始化</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Key_GetNum</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">//uint8_t相当于unsigned char </span></span><br><span class="line">{</span><br><span class="line"><span class="type">uint8_t</span> KeyNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_11)==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">Delay_ms(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_11)==<span class="number">0</span>);</span><br><span class="line">Delay_ms(<span class="number">20</span>);</span><br><span class="line">KeyNum= <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_1)==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">Delay_ms(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_1)==<span class="number">0</span>);</span><br><span class="line">Delay_ms(<span class="number">20</span>);</span><br><span class="line">KeyNum= <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> KeyNum;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="三-主程序"><a class="markdownIt-Anchor" href="#三-主程序"></a> 三、主程序</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Key.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> KeyNum;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*初始化，配置按键输入引脚/LED电平输出引脚*/</span></span><br><span class="line">LED_Init();</span><br><span class="line">Key_Init();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">KeyNum=Key_GetNum();</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">LED1_Turn();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">LED2_Turn();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> stm32单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> stm32单片机 </tag>
            
            <tag> GPIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【stm32单片机】[1] stm32工程创建</title>
      <link href="/posts/5499/"/>
      <url>/posts/5499/</url>
      
        <content type="html"><![CDATA[<h1 id="stm32点亮led"><a class="markdownIt-Anchor" href="#stm32点亮led"></a> stm32点亮LED</h1><h2 id="一-配置寄存器方式"><a class="markdownIt-Anchor" href="#一-配置寄存器方式"></a> 一、配置寄存器方式</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header </span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/*使用配置寄存器的方式进行点灯操作*/</span></span><br><span class="line">RCC-&gt;APB2ENR = <span class="number">0x00000010</span>;</span><br><span class="line">GPIOC-&gt;CRH = <span class="number">0x00300000</span>;</span><br><span class="line">GPIOC-&gt;ODR = <span class="number">0x00002000</span>; </span><br><span class="line"><span class="comment">//缺点：配置繁琐，操作多</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="二-库函数方式"><a class="markdownIt-Anchor" href="#二-库函数方式"></a> 二、库函数方式</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stm32f10x.h&gt;</span> <span class="comment">//Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/*使用库函数的方式进行点灯操作*/</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);<span class="comment">//配置GPIOC的外设时钟</span></span><br><span class="line"><span class="comment">//函数的本质还是配置寄存器，但是封装好了完整可靠的功能</span></span><br><span class="line"><span class="comment">//不会影响到寄存器的其他位，不需要手动计算寄存器</span></span><br><span class="line">    </span><br><span class="line">GPIO_InitTypeDef GPIO_InitSructure;<span class="comment">//定义结构体变量</span></span><br><span class="line">GPIO_InitSructure.GPIO_Mode = GPIO_Mode_Out_PP;<span class="comment">//选择推挽输出模式</span></span><br><span class="line">GPIO_InitSructure.GPIO_Pin = GPIO_Pin_13;<span class="comment">//选择13号引脚</span></span><br><span class="line">GPIO_InitSructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//GPIO最大频率50MHZ</span></span><br><span class="line">    </span><br><span class="line">GPIO_Init(GPIOC,&amp;GPIO_InitSructure);<span class="comment">//根据配置的结构体，各个成员变量的参数，初始化GPIO口</span></span><br><span class="line"><span class="comment">//GPIO_SetBits(GPIOC,GPIO_Pin_13);//设置PC13口为高电平</span></span><br><span class="line">GPIO_ResetBits(GPIOC,GPIO_Pin_13);<span class="comment">//设置PC13口为低电平</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>对GPIO_InitTypeDef GPIO_InitSructure的理解</p><p>转到GPIO_InitTypeDef的定义</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">uint16_t</span> GPIO_Pin;             <span class="comment">/*!&lt; Specifies the GPIO pins to be configured.</span></span><br><span class="line"><span class="comment">                                      This parameter can be any value of @ref GPIO_pins_define */</span></span><br><span class="line"></span><br><span class="line">  GPIOSpeed_TypeDef GPIO_Speed;  <span class="comment">/*!&lt; Specifies the speed for the selected pins.</span></span><br><span class="line"><span class="comment">                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */</span></span><br><span class="line"></span><br><span class="line">  GPIOMode_TypeDef GPIO_Mode;    <span class="comment">/*!&lt; Specifies the operating mode for the selected pins.</span></span><br><span class="line"><span class="comment">                                      This parameter can be a value of @ref GPIOMode_TypeDef */</span></span><br><span class="line">}GPIO_InitTypeDef;</span><br></pre></td></tr></tbody></table></figure><h3 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> #结构体</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">struct Stu//类</span><br><span class="line">{</span><br><span class="line">//成员变量</span><br><span class="line">struct B sb;//结构体的成员可以是另外的结构体</span><br><span class="line">char name[20];//名字</span><br><span class="line">int age;//年龄</span><br><span class="line">char id[20];</span><br><span class="line">} s1, s2;//s1和s2也是结构体变量</span><br><span class="line">//s1,s2是全局变量</span><br><span class="line">//结构体的调用</span><br><span class="line">int main1()</span><br><span class="line">{</span><br><span class="line">//s是局部变量</span><br><span class="line">struct Stu s = { {'w',20,3.14 }, "张三", 30, "20200534" };//对象</span><br><span class="line"></span><br><span class="line">printf("%c\n",s.sb.c);</span><br><span class="line">printf("%s\n", s.id);</span><br><span class="line"></span><br><span class="line">struct Stu* ps = &amp;s;//结构体指针</span><br><span class="line">printf("%c\n",(*ps).sb.c);</span><br><span class="line">printf("%c\n", ps-&gt;sb.c);//ps是指针可以用-&gt;操作符,sb是变量不是指针只能用.操作符</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>//<span class="title">typedef</span>为成员列表提供了一个<span class="title">GPIO_InitTypeDef</span>的名字</span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">}GPIO_InitTypeDef;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> stm32单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> stm32单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】[1]线性规划</title>
      <link href="/posts/32828/"/>
      <url>/posts/32828/</url>
      
        <content type="html"><![CDATA[<figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=[<span class="number">2</span>;<span class="number">3</span>;<span class="number">1</span>];</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>;<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>];</span><br><span class="line">b=[<span class="number">8</span>,<span class="number">6</span>];</span><br><span class="line">[x,frav]=linprog(c,-a,-b,[],[],<span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">1</span>))</span><br></pre></td></tr></tbody></table></figure><p><strong>zeros 的作用 ？</strong></p><blockquote><p>在这个问题中，<code>zeros(3,1)</code> 是用来设置线性规划问题的变量的下界为零的约束条件。</p></blockquote><ul><li><p>在 MATLAB 的 <code>linprog</code> 函数中，第五个参数是用来指定变量的下界约束条件的。在这个例子中，我们希望所有的变量都不能小于零，所以我们使用 <code>zeros(3,1)</code> 来创建一个全部元素为零的列向量作为下界约束条件。</p></li><li><p>这样设置下界约束条件后，线性规划求解器就会确保求解结果中的所有变量都大于等于零，符合我们的约束要求。</p></li><li><p>简而言之，<code>zeros(3,1)</code> 的作用是设置变量的<mark>下界为零</mark>，以满足线性规划问题的<mark>约束条件</mark>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学建模 </category>
          
          <category> Matlab </category>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【5G】网络架构03 5G网络组网部署</title>
      <link href="/posts/22754/"/>
      <url>/posts/22754/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 大唐杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大唐杯 </tag>
            
            <tag> 5G </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言入门学习】函数01</title>
      <link href="/posts/36172/"/>
      <url>/posts/36172/</url>
      
        <content type="html"><![CDATA[<h1 id="c语言入门学习函数的概念01"><a class="markdownIt-Anchor" href="#c语言入门学习函数的概念01"></a> 【C语言入门学习】函数的概念01</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> #前言</h2><p>数学中我们常见到函数的概念，函数是数学学习的核心思想，而计算机语言中的函数是编程的核心思想。</p><hr><h3 id="一-函数的定义"><a class="markdownIt-Anchor" href="#一-函数的定义"></a> 一、函数的定义：</h3><p>维基百科中对函数的定义：<a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F">子程序</a></p><ul><li>在计算机科学中，子程序（英语：Subroutine, procedure, function, routine, method,subprogram, callable unit），是一个大型程序中的某部分代码， 由一个或多个语句块组成。它负责完成某项特定任务，而且相较于其他代 码，具备相对的独立性。</li><li>一般会有输入参数并有返回值，提供对过程的封装和细节的隐藏。这些代码通常被集成为软件库。</li></ul><h3 id="二-函数的分类"><a class="markdownIt-Anchor" href="#二-函数的分类"></a> 二、函数的分类</h3><ul><li>库函数</li><li>自定义函数</li></ul><h4 id="为什么会有库函数"><a class="markdownIt-Anchor" href="#为什么会有库函数"></a> 为什么会有库函数？</h4><p>c语言的基础库中提供了一系列函数库，便于我们对一些经常使用的函数进行调用，<mark>避免重复造轮子</mark></p><h4 id="如何查找库函数"><a class="markdownIt-Anchor" href="#如何查找库函数"></a> 如何查找库函数？</h4><p>以下为常用的网站：<br><a href="https://cplusplus.com/reference/">cplusplus.com</a><br><a href="https://en.cppreference.com/w/">cppreference.com</a></p><ul><li>其中 <strong>cppreference</strong> 在edge上支持插件，在URL搜索框输入"cc"+"空格"即可实现快速查询函数的定义、使用方式、对应的封装库</li></ul><h4 id="常见的库函数"><a class="markdownIt-Anchor" href="#常见的库函数"></a> 常见的库函数</h4><ul><li>IO函数:如printf、scanf、</li><li>字符串操作函数：如strlen</li><li>字符操作函数</li><li>内存操作函数</li><li>时间/日期函数</li><li>数学函数</li><li>其他库函数</li></ul><p>示例：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main1</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//库函数的认识</span></span><br><span class="line"><span class="comment">//学习c语言过程中，遇到陌生函数，主动参考文档网站（学会使用工具搜索）</span></span><br><span class="line"><span class="type">char</span> arr1[<span class="number">20</span>] = { <span class="number">0</span> };</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(arr1, arr2);<span class="comment">//字符串拷贝</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr1);</span><br><span class="line"><span class="built_in">memset</span>(arr1, <span class="string">'x'</span>, <span class="number">5</span>);<span class="comment">//设置内存块</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//学习重点：自定义函数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总而言之，要使用库函数，必须通过#inlcude包含对应的头文件</strong></p><ul><li>include&lt;&gt;：程序语言的标准库头文件，指向的是语言安装的根目录</li><li>include" "：我们自己创建的头文件，指向的是工程的根目录</li></ul><h4 id="为什么要写自定义的函数"><a class="markdownIt-Anchor" href="#为什么要写自定义的函数"></a> 为什么要写自定义的函数？</h4><p>由我们程序员自由设计函数，能够更好地加深我们的代码编写思维，更加灵活地编写程序，使我们地代码具有更大地发挥空间。</p><p><strong>函数的组成：</strong></p><p><mark>函数返回值类型</mark> <mark>函数名</mark>(<mark>形参</mark>，<mark>形参</mark>）<br>{<br><mark>函数体</mark>；<br><mark>返回值</mark>（若需要）；<br>}</p><img src="/posts/36172/784deb65dd214e76b6c971f2d2b4c04f.png" class="" title="在这里插入图片描述"><img src="/posts/36172/17caff782a1e43d48382c0e1384c122b.png#pic_right=" class="" title="在这里插入图片描述"><p>头文件调用：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>示例1：找出两个数中的最大值</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y)</span><br><span class="line">z = x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">z = y;</span><br><span class="line"><span class="keyword">return</span> z;<span class="comment">//返回z</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>示例2：交换两个数的值</p><ul><li>Swap1</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Swap1</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> temp = x;<span class="comment">//temp = 0</span></span><br><span class="line">x = y;<span class="comment">// x = 1</span></span><br><span class="line">y = temp;<span class="comment">//y = 0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Swap2</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过指针，操作变量的值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap2</span><span class="params">(<span class="type">int</span>* pa, <span class="type">int</span>* pb)</span><span class="comment">//实际上，这里也创建了两个新的变量（形参），用于存放地址</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//将值，传递给对应地址的内存空间，成功改变了变量a,b的值</span></span><br><span class="line"><span class="type">int</span> temp = *pa;</span><br><span class="line">*pa = *pb;</span><br><span class="line">*pb = temp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>main函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//函数的调用</span></span><br><span class="line"><span class="type">int</span> max = get_max(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个函数 -交换两个整型变量的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"交换前：a=%d b=%d\n"</span>, a, b);</span><br><span class="line">Swap1(a, b);<span class="comment">//形参不影响实参，实际上Swap函数创建了另外地址，操纵的是完全不同的内存空间</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"交换后：a=%d b=%d\n"</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* pa = &amp;a;<span class="comment">//pa就是一个指针变量</span></span><br><span class="line">*pa = <span class="number">15</span>;<span class="comment">//通过pa，操纵指定地址的变量的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"交换前：a=%d b=%d\n"</span>, a, b);</span><br><span class="line">Swap2(&amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"交换后：a=%d b=%d\n"</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>示例1 运行结果</strong><br>&gt;&gt;20<br><em>正确</em><br><strong>示例2 运行结果1</strong><br>&gt;&gt;交换前：a=10 b=20<br>&gt;&gt;交换后：a=10 b=20<br><mark>未实现交换两个变量值的作用</mark></p><p><strong>分析：</strong></p><blockquote><p><strong>交换两个整型变量的值：void表示这个函数不返回任何值，也不需要返回<br>swap1在被调用的时候，实参传给形参，其实形参是实参的一份临时拷贝<br>改变形参，不能改变实参</strong></p></blockquote><p>ps:markdown也使用转义字符,实现特定符号的显示</p><p><strong>示例2 运行结果2</strong><br>&gt;&gt;15<br>&gt;&gt;交换前：a=15 b=20<br>&gt;&gt;交换后：a=20 b=15<br><mark>未实现交换两个变量值的作用</mark></p><blockquote><p><strong>通过指针，操作变量的值，实际上Swap2函数，定义了两个变量pa，pb用于存放地址，通过解引用直接操纵对应地址的内存空间，进而实现了对外部变量的改变</strong></p></blockquote><p>板书：</p><img src="/posts/36172/5ba991b9b5174ae489ff70b38066536d.png" class="" title="在这里插入图片描述"><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h2><ol><li>学会通过网站查询标准库</li><li><strong>形参不会改变实参，要通过函数实现对形参的改变，需要用到指针（地址），操纵指定的内存空间。</strong></li><li>学会自定义函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C语言 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言入门学习】[3]代码书写的规范</title>
      <link href="/posts/15339/"/>
      <url>/posts/15339/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>c语言代码书写规范：</strong></p><ul><li><strong>if语句，while语句等等，尽量要带上{}</strong></li><li><strong>判断语句如if(a==1)最好改写成if(1==a)，因为一但写成if(a=)形式，  编译也能通过，但会导致程序执行完全不同的结果。<br>如果写成if(1=a)，<mark>因为语法规定</mark>,只能将值赋给等号左边的变量，不然编译不通过，这样的话，能够对编写语句起到 <em>约束作用</em> 避免了 “程序能跑就行”的局面</strong></li></ul></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS 1</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main1()</span><br><span class="line">{</span><br><span class="line">int a = 0;</span><br><span class="line">printf("请输入：\n");</span><br><span class="line">scanf("%d", &amp;a);//不要加转义字符</span><br><span class="line">if (a % 2 == 1)</span><br><span class="line">{</span><br><span class="line">printf("为奇数\n");</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">{</span><br><span class="line">printf("为偶数\n");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int num = 0;</span><br><span class="line">for (num = 1; num &lt;= 100; num++)</span><br><span class="line">{</span><br><span class="line">if (num % 2 == 1)</span><br><span class="line">{</span><br><span class="line">printf("奇数：%d\n", num);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://blog.csdn.net/weixin_44967885/article/details/108994960">scanf中的\n问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C语言 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git学习】[1]入门命令</title>
      <link href="/posts/8948/"/>
      <url>/posts/8948/</url>
      
        <content type="html"><![CDATA[<h1 id="git学习01-入门命令"><a class="markdownIt-Anchor" href="#git学习01-入门命令"></a> 【Git学习】01-入门命令</h1><h3 id="2024110更新"><a class="markdownIt-Anchor" href="#2024110更新"></a> 2024.1.10更新</h3><h3 id="2024218更新"><a class="markdownIt-Anchor" href="#2024218更新"></a> 2024.2.18更新</h3><h2 id="git仓库的创建和文件提交"><a class="markdownIt-Anchor" href="#git仓库的创建和文件提交"></a> Git仓库的创建和文件提交：</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt; [directory] //克隆仓库</span><br><span class="line">git init//创建初始化仓库</span><br></pre></td></tr></tbody></table></figure><h1 id="将文件添加到缓存"><a class="markdownIt-Anchor" href="#将文件添加到缓存"></a> 将文件添加到缓存 :</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add . //将当前文件目录下所有文件移入暂存区`` </span><br></pre></td></tr></tbody></table></figure><h1 id="将缓存区内容添加到仓库中"><a class="markdownIt-Anchor" href="#将缓存区内容添加到仓库中"></a> 将缓存区内容添加到仓库中：</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"第一次版本提交"</span> //在后面加-m选项，以在命令行中提供提交注释</span><br><span class="line">git commit -am <span class="string">"第一次版本提交"</span>//跳过add这一步，可以直接使用 -a选项</span><br></pre></td></tr></tbody></table></figure><h1 id="git推送到远程仓库github"><a class="markdownIt-Anchor" href="#git推送到远程仓库github"></a> Git推送到远程仓库（github）</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [<span class="built_in">alias</span>] [url]//参数[<span class="built_in">alias</span>]为别名， [url]为远程仓库的地址</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Git </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言入门学习】[2]初识C语言 02</title>
      <link href="/posts/32291/"/>
      <url>/posts/32291/</url>
      
        <content type="html"><![CDATA[<h1 id="c语言入门学习2初识c语言-02"><a class="markdownIt-Anchor" href="#c语言入门学习2初识c语言-02"></a> 【C语言入门学习】[2]初识C语言 02</h1><h3 id="2024110更新"><a class="markdownIt-Anchor" href="#2024110更新"></a> 2024.1.10更新</h3><h4 id="常见操作符-关键字2"><a class="markdownIt-Anchor" href="#常见操作符-关键字2"></a> 常见操作符 关键字（2）</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.static 修饰局部变量</span></span><br><span class="line"><span class="comment">//2.static 修饰全局变量</span></span><br><span class="line"><span class="comment">//3.static 修饰函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_val;<span class="comment">//声明外部变量</span></span><br><span class="line"><span class="comment">//static int g_val = 100;  //static 修饰全局变量使得全局变量只能在自己所在的源文件内部使用</span></span><br><span class="line"><span class="comment">//extern int g_val;报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量，在其他源文件内部可以被使用，是因为全局变量具有外部链接属性</span></span><br><span class="line"><span class="comment">//但是被static修饰之后，就变成了内部链接属性，其他源文件就不能链接到这个静态的全局变量了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static int Add(int x, int y)</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="comment">//return x + y;</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"><span class="comment">//static 修饰函数，使得函数只能在自己的源文件内部使用，不能在其他源文件内部使用，</span></span><br><span class="line"><span class="comment">//本质上：static是将函数的外部链接属性变成内部链接属性（与static修饰全局变量类似）</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//int a =1; 10个2</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">1</span>; <span class="comment">//2到11 , a 出函数体不会销毁，再次进入函数体保持上一次的值</span></span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;<span class="comment">//定义在test01.c中</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br><span class="line">{</span><br><span class="line">test();</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g_val);</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> sum = Add(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sum = %d"</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//static修饰局部变量，改变了局部变量的生命周期（本质上是改变了变量的存储类型） </span></span><br></pre></td></tr></tbody></table></figure><h4 id="define定义常量和宏"><a class="markdownIt-Anchor" href="#define定义常量和宏"></a> define定义常量和宏</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//define定义符号</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX = 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//define定义宏</span></span><br><span class="line"><span class="comment">//#define ADD(X,Y) X+Y //printf结果为11</span></span><br><span class="line"><span class="comment">//#define ADD(X,Y) （X+Y）错误写法</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(X,Y) ((X)+(Y)) <span class="comment">//模式替换</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">4</span> * ADD(<span class="number">2</span>, <span class="number">3</span>));<span class="comment">//4*2+3</span></span><br><span class="line"><span class="comment">//宏是实现替换的</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="指针"><a class="markdownIt-Anchor" href="#指针"></a> 指针</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//一个内存单元是一个byte:字节 </span></span><br><span class="line"><span class="comment">//一个byte由8个bit构成,1个bit为一个地址，所以一共8个地址  </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;a);<span class="comment">//%p用于打印地址;</span></span><br><span class="line"><span class="type">int</span> *pa = &amp;a;<span class="comment">//pa是用来存放地址的，在c语言中pa叫指针变量</span></span><br><span class="line"><span class="comment">//* 说明 pa是指针变量</span></span><br><span class="line"><span class="comment">//int 说明pa执行对象是int类型的</span></span><br><span class="line"><span class="type">char</span> ch = <span class="string">'w'</span>;</span><br><span class="line"><span class="type">char</span>* pc = &amp;ch;</span><br><span class="line"></span><br><span class="line">*pa = <span class="number">20</span>;<span class="comment">//*解引用操作，*pa就是通过pa里面的地址，找到a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>*));</span><br><span class="line"><span class="comment">//32位机器，4个字节</span></span><br><span class="line"><span class="comment">//64位机器，8个字节</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体可以让c语言创建出新的类型出来</span></span><br><span class="line"><span class="comment">//创建一个学生</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];<span class="comment">//名字</span></span><br><span class="line"><span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];<span class="comment">//性别</span></span><br><span class="line"><span class="type">char</span> id[<span class="number">15</span>];<span class="comment">//学号</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//结构体的初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span> =</span> { <span class="string">"张三"</span>,<span class="number">18</span>,<span class="string">"男"</span>,<span class="string">"20241574"</span> };</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"名字:%s 年龄:%d 性别:%s 学号:%s\n"</span>, s.name, s.age, s.sex, s.id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作符：-&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>* <span class="title">ps</span> =</span> &amp;s;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"名字:%s 年龄:%d 性别:%s 学号:%s\n"</span>, ps-&gt;name, ps-&gt;age, ps-&gt;sex, ps-&gt;id);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> <strong>总结：</strong></h1><h4 id="c语言的基本语法初步了解以及补充完成"><a class="markdownIt-Anchor" href="#c语言的基本语法初步了解以及补充完成"></a> c语言的基本语法初步了解以及补充完成</h4>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C语言 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【51单片机】定时器和中断 02</title>
      <link href="/posts/32229/"/>
      <url>/posts/32229/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机-第七节-定时器和中断总结代码部分"><a class="markdownIt-Anchor" href="#51单片机-第七节-定时器和中断总结代码部分"></a> [51单片机] 第七节 定时器和中断总结&lt;代码部分&gt;</h1><h3 id="ps-单片机的可位寻址不可位寻址"><a class="markdownIt-Anchor" href="#ps-单片机的可位寻址不可位寻址"></a> ps: 单片机的可位寻址/不可位寻址</h3><ul><li>可位寻址：可以对单个位赋值</li><li>不可位寻址：只能整体赋值</li></ul><p>代码示例：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Init</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">TMOD=<span class="number">0x01</span>; <span class="comment">//0000 0001</span></span><br><span class="line">TF=<span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="定时器的快捷配置"><a class="markdownIt-Anchor" href="#定时器的快捷配置"></a> 定时器的快捷配置</h3><img src="/posts/32229/b094f812549147d6b17d96fc95302cb2.png" class="" title="在这里插入图片描述"><h2 id="晶振电路简介这里所使用晶振为110592mhz"><a class="markdownIt-Anchor" href="#晶振电路简介这里所使用晶振为110592mhz"></a> 晶振电路简介（这里所使用晶振为11.0592MHZ)</h2><img src="/posts/32229/e6afeca057c945fb9d15dc14a78c676c.png" class="" title="在这里插入图片描述"><h2 id="一-中断测试代码"><a class="markdownIt-Anchor" href="#一-中断测试代码"></a> 一、中断测试代码</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Tmier0.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void Timer0_Init()//定时器配置</span></span><br><span class="line"><span class="comment">// {</span></span><br><span class="line"><span class="comment">// //TMOD=0x01; //0000 0001 //缺点：会影响到其他定时器</span></span><br><span class="line"><span class="comment">// TMOD &amp;= 0xF0;//把TMOD的低四位清零，高四位保持不变 //优点：不影响高四位（其他定时器的配置）</span></span><br><span class="line"><span class="comment">// TMOD |=  0X01;//把TMOD的最低为置1，高四位保持不变</span></span><br><span class="line"><span class="comment">// TF0=0; // Gate = 0;</span></span><br><span class="line"><span class="comment">// TR0 = 1;//定时器0允许计数</span></span><br><span class="line"><span class="comment">// //mark</span></span><br><span class="line"><span class="comment">// TH0=64535/256;//16进制 取高八位</span></span><br><span class="line"><span class="comment">// TL0=64535%256;//取低八位</span></span><br><span class="line"><span class="comment">// ET0=1;//T0的中断溢出允许位</span></span><br><span class="line"><span class="comment">// EA=1;//总的允许位</span></span><br><span class="line"><span class="comment">// PT0=0;// IP</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mark</span></span><br><span class="line"><span class="comment">//分析：如何计1s？</span></span><br><span class="line"><span class="comment">//0~65535</span></span><br><span class="line"><span class="comment">//每隔1us计数加一 12M 12分频</span></span><br><span class="line"><span class="comment">//总共定时时间65535us</span></span><br><span class="line"><span class="comment">//64535离计数器溢出差值1000，所以计时时间为1ms</span></span><br><span class="line"><span class="comment">//最大计65ms,所以这里分出1ms比较合适，再定义其他变量进行秒的计数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">Timer0_Init();<span class="comment">//定时器初始化，中断溢出会跳到  Timer0_Routine() interrupt 1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//unsigned int T0Count;//全局变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Routine</span><span class="params">()</span> interrupt 1 <span class="comment">//中断子程序</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> T0Count;<span class="comment">//静态局部变量，保证退出函数之后不销毁</span></span><br><span class="line"><span class="comment">//TH0=64535/256;//计数器溢出中断后，计数会清理，所以每次进入中断后需要再赋初值</span></span><br><span class="line"><span class="comment">//TL0=64535%256;</span></span><br><span class="line">TL0 = <span class="number">0x66</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">T0Count++;<span class="comment">//每次进入中断子程序，秒控制器自加一</span></span><br><span class="line"><span class="keyword">if</span>(T0Count&gt;=<span class="number">1000</span>)<span class="comment">//每1s执行对P2_0的操作</span></span><br><span class="line">{</span><br><span class="line">T0Count=<span class="number">0</span>;</span><br><span class="line">P2_0 =~P2_0;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ps-中断执行模块不宜存在过于复杂的任务"><a class="markdownIt-Anchor" href="#ps-中断执行模块不宜存在过于复杂的任务"></a> ps: 中断执行模块不宜存在过于复杂的任务</h2><h2 id="二-基于中断系统的流水灯按键控制"><a class="markdownIt-Anchor" href="#二-基于中断系统的流水灯按键控制"></a> 二、基于中断系统的流水灯按键控制</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Timer0.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void Timer0_Init()//定时器配置</span></span><br><span class="line"><span class="comment">// {</span></span><br><span class="line"><span class="comment">// //TMOD=0x01; //0000 0001 //缺点：会影响到其他定时器</span></span><br><span class="line"><span class="comment">// TMOD &amp;= 0xF0;//把TMOD的低四位清零，高四位保持不变 //优点：不影响高四位（其他定时器的配置）</span></span><br><span class="line"><span class="comment">// TMOD |=  0X01;//把TMOD的最低为置1，高四位保持不变</span></span><br><span class="line"><span class="comment">// TF0=0; // Gate = 0;</span></span><br><span class="line"><span class="comment">// TR0 = 1;//定时器0允许计数</span></span><br><span class="line"><span class="comment">// //mark</span></span><br><span class="line"><span class="comment">// TH0=64535/256;//16进制 取高八位</span></span><br><span class="line"><span class="comment">// TL0=64535%256;//取低八位</span></span><br><span class="line"><span class="comment">// ET0=1;//T0的中断溢出允许位</span></span><br><span class="line"><span class="comment">// EA=1;//总的允许位</span></span><br><span class="line"><span class="comment">// PT0=0;// IP</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mark</span></span><br><span class="line"><span class="comment">//分析：如何计1s？</span></span><br><span class="line"><span class="comment">//0~65535</span></span><br><span class="line"><span class="comment">//每隔1us计数加一 12M 12分频</span></span><br><span class="line"><span class="comment">//总共定时时间65535us</span></span><br><span class="line"><span class="comment">//64535离计数器溢出差值1000，所以计时时间为1ms</span></span><br><span class="line"><span class="comment">//最大计65ms,所以这里分出1ms比较合适，再定义其他变量进行秒的计数</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> keynum,LEDMode;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">P2=<span class="number">0xFE</span>;<span class="comment">//初始化，点亮第一个LED</span></span><br><span class="line">  Timer0_Init();<span class="comment">//定时器初始化，中断溢出会跳到  Timer0_Routine() interrupt 1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">keynum = Key();</span><br><span class="line"><span class="keyword">if</span>(keynum)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(keynum == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">LEDMode++;</span><br><span class="line"><span class="keyword">if</span>(LEDMode&gt;=<span class="number">2</span>)LEDMode=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//unsigned int T0Count;//全局变量</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">Timer0_Routine</span><span class="params">()</span> interrupt 1 <span class="comment">//中断子程序</span></span><br><span class="line"> {</span><br><span class="line"></span><br><span class="line"> <span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> T0Count;<span class="comment">//静态局部变量，保证退出函数之后不销毁</span></span><br><span class="line"> <span class="comment">//TH0=64535/256;//计数器溢出中断后，计数会清理，所以每次进入中断后需要再赋初值</span></span><br><span class="line"> <span class="comment">//TL0=64535%256;</span></span><br><span class="line"> TL0 = <span class="number">0x66</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line"> TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line"> T0Count++;<span class="comment">//每次进入中断子程序，秒控制器自加一</span></span><br><span class="line"> <span class="keyword">if</span>(T0Count&gt;=<span class="number">500</span>)</span><br><span class="line"> {</span><br><span class="line"> T0Count=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">if</span>(LEDMode == <span class="number">0</span>)</span><br><span class="line">P2=_crol_(P2,<span class="number">1</span>);<span class="comment">//循环左移</span></span><br><span class="line"><span class="keyword">if</span>(LEDMode == <span class="number">1</span>)</span><br><span class="line">P2=_cror_(P2,<span class="number">1</span>);<span class="comment">//循环右移，类似于移位寄存器（存在反馈电路）</span></span><br><span class="line"> }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p><mark>crol和cror函数区别于&lt;&lt;，&gt;&gt;移位操作符，具有“循环移位”的特性，不需要考虑移位“溢出”；</mark></p><h2 id="三-基于定时器的lcd数字时钟"><a class="markdownIt-Anchor" href="#三-基于定时器的lcd数字时钟"></a> 三、基于定时器的LCD数字时钟</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"LCD1602.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Timer0.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sec=<span class="number">55</span>,min=<span class="number">59</span>,hour=<span class="number">23</span>; <span class="comment">//秒时钟 分时钟 小时时钟 这里我们赋上初值</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">  LCD_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"CLOCK:"</span>);<span class="comment">//字符串静态显示不需要放在while中</span></span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">3</span>,<span class="string">":  :  "</span>);</span><br><span class="line"><span class="comment">//LCD_ShowNum(2,1,sec,2);//需要更新显示</span></span><br><span class="line">Timer0_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,hour,<span class="number">2</span>);<span class="comment">//思考：动态的信号需要更新显示，静态的信号一般不用放在while循环中</span></span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">4</span>,min,<span class="number">2</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">7</span>,sec,<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Routine</span><span class="params">()</span> interrupt 1 <span class="comment">//中断子程序 秒控制计数器</span></span><br><span class="line">{</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> T0Count;<span class="comment">//静态局部变量，保证退出函数之后不销毁  //不定义为全局变量是为了作为子函数内容，方便调用这个函数模板</span></span><br><span class="line">TL0 = <span class="number">0x66</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">T0Count++;<span class="comment">//每次进入中断子程序，秒控制器自加一</span></span><br><span class="line"><span class="keyword">if</span>(T0Count&gt;=<span class="number">1000</span>)<span class="comment">//每1s执行对P2_0的操作</span></span><br><span class="line">{</span><br><span class="line">T0Count=<span class="number">0</span>;</span><br><span class="line">P2_0=~P2_0;</span><br><span class="line">sec++;</span><br><span class="line"><span class="keyword">if</span>(sec &gt;=<span class="number">60</span>)</span><br><span class="line">{</span><br><span class="line">sec=<span class="number">0</span>;</span><br><span class="line">min++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(min &gt;=<span class="number">60</span>)</span><br><span class="line">{</span><br><span class="line">min=<span class="number">0</span>;</span><br><span class="line">hour++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(hour &gt;=<span class="number">24</span>)</span><br><span class="line">{</span><br><span class="line">hour=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>思考：Verilog/VHDL和单片机（c语言) 程序执行区别？</strong></p><ul><li><mark>c语言程序为顺序执行，而非并行执行，单片机中需要动态执行的任务要放在while循环体中</mark></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> 单片机定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【51单片机】定时器和中断 01</title>
      <link href="/posts/31909/"/>
      <url>/posts/31909/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机-第七节-定时器和中断总结"><a class="markdownIt-Anchor" href="#51单片机-第七节-定时器和中断总结"></a> [51单片机] 第七节 定时器和中断总结</h1><h2 id="前言定时器中断-寄存器都是单片机中非常重要的概念涉及到许多交叉的控制掌握好这些知识点是学习单片机的关键"><a class="markdownIt-Anchor" href="#前言定时器中断-寄存器都是单片机中非常重要的概念涉及到许多交叉的控制掌握好这些知识点是学习单片机的关键"></a> <mark>前言：定时器中断 ，寄存器都是单片机中非常重要的概念，涉及到许多交叉的控制，掌握好这些知识点是学习单片机的关键。</mark></h2><h2 id="51单片机的时钟源"><a class="markdownIt-Anchor" href="#51单片机的时钟源"></a> 51单片机的时钟源</h2><p>1.外部脉冲<br>2.系统时钟（晶振），开发板上周期为12MHZ</p><h2 id="一-定时器简介-swig0-"><a class="markdownIt-Anchor" href="#一-定时器简介-swig0-"></a> 一、定时器简介<img src="/posts/31909/67e820f0a50c4166b9d09e96323cbbfc.png" class="" title="在这里插入图片描述"></h2><ul><li>注意：当时钟源为外部(T0)引脚提供时，定时器作为“计数器”作用，当外部每输入一个脉冲信号，计数器计数加一（不是常用功能）。</li></ul><h2 id="二-定时器工作模式"><a class="markdownIt-Anchor" href="#二-定时器工作模式"></a> 二、定时器工作模式</h2><img src="/posts/31909/64a2475b0b6249149499e02ab139f2f3.png" class="" title="在这里插入图片描述"><p>C/NT：当次开关为1时，为计数器功能(counter)，配置T0引脚，当为0时，即定时器功能(timer)，配置系统时钟。</p><p><strong>定时器整个工作系统分为三个模块：</strong></p><ul><li>时钟模块: SYSclk,T0 pin ，此图为12分频的模式</li><li>计数模块/中断系统：计数范围：0~65530：计数溢出时会置标志位TF0,申请中断</li><li>控制模块:  GATE,NINT0,TR0</li></ul><h2 id="三-中断系统简介"><a class="markdownIt-Anchor" href="#三-中断系统简介"></a> 三、中断系统简介</h2><img src="/posts/31909/bebdac2cb7844406bba4299a353e6c6b.png" class="" title="在这里插入图片描述"><ul><li>高优先级的中断可以打断低优先级的中断</li><li>中断系统即对紧急事件的实时处理</li></ul><h2 id="四-中断系统工作流程"><a class="markdownIt-Anchor" href="#四-中断系统工作流程"></a> 四、中断系统工作流程</h2><img src="/posts/31909/6e8e07edeeb447a2b59d06efb8eec845.png" class="" title="在这里插入图片描述"><h2 id="五-stc89c52的中断资源"><a class="markdownIt-Anchor" href="#五-stc89c52的中断资源"></a> 五、stc89c52的中断资源</h2><img src="/posts/31909/ddd0c3d15aef430fbd38dc6b8a28716d.png" class="" title="在这里插入图片描述"><h2 id="六-中断系统的结构"><a class="markdownIt-Anchor" href="#六-中断系统的结构"></a> 六、中断系统的结构</h2><img src="/posts/31909/1214475b0c524bdbb01c7d3ed8ce5353.png" class="" title="在这里插入图片描述"><ul><li><mark>寄存器解释，中断系统的详细原理见数据手册（养成良好的阅读素养）</mark></li></ul><h2 id="寄存器的简介"><a class="markdownIt-Anchor" href="#寄存器的简介"></a> 寄存器的简介</h2><img src="/posts/31909/def0dec741e3438db3d0698a194ad54e-17087026380168.png" class="" title="在这里插入图片描述"><ul><li><strong><mark>寄存器相当于连接单片机中电路的“特殊开关”</mark></strong></li></ul><img src="/posts/31909/df18bf435b3048e0be9d65398f023462.png" class="" title="在这里插入图片描述"><p><strong>ps: GATE直接给0 ，一级或门输出一，二级与门输出由TR0控制是否进行计数</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> 单片机定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【51单片机】串口通信</title>
      <link href="/posts/17620/"/>
      <url>/posts/17620/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机-第八节-串口通信总结"><a class="markdownIt-Anchor" href="#51单片机-第八节-串口通信总结"></a> [51单片机] 第八节 串口通信总结</h1><p><mark><strong>51单片机中的自动重载概念实际上就是当计数溢出后自动赋初值</strong></mark><br><mark><strong>同步通信中波特率为通信双方约定好的通信速率</strong></mark></p><h2 id="前置部分"><a class="markdownIt-Anchor" href="#前置部分"></a> &lt;前置部分&gt;</h2><h3 id="一-串口简介"><a class="markdownIt-Anchor" href="#一-串口简介"></a> 一、串口简介：</h3><ul><li>串口是一种应用十分广泛的通讯接口，串口成本低、容易使用、通信线路简单，可实现两个设备的互相通信。</li><li>单片机的串口可以使单片机与单片机、单片机与电脑、单片机与各式各样的模块互相通信，极大的扩展了单片机的应用范围，增强了单片机系统的硬件实力。</li><li>51单片机内部自带UART（Universal Asynchronous Receiver Transmitter，通用异步收发器），可实现单片机的串口通信。</li></ul><p>CH340串口模块</p><img src="/posts/17620/27446b4622ad4a0cbcb38f713983f81b.png" class="" title="在这里插入图片描述"><p>蓝牙串口模块</p><img src="/posts/17620/8a2079d378f24b61ad22949edbdb3807.png" class="" title="在这里插入图片描述"><h3 id="二-串口通信方式"><a class="markdownIt-Anchor" href="#二-串口通信方式"></a> 二、串口通信方式：</h3><img src="/posts/17620/5e2154d6b0284aeea4bf2085df848fcd.png" class="" title="在这里插入图片描述"><img src="/posts/17620/f53dddcf5aa24cb9b527df57abb8439e.png" class="" title="在这里插入图片描述"><img src="/posts/17620/1aef41579afb4053bc396a79ed0acbba.png" class="" title="在这里插入图片描述"><h3 id="串口模式图"><a class="markdownIt-Anchor" href="#串口模式图"></a> #串口模式图：</h3><img src="/posts/17620/f0cfb31d68bb4a9e911fb4d194cbc5b4.png" class="" title="在这里插入图片描述"><ul><li>SBUF：串口数据缓存寄存器，物理上是两个独立的寄存器，但占用相同的地址。写操作时，写入的是发送寄存器，读操作时，读出的是接收寄存器，因此要<mark>通过检测TI和RI的信号</mark>判断是发送还是接收操作。</li></ul><h3 id="ps用串口端控制发送接收时要注意对应上hex文本模式"><a class="markdownIt-Anchor" href="#ps用串口端控制发送接收时要注意对应上hex文本模式"></a> ps:用串口端控制发送/接收时，要注意对应上HEX/文本模式</h3><ul><li>HEX模式/十六进制模式/二进制模式：以原始数据的形式显示</li><li>文本模式/字符模式：以原始数据编码后的形式显示</li></ul><h3 id="stc-isp-串口波特率代码生成"><a class="markdownIt-Anchor" href="#stc-isp-串口波特率代码生成"></a> # stc-isp 串口波特率代码生成</h3><img src="/posts/17620/0cd1dd1144844719857702f92b85defa.png" class="" title="在这里插入图片描述"><h3 id="三-串行口通信相关寄存器"><a class="markdownIt-Anchor" href="#三-串行口通信相关寄存器"></a> 三、串（行）口通信相关寄存器</h3><img src="/posts/17620/fb06092740624f0e9f0f842f86e67c71.png" class="" title="在这里插入图片描述"><img src="/posts/17620/239d9f30d5e948e9bb6b021a20d73cce.png" class="" title="在这里插入图片描述"><img src="/posts/17620/358ab45096b14af0b704f528e22fece1.png" class="" title="在这里插入图片描述"><img src="/posts/17620/1d59a35042d74b2bb9bd05c1212373b9.png" class="" title="在这里插入图片描述"><h3 id="串口通信的寄存器解释"><a class="markdownIt-Anchor" href="#串口通信的寄存器解释"></a> #串口通信的寄存器解释</h3><hr><h4 id="scon串行控制寄存器"><a class="markdownIt-Anchor" href="#scon串行控制寄存器"></a> SCON:串行控制寄存器</h4><ul><li><strong>SMO/FE：当PCON为1，FE生效，用于帧检测，当PCON为0，SM0生效，与SM1共同作用</strong></li><li>这里我们选择工作方式1，SM0=0,SM1=1，SM2=0（没有用到停止位），REN=0（暂不接收数据）,TB8=0,RB8=0,T1=0（方式1），RI=0(<mark>在收到一个Byte的数据时RI会自动置1</mark>);</li><li><mark>SCON = 0x40;</mark></li></ul><p><strong>ps:主机响应中断不能判断是接收还是发送中断，必须在中断服务程序中判断TI和RI的值</strong></p><hr><h4 id="pcon波特率选择寄存器"><a class="markdownIt-Anchor" href="#pcon波特率选择寄存器"></a> PCON:波特率选择寄存器</h4><ul><li>由常用串口软件如：stp-isp进行计算</li></ul><hr><h4 id="sbuf数据缓冲寄存器"><a class="markdownIt-Anchor" href="#sbuf数据缓冲寄存器"></a> SBUF:数据缓冲寄存器</h4><ul><li>通过程序，控制SBUF的内容，实现电脑端和单片机端的双向通信数据传输</li></ul><hr><h2 id="代码部分"><a class="markdownIt-Anchor" href="#代码部分"></a> &lt;代码部分&gt;</h2><h3 id="一-串口向电脑端发送数据"><a class="markdownIt-Anchor" href="#一-串口向电脑端发送数据"></a> 一、串口向电脑端发送数据</h3><p>UART.c</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief 串口初始化，//4800bps@11.0592MHz</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Init</span><span class="params">()</span><span class="comment">//串口初始化</span></span><br><span class="line">{<span class="comment">//波特率：通信双方约定的通信速率</span></span><br><span class="line">SCON=<span class="number">0x40</span>;</span><br><span class="line">PCON &amp;= <span class="number">0x7F</span>;<span class="comment">//波特率不倍速</span></span><br><span class="line">TMOD &amp;= <span class="number">0x0F</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">  TMOD |= <span class="number">0x20</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">  TL1 = <span class="number">0xFA</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">  TH1 = <span class="number">0xFA</span>;<span class="comment">//设置定时重载值</span></span><br><span class="line">   ET1 = <span class="number">0</span>;<span class="comment">//禁止定时器中断</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//定时器1开始计时</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief 串口发送一个字节数据</span></span><br><span class="line"><span class="comment">  * @param  Byte 要发送的一个字节数据</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_SendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Byte)</span></span><br><span class="line">{</span><br><span class="line">SBUF=Byte;<span class="comment">//发送缓存器中的数据为Byte</span></span><br><span class="line"><span class="keyword">while</span>(TI==<span class="number">0</span>);<span class="comment">//发送完数据后，电脑端接收，然后TI=1，跳过while循环</span></span><br><span class="line">TI=<span class="number">0</span>;<span class="comment">//每次发送完数据,程序置0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>main.c</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"UART.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Sec;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">UART_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">UART_SendByte(Sec);</span><br><span class="line">Sec++;</span><br><span class="line">Delay(<span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="二-电脑通过串口控制led"><a class="markdownIt-Anchor" href="#二-电脑通过串口控制led"></a> 二、电脑通过串口控制LED</h3><p>UART.c</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief 串口初始化，//4800bps@11.0592MHz</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Init</span><span class="params">()</span><span class="comment">//串口初始化</span></span><br><span class="line">{<span class="comment">//波特率：通信双方约定的通信速率</span></span><br><span class="line">SCON=<span class="number">0x50</span>;</span><br><span class="line">PCON &amp;= <span class="number">0x7F</span>;<span class="comment">//波特率不倍速</span></span><br><span class="line">TMOD &amp;= <span class="number">0x0F</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">  TMOD |= <span class="number">0x20</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">  TL1 = <span class="number">0xFA</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">  TH1 = <span class="number">0xFA</span>;<span class="comment">//设置定时重载值</span></span><br><span class="line">   ET1 = <span class="number">0</span>;<span class="comment">//禁止定时器中断</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//定时器1开始计时</span></span><br><span class="line">EA=<span class="number">1</span>;<span class="comment">//启动所有中断</span></span><br><span class="line">ES=<span class="number">1</span>;<span class="comment">//启动串口中断</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动重装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief 串口发送一个字节数据</span></span><br><span class="line"><span class="comment">  * @param  Byte 要发送的一个字节数据</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_SendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Byte)</span></span><br><span class="line">{</span><br><span class="line">SBUF=Byte;</span><br><span class="line"><span class="keyword">while</span>(TI==<span class="number">0</span>);</span><br><span class="line">TI=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*串口中断函数模板</span></span><br><span class="line"><span class="comment">void UART_Routine() interrupt 4</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">if(RI==1)// 接收 中断</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">RI=0;</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>main.c</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"UART.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">UART_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Routine</span><span class="params">()</span> interrupt 4 <span class="comment">//带上interrupt 4表示UART_Routine()为中断服务子函数</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(RI==<span class="number">1</span>)<span class="comment">// 接收 中断</span></span><br><span class="line">{</span><br><span class="line">P2=~SBUF;</span><br><span class="line">UART_SendByte(SBUF);<span class="comment">//这里，单片机接收电脑端发送的数据，一个函数不能既在主函数里出现，也在中断中出现</span></span><br><span class="line">RI=<span class="number">0</span>;<span class="comment">//程序置0</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><mark><strong>总结：UART：同步双向，即向电脑端发送数据，也可接收电脑端发送的数据，通过内部程序执行相应的任务</strong></mark></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> 串口通信 </tag>
            
            <tag> UART通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【51单片机】红外通信</title>
      <link href="/posts/50684/"/>
      <url>/posts/50684/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机第十七讲-红外通信"><a class="markdownIt-Anchor" href="#51单片机第十七讲-红外通信"></a> 【51单片机】第十七讲 红外通信</h1><p>2024.2.2日更新</p><h2 id="一-使用模块"><a class="markdownIt-Anchor" href="#一-使用模块"></a> 一、使用模块</h2><h3 id="红外遥控"><a class="markdownIt-Anchor" href="#红外遥控"></a> 红外遥控</h3><ol><li>介绍：红外遥控是利用红外光进行通信的设备，由红外LED将<mark>调制</mark>后的信号发出，由专用的红外接收头进行<mark>解调</mark>输出。</li><li>红外LED波长：940nm，红外信号属于电磁波</li><li>通信协议标准：<mark>NEC标准</mark></li></ol><h3 id="红外接收管"><a class="markdownIt-Anchor" href="#红外接收管"></a> 红外接收管</h3><img src="/posts/50684/6090cf36fd3340cc9904d8646fbe34b9.png" class="" title="img"><h2 id="二-原理部分"><a class="markdownIt-Anchor" href="#二-原理部分"></a> 二、原理部分</h2><h3 id="一-红外通信的原理"><a class="markdownIt-Anchor" href="#一-红外通信的原理"></a> 一、红外通信的原理</h3><ul><li>空闲状态：红外LED不亮，接收头输出高电平</li><li>发送低电平：红外LED以38KHz频率闪烁发光，接收头输出低电平</li><li>发送高电平：红外LED不亮，接收头输出高电平<br>总而言之，只有红外LED发送38KHZ的闪烁信号时，红外接收头OUT引脚才会对外输出低电平信号<br>红外发送–红外接收的本质是<mark>调制</mark>和<mark>解调</mark>，在这种条件下，可以过滤掉自然界中的“噪声信号”，只有38KHZ附近的红外信号才能被红外接收头识别转换为对应的低电平。</li></ul><p><strong>转换示意图：</strong><br>1.红外LED发出的信号</p><img src="/posts/50684/c97d453d8866482a8bc0a2191a565288.png" class="" title="在这里插入图片描述"><p>2.红外接收头发出的信号</p><img src="/posts/50684/3d972def937345fdb73a96eb875114b8.png" class="" title="在这里插入图片描述"><p>其中，红外接收头发出的低电平信号的宽度等价于红外LED发送的38KHz信号的时间。</p><h3 id="二-nec通信的原理"><a class="markdownIt-Anchor" href="#二-nec通信的原理"></a> 二、NEC通信的原理</h3><h4 id="一-红外nec协议"><a class="markdownIt-Anchor" href="#一-红外nec协议"></a> 一、红外NEC协议</h4><img src="/posts/50684/ac77a0c0463b43ec87199921737332ea.png" class="" title="在这里插入图片描述"><p>在51单片机中，使用NEC通信协议，虽然NEC标准上要求（比如说Start信号）低电平持续时间9ms,高电平持续时间4.5ms，但是stc89c52用红外通信要使用到外部中断，外部中断检测方式有两种：低电平/下降沿，我们这里使用下降沿检测方式，一个完整的Start信号，包含两个下降沿，即触发两次中断，所以只要从第一次中断开始起始，第二次中断判断时间长度，即可分辨是Start还是Repeat信号。</p><h4 id="二-nec编码"><a class="markdownIt-Anchor" href="#二-nec编码"></a> 二、NEC编码</h4><img src="/posts/50684/bfdf6d289ff1423ca951eba5640917c6.png" class="" title="在这里插入图片描述"><p><strong>NEC编码包括地址码和命令码，其中地址吗和命令码都会进行一次反码校验。因此，一段完整的NEC数据码一共有4个字节，32位bit</strong></p><p>遥控器键码</p><img src="/posts/50684/7a07fa67c2f145da96d22f3cd2c6d79a.png" class="" title="在这里插入图片描述"><p>这里，我们定义地址码为<mark>Address</mark>,命令码为<mark>Command</mark>, 完整的数据码为<mark>DATA</mark>，如果我们按下0,那么发送的<strong>Address=0x00; Command =0x16; 那么DATA一共包含0X00,0XFF,0X16,~0X16四个字节的先后数据。</strong></p><h3 id="三-外部中断的原理"><a class="markdownIt-Anchor" href="#三-外部中断的原理"></a> 三、外部中断的原理</h3><ul><li>STC89C52有四个外部中断</li><li>STC89C52外部中断有两种方式：下降沿/低电平触发</li><li>中断号</li></ul><img src="/posts/50684/371dbb882c974ce58699b8ceaa32e092.png" class="" title="在这里插入图片描述"><p>外部中断配置的寄存器：</p><img src="/posts/50684/53bd99d1486c4427aff48442fad5ee50.png" class="" title="在这里插入图片描述"><h1 id="三-代码部分"><a class="markdownIt-Anchor" href="#三-代码部分"></a> 三、代码部分</h1><h2 id="重要调试过程"><a class="markdownIt-Anchor" href="#重要调试过程"></a> #重要调试过程</h2><p><strong>11.0592MHZ和12MHZ的定时器计数速率不一致，硬件电路或者程序运行速度相关问题，可能导致实际的（比如Start命令）宽度并不是很接近于标准的通信协议，需要我们自己去调试，这里我在调试的过程中遇到了一些问题，以下为相关代码和解决方法</strong></p><p>外部中断</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "Timer0.h"</span></span><br><span class="line"><span class="comment">#include "Delay.h"</span></span><br><span class="line"><span class="comment">#include "LCD1602.h"</span></span><br><span class="line"><span class="comment">#include "INT0.h"</span></span><br><span class="line"></span><br><span class="line">unsigned char Num;</span><br><span class="line">void <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">Int0_Init();</span><br><span class="line"><span class="keyword">while</span>(1)</span><br><span class="line">{</span><br><span class="line">LCD_ShowNum(1,1,Num,2);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void Int0_Rountine(void)interrupt 0</span><br><span class="line">{</span><br><span class="line">Num++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * @brief </span><br><span class="line">  * @param  </span><br><span class="line">  * @retval </span><br><span class="line"></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">void Int0_Init(void)//@11.0592MHz</span><br><span class="line">{</span><br><span class="line">IT0=1;</span><br><span class="line">IE0=0;</span><br><span class="line">EX0=1;</span><br><span class="line">EA=1;</span><br><span class="line">PX0=1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">void Int0_Rountine(void)interrupt 0;</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">*/</span><br></pre></td></tr></tbody></table></figure><p>Timer0计时模块编写,用作跟红外通信相关的编码时序计时</p><img src="/posts/50684/353ffadddfd04e0f9e71870ae7e8448a.png" class="" title="在这里插入图片描述"><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Timer0_Init(void)//@11.0592MHz</span><br><span class="line">{</span><br><span class="line">TMOD &amp;= 0xF0;</span><br><span class="line">TMOD |= 0x01;</span><br><span class="line">TL0 = 0x00;</span><br><span class="line">TH0 = 0x00;</span><br><span class="line">TF0 = 0;</span><br><span class="line">TR0 = 0;</span><br><span class="line">ET0=1;</span><br><span class="line">EA=1;</span><br><span class="line">PT0=0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void Time0_SetCounter(unsigned int Number)</span><br><span class="line">{</span><br><span class="line">TL0=0x0F&amp;Number;</span><br><span class="line">TH0=0xF0&amp;Number;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">unsigned int <span class="function"><span class="title">Time0_GetCounter</span></span>()</span><br><span class="line">{</span><br><span class="line">unsigned int number;</span><br><span class="line">number=TL0+TH0;</span><br><span class="line"><span class="built_in">return</span> number;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void Time0_Run(unsigned char Flag)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Flag)</span><br><span class="line">{</span><br><span class="line">TR0=1;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">TR0=0;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">/*定时器中断函数模板</span><br><span class="line">void Timer0_Routine() interrupt 1 //中断子程序</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">static unsigned int T0Count;//静态局部变量，保证退出函数之后不销毁</span><br><span class="line">TL0 = 0x66;//设置定时初始值</span><br><span class="line">TH0 = 0xFC;//设置定时初始值</span><br><span class="line">T0Count++;//每次进入中断子程序，秒控制器自加一</span><br><span class="line"><span class="keyword">if</span>(T0Count&gt;=1000)//每1s执行对P2_0的操作</span><br><span class="line">{</span><br><span class="line">T0Count=0;</span><br><span class="line">P2_0 =~P2_0;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">*/</span><br></pre></td></tr></tbody></table></figure><p><strong>红外通信模块</strong></p><blockquote><p>测试结果：红外可以接收，但是无法发送起始命令（按下按键后，LED不亮）<br>问题分析 ：计时器计数的时长不在我们 &gt; if(IR_Time&gt;=13500-500 &amp;&amp; IR_Time&lt;=13500+500) &lt; 语句的判断范围内<br>解决方案：修改if语句的判断范围，使之能检测到Start命令，并用LCD1602显示定时器发送Start命令实际的定时器计数数值IR_Time。</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "Timer0.h"</span></span><br><span class="line"><span class="comment">#include "INT0.h"</span></span><br><span class="line"></span><br><span class="line">unsigned char IR_ADDRESS;</span><br><span class="line">unsigned char IR_State;</span><br><span class="line">unsigned char IR_Time;</span><br><span class="line"></span><br><span class="line">void IR_Init()//红外中断初始化</span><br><span class="line">{</span><br><span class="line">Timer0_Init();</span><br><span class="line">Int0_Init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void Int0_Rountine(void)interrupt 0 //外部中断函数，使用状态机方法</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(IR_State==0)//起始时，一但红外管检测到按键按下，就会进入外部中断程序，从状态0开始</span><br><span class="line">{</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line">Timer0_Run(1);</span><br><span class="line">IR_State=1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IR_State==1)//状态1</span><br><span class="line">{</span><br><span class="line">IR_Time=Timer0_GetCounter();</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line"><span class="keyword">if</span>(IR_Time&gt;=13500-500 &amp;&amp; IR_Time&lt;=13500+500)//检测红外管是否发送起始命令</span><br><span class="line">{</span><br><span class="line">P2=0;</span><br><span class="line">IR_State=2;</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IR_Time&gt;=11250-500 &amp;&amp; IR_Time&lt;=11250+500)//重复命令</span><br><span class="line">{</span><br><span class="line">IR_State=0;</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">IR_State=1;//自循环</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试定时器是否正常计数<br>问题1：延时函数用到12MHZ,需要改写<br>问题2:   Timer0模块多个函数编写存在问题</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "Timer0.h"</span></span><br><span class="line"><span class="comment">#include "Delay.h"</span></span><br><span class="line"><span class="comment">#include "LCD1602.h"</span></span><br><span class="line"><span class="comment">#include "INT0.h"</span></span><br><span class="line"><span class="comment">#include "IR.h"</span></span><br><span class="line"></span><br><span class="line">unsigned char Num;//Num只能到255</span><br><span class="line">void <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">Timer0_Init();</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line">Timer0_Run(1);</span><br><span class="line">Delay(1);</span><br><span class="line">LCD_ShowNum(1,1,Timer0_GetCounter(),5);</span><br><span class="line"><span class="keyword">while</span>(1)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改后，再次测试…<br>延时13ms观察定时器计数，通过LCD可以看到,13ms对应的计数居然是12076, 不符合12MHZ的通信要求，由此，我们要重新运算通信时序时长</p><p>使用时间转换器Timer0_usCount ，对比结果，显示真实的13500ms对应的定时器计数值</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Timer0.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"LCD1602.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"INT0.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"IR.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Num;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">Timer0_Init();Timer0_SetCounter(<span class="number">0</span>);Timer0_Run(<span class="number">1</span>);</span><br><span class="line">Delay(<span class="number">13</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">1</span>,Timer0_GetCounter(),<span class="number">5</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,Timer0_usCount(<span class="number">0x66</span>,<span class="number">0xCF</span>),<span class="number">5</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/posts/50684/a2b23e45c4a744b79a619ced79a72ee2.png" class="" title="在这里插入图片描述"><p>实际红外管，起始命令的时长为"12926"</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "Timer0.h"</span></span><br><span class="line"><span class="comment">#include "INT0.h"</span></span><br><span class="line"><span class="comment">#include "LCD1602.h"</span></span><br><span class="line"></span><br><span class="line">unsigned char IR_ADDRESS;</span><br><span class="line">unsigned char IR_State;</span><br><span class="line"></span><br><span class="line">//unsigned char IR_Time; 错误！！！这里定义为字符类型，对应的数值仅有255，对应的13500无法赋值给IR_Time</span><br><span class="line">unsigned int IR_Time;</span><br><span class="line"></span><br><span class="line">void IR_Init()//红外中断初始化</span><br><span class="line">{</span><br><span class="line">Timer0_Init();</span><br><span class="line">Int0_Init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void Int0_Rountine(void)interrupt 0 //外部中断函数，使用状态机方法</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(IR_State==0)//起始时，一但红外管检测到按键按下，就会进入外部中断程序，从状态0开始</span><br><span class="line">{</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line">Timer0_Run(1);</span><br><span class="line">IR_State=1;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IR_State==1)//状态1</span><br><span class="line">{</span><br><span class="line">IR_Time=Timer0_GetCounter();</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line"><span class="keyword">if</span>(IR_Time&gt;12926-500 &amp;&amp; IR_Time&lt;12926+500)//检测红外管是否发送起始命令</span><br><span class="line">{</span><br><span class="line">LCD_ShowNum(1,1,IR_Time,5);</span><br><span class="line">P2=0;</span><br><span class="line">IR_State=2;</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IR_Time&gt;=1000 &amp;&amp; IR_Time&lt;=2000)//重复命令</span><br><span class="line">{</span><br><span class="line">IR_State=0;</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">P2_5=1;</span><br><span class="line">P2_5=0;</span><br><span class="line">P2_5=1;</span><br><span class="line">IR_State=1;//自循环</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>经过对代码的修改后，将程序烧录到单片机上，在LCD1602上显示能够进入&gt;if(IR_Time&gt;12926-500 &amp;&amp; IR_Time&lt;12926+500)语句的命令时长&lt;</strong></p><img src="/posts/50684/353560c64d1f47b7b4af420f04f8b1ef.jpeg" class="" title="在这里插入图片描述"><p><strong>IR_Time在12926附近浮动，可见用标准的13500作为代码中的时长判断并不合适，同理，后续的其他命令时长（低电平/高电平/Repeat/)也用这种方法测试（调大判断范围、显示真实时长、修改合适的范围）</strong></p><h2 id="一-外部中断"><a class="markdownIt-Anchor" href="#一-外部中断"></a> 一、外部中断</h2><p>1.外部中断寄存器配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * @brief </span><br><span class="line">  * @param  </span><br><span class="line">  * @retval </span><br><span class="line"></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">void Int0_Init(void)//@11.0592MHz</span><br><span class="line">{</span><br><span class="line">IT0=1;//下降沿触发中断</span><br><span class="line">IE0=0;</span><br><span class="line">EX0=1;</span><br><span class="line">EA=1;</span><br><span class="line">PX0=1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">void Int0_Rountine(void)interrupt 0;</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">*/</span><br></pre></td></tr></tbody></table></figure><p>2.对定时器0进行重编写</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Timer0_Init(void)//@11.0592MHz</span><br><span class="line">{</span><br><span class="line">TMOD &amp;= 0xF0;</span><br><span class="line">TMOD |= 0x01;</span><br><span class="line">TL0 = 0x00;</span><br><span class="line">TH0 = 0x00;</span><br><span class="line">TF0 = 0;</span><br><span class="line">TR0 = 0;</span><br><span class="line">ET0=1;</span><br><span class="line">EA=1;</span><br><span class="line">PT0=0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">///TH0 TL0不能随便给Number的，有高低位之分！</span><br><span class="line">void Timer0_SetCounter(unsigned int Number)</span><br><span class="line">{</span><br><span class="line">TH0=Number/256;</span><br><span class="line">TL0=Number%256;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//!!!</span><br><span class="line">unsigned int Timer0_GetCounter(void)</span><br><span class="line">{</span><br><span class="line">//number=TL0+TH0;</span><br><span class="line"><span class="built_in">return</span> (TH0&lt;&lt;<span class="string">8)|TL0;</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//!!!</span></span><br><span class="line"><span class="string">void Timer0_Run(unsigned char Flag)</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">//if(Flag)</span></span><br><span class="line"><span class="string">//{</span></span><br><span class="line"><span class="string">//TR0=1;</span></span><br><span class="line"><span class="string">//}</span></span><br><span class="line"><span class="string">//else</span></span><br><span class="line"><span class="string">//{</span></span><br><span class="line"><span class="string">//TR0=0;</span></span><br><span class="line"><span class="string">//}</span></span><br><span class="line"><span class="string">TR0=Flag;</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unsigned int Timer0_usCount(unsigned int TL,unsigned int TH)//时间转换器</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">unsigned int us = (0xFF-TH)*16*16 + (0xFF-TL);</span></span><br><span class="line"><span class="string">return us;</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*定时器中断函数模板</span></span><br><span class="line"><span class="string">void Timer0_Routine() interrupt 1 //中断子程序</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">static unsigned int T0Count;//静态局部变量，保证退出函数之后不销毁</span></span><br><span class="line"><span class="string">TL0 = 0x66;//设置定时初始值</span></span><br><span class="line"><span class="string">TH0 = 0xFC;//设置定时初始值</span></span><br><span class="line"><span class="string">T0Count++;//每次进入中断子程序，秒控制器自加一</span></span><br><span class="line"><span class="string">if(T0Count&gt;=1000)//每1s执行对P2_0的操作</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">T0Count=0;</span></span><br><span class="line"><span class="string">P2_0 =~P2_0;</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">*/</span></span><br></pre></td></tr></tbody></table></figure><p>3.红外通信模块</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "Timer0.h"</span></span><br><span class="line"><span class="comment">#include "INT0.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//unsigned char IR_Time; 错误！！！这里定义为字符类型，对应的数值仅有255，对应的13500无法赋值给IR_Time</span><br><span class="line">unsigned int IR_Time;</span><br><span class="line">unsigned char IR_State;</span><br><span class="line"></span><br><span class="line">unsigned char IR_Data[4];</span><br><span class="line">unsigned char IR_Data_p;</span><br><span class="line"></span><br><span class="line">unsigned char IR_DataFlag;</span><br><span class="line">unsigned char IR_RepeatFlag;</span><br><span class="line"></span><br><span class="line">unsigned char IR_Address;</span><br><span class="line">unsigned char IR_Command;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void IR_Init()//红外中断初始化</span><br><span class="line">{</span><br><span class="line">Timer0_Init();</span><br><span class="line">Int0_Init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">unsigned char IR_GetAdress(void)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">return</span> IR_Address;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">unsigned char IR_GetCommand(void)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">return</span> IR_Command;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">unsigned char IR_GetDataFlag(void)</span><br><span class="line">{</span><br><span class="line">unsigned int Flag = IR_DataFlag;</span><br><span class="line">IR_DataFlag=0;</span><br><span class="line"><span class="built_in">return</span> Flag;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">unsigned char IR_GetRepeatFlag(void)</span><br><span class="line">{</span><br><span class="line">unsigned int Flag = IR_RepeatFlag;</span><br><span class="line">IR_RepeatFlag=0;</span><br><span class="line"><span class="built_in">return</span> Flag;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Int0_Rountine(void)interrupt 0 //外部中断函数，使用状态机方法</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(IR_State==0)//起始时，一但红外管检测到按键按下，就会进入外部中断程序，从状态0开始</span><br><span class="line">{</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line">Timer0_Run(1);</span><br><span class="line">IR_State=1;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IR_State==1)//状态1</span><br><span class="line">{</span><br><span class="line">IR_Time=Timer0_GetCounter();</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line"><span class="keyword">if</span>(IR_Time&gt;12926-500 &amp;&amp; IR_Time&lt;12926+500)//检测红外管是否发送起始命令</span><br><span class="line">{</span><br><span class="line">P2=0;</span><br><span class="line">IR_State=2;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IR_Time&gt;11250-500 &amp;&amp; IR_Time&lt;11250+500)//重复命令</span><br><span class="line">{</span><br><span class="line">IR_RepeatFlag=1;</span><br><span class="line">IR_State=0;</span><br><span class="line">Timer0_Run(0);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">IR_State=1;//自循环</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IR_State==2)//状态2</span><br><span class="line">{</span><br><span class="line">IR_Time=Timer0_GetCounter();</span><br><span class="line">Timer0_SetCounter(0);</span><br><span class="line"><span class="keyword">if</span>(IR_Time&gt;1032-500 &amp;&amp; IR_Time&lt;1032+500)//将IR_Data中的某一位置零</span><br><span class="line">{</span><br><span class="line">IR_Data[IR_Data_p/8] &amp;= ~(0x01&lt;&lt;(IR_Data_p%8)); // 0x01&lt;&lt;<span class="string">1 0000 0001 0000 0010 ~(0x01&lt;&lt;1</span>) 1111 1110 1111 1101</span><br><span class="line">//IR_Data_p++/8,对应的值从0到3</span><br><span class="line">//IR_Data_p++%8,对应的值0~7循环四轮</span><br><span class="line">IR_Data_p++;//Data的二进制位指针,0~31</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IR_Time&gt;2074-500 &amp;&amp; IR_Time&lt;2074+500)</span><br><span class="line">{</span><br><span class="line">IR_Data[IR_Data_p/8] |= (0x01&lt;&lt;(IR_Data_p%8)); // 0x01&lt;&lt;<span class="string">1 0000 0001 0000 0010 ~(0x01&lt;&lt;1</span>) 1111 1110 1111 1101</span><br><span class="line">//IR_Data_p++/8,对应的值从0到3</span><br><span class="line">//IR_Data_p++%8,对应的值0~7循环四轮</span><br><span class="line">IR_Data_p++;//Data的二进制位指针,0~31</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">IR_Data_p=0;</span><br><span class="line">IR_State=1;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(IR_Data_p&gt;=32)</span><br><span class="line">{</span><br><span class="line">IR_Data_p=0;//位指针清零</span><br><span class="line"><span class="keyword">if</span>((IR_Data[<span class="number">0</span>] == ~IR_Data[<span class="number">1</span>]) &amp;&amp; (IR_Data[<span class="number">2</span>] == ~IR_Data[<span class="number">3</span>]))</span><br><span class="line">{</span><br><span class="line">IR_DataFlag=1;</span><br><span class="line">IR_Address=IR_Data[0];</span><br><span class="line">IR_Command=IR_Data[2];</span><br><span class="line">}</span><br><span class="line">Timer0_Run(0);</span><br><span class="line">IR_State=0;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3.主函数<br>运行问题1：在没有&gt;IR_GetDataFlag()||IR_GetRepeatFlag()&lt;的情况下，按下对应的红外按键也会产生连加的现象，这里<br>//if(Command==0x15)<br>//{<br>//Num–;<br>//}<br>//if(Command==0x09)<br>//{<br>//Num++;<br>//}跳出了&gt;if(IR_GetDataFlag())，<strong>只要红外遥控发出信号，红外发送管会产生对应的数据码，只要红外发送管产生单个方波信号，NUM也能自加，正确情况下应该是产生完整的数据码，然后标志位=1，NUM才能加一，这里出现了代码书写逻辑的错误</strong>&lt;</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "LCD1602.h"</span></span><br><span class="line"><span class="comment">#include "IR.h"</span></span><br><span class="line"></span><br><span class="line">unsigned char Num;</span><br><span class="line">unsigned char Command,Address;</span><br><span class="line">void <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">IR_Init();</span><br><span class="line">LCD_ShowString(1,1,<span class="string">"ADR  COM  NUM"</span>);//tab键会被识别</span><br><span class="line">LCD_ShowHexNum(2,1,00,2);</span><br><span class="line">LCD_ShowHexNum(2,6,00,2);</span><br><span class="line">LCD_ShowNum(2,11,00,3);</span><br><span class="line"><span class="keyword">while</span>(1)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(IR_GetDataFlag()||IR_GetRepeatFlag())//IR_GetRepeatFlag连加标志位</span><br><span class="line">{</span><br><span class="line">Command=IR_GetCommand();</span><br><span class="line">Address=IR_GetAdress();</span><br><span class="line">LCD_ShowHexNum(2,1,Address,2);</span><br><span class="line">LCD_ShowHexNum(2,6,Command,2);</span><br><span class="line"><span class="keyword">if</span>(Command==0x15)</span><br><span class="line">{</span><br><span class="line">Num--;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(Command==0x09)</span><br><span class="line">{</span><br><span class="line">Num++;</span><br><span class="line">}</span><br><span class="line">LCD_ShowNum(2,11,Num,3);</span><br><span class="line">}</span><br><span class="line">//<span class="keyword">if</span>(Command==0x15)</span><br><span class="line">//{</span><br><span class="line">//Num--;</span><br><span class="line">//}</span><br><span class="line">//<span class="keyword">if</span>(Command==0x09)</span><br><span class="line">//{</span><br><span class="line">//Num++;</span><br><span class="line">//}</span><br><span class="line">//LCD_ShowNum(2,8,Num,2);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改完成后，运行正常</p><blockquote><p><strong>现象：按下对应的按键，LCD1602上会显示对应的地址码，键码，以及NUM，按下控制NUM加减的按键，NUM会正确地进行自加减，并且具备连加/减地功能</strong><br><strong><mark>本程序用到了大量函数封装的方法，便于我们进行调用以及参数的判断，模块化编程极大地优化了代码的结构以及可移植性</mark></strong></p></blockquote><h2 id="二-红外通信pwm控制电机转速"><a class="markdownIt-Anchor" href="#二-红外通信pwm控制电机转速"></a> 二、红外通信+PWM控制电机转速</h2><p>1.主函数<br><strong>由于红外通信和PWM都要用到定时器/中断，这里同时使用到STC89C52中的定时器0和定时器1，使用定时器/红外中断时要注意区分优先级</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "IR.h"</span></span><br><span class="line"><span class="comment">#include "Timer1.h"</span></span><br><span class="line"><span class="comment">#include "Nixie.h"</span></span><br><span class="line"><span class="comment">#include "Motor.h"</span></span><br><span class="line"></span><br><span class="line">unsigned char Num;</span><br><span class="line">unsigned char Command,Address;</span><br><span class="line">unsigned char Speed;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">Motor_Init();</span><br><span class="line">IR_Init();</span><br><span class="line"><span class="keyword">while</span>(1)</span><br><span class="line">{</span><br><span class="line">Command=IR_GetCommand();</span><br><span class="line"><span class="keyword">if</span>(IR_GetDataFlag())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Command==IR_VOL_ADD)</span><br><span class="line">{</span><br><span class="line">Speed++;</span><br><span class="line">Speed%=4;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">switch(Speed)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> 0:Motor_CompareSet(0);<span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 1:Motor_CompareSet(50);<span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 2:Motor_CompareSet(75);<span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 3:Motor_CompareSet(100);<span class="built_in">break</span>;</span><br><span class="line">}</span><br><span class="line">Nixie(1,Speed);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2.直流电机模块（定时器1）<br>这里将占空比封装成函数<br><strong>思考：直接将子模块中的参数封装成函数，和直接调用全局变量的区别？</strong><br>封装成函数更便于调用</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "Timer1.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unsigned char Count,Compare;</span><br><span class="line"></span><br><span class="line">sbit Motor = P1^3;</span><br><span class="line"></span><br><span class="line">void Motor_Init(void)</span><br><span class="line">{</span><br><span class="line">Timer1_Init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void Motor_CompareSet(unsigned char num)//占空比设置</span><br><span class="line">{</span><br><span class="line">Compare=num;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Timer1_Routine() interrupt 3 //PWM控速</span><br><span class="line">{</span><br><span class="line">TL1 = 0x9C;</span><br><span class="line">TH1 = 0xFF;</span><br><span class="line">Count++;</span><br><span class="line">Count%=100;</span><br><span class="line"><span class="keyword">if</span>(Count&lt;Compare)</span><br><span class="line">{</span><br><span class="line">Motor=1;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">Motor=0;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>现象：按下红外遥控上对应的按键，直流电机速度发生变化</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> 红外通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言入门学习】分支和循环</title>
      <link href="/posts/6621/"/>
      <url>/posts/6621/</url>
      
        <content type="html"><![CDATA[<h1 id="c语言入门学习分支和循环"><a class="markdownIt-Anchor" href="#c语言入门学习分支和循环"></a> 【C语言入门学习】分支和循环</h1><p><strong>2024.2.20更新</strong></p><h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> #基本概念</h2><h3 id="一-语句"><a class="markdownIt-Anchor" href="#一-语句"></a> 一、语句</h3><p><strong>什么是语句？</strong><br>c语言中语句是用于控制计算机执行相关操作的指令，一个<mark>语句</mark>会被<mark>编译</mark>成若干条<mark>机器命令</mark>继而由计算机执行。</p><p><strong>语句的类型</strong></p><ul><li>表达式语句</li><li>函数调用语句</li><li>控制语句</li><li>复合语句</li><li>空语句</li></ul><blockquote><p>控制语句用于<mark>控制程序的执行流程</mark>，以实现程序的各种结构方式，它们由特定的语句定义符组成，C语言有九种控制语句。可分成以下三类：</p><ol><li>条件判断语句也叫分支语句：if语句、switch语句；</li><li>循环执行语句：do while语句、while语句、for语句；</li><li>转向语句：break语句、goto语句、continue语句、return语句</li></ol></blockquote><hr><h2 id="代码部分"><a class="markdownIt-Anchor" href="#代码部分"></a> #代码部分</h2><h3 id="一-if分支语句"><a class="markdownIt-Anchor" href="#一-if分支语句"></a> 一、if分支语句</h3><p>if语句的书写规范，跳转<a href="https://blog.csdn.net/qq_63100905/article/details/135834241?spm=1001.2014.3001.5502">【c语言入门学习】代码的书写规范</a></p><h3 id="二-switch分支语句"><a class="markdownIt-Anchor" href="#二-switch分支语句"></a> 二、switch分支语句</h3><p>switch中break的实际作用是把语句列表划分为不同的分支部分，不加break，会一直向下执行程序</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">int n = 1;</span><br><span class="line">int m = 2;</span><br><span class="line">switch (n)//switch执行一次条件判断，然后指定到对应的<span class="keyword">case</span>语句中</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> 1:</span><br><span class="line">m++;//n=1,m=3</span><br><span class="line"><span class="keyword">case</span> 2://此处也会执行，因为没有上句没有<span class="built_in">break</span>跳出, <span class="keyword">case</span>不需要判断条件,直接执行语句内容</span><br><span class="line">n++;//n=2,m=3</span><br><span class="line"><span class="keyword">case</span> 3://执行</span><br><span class="line">switch (n)</span><br><span class="line">{//switch允许嵌套使用</span><br><span class="line"><span class="keyword">case</span> 1:</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">case</span> 2:</span><br><span class="line">m++;</span><br><span class="line">n++;//m=4,n=3</span><br><span class="line"><span class="built_in">break</span>;//break跳出自己所在的switch语句</span><br><span class="line">}</span><br><span class="line"><span class="keyword">case</span> 4:</span><br><span class="line">m++;//m=5,n=3</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">default:</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"m = %d, n = %d\n"</span>, m, n);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="三-while循环语句"><a class="markdownIt-Anchor" href="#三-while循环语句"></a> 三、while循环语句</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">//在<span class="keyword">while</span>循环中，<span class="built_in">break</span>用于永久中止循环</span><br><span class="line">int i = 1;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= 10)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (i == 5)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">//在<span class="keyword">while</span>循环中，<span class="built_in">continue</span>的作用是跳过本次循环,直接去判断部分，看是否进行下一次循环体</span><br><span class="line">int i = 1;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= 10)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (i == 5)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">}//执行结果：<span class="built_in">continue</span>执行时会直接跳转到<span class="keyword">while</span>判断部分，而i=5保持不变，程序无限循环</span><br></pre></td></tr></tbody></table></figure><h3 id="do-while循环语句"><a class="markdownIt-Anchor" href="#do-while循环语句"></a> #do while循环语句</h3><p>先执行循环体，在执行循环判断</p><ul><li>do while较为少用</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">int i = 0;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hi\n"</span>);</span><br><span class="line">i++;</span><br><span class="line">} <span class="keyword">while</span> (i &lt; 5);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">hi</span><br><span class="line">hi</span><br><span class="line">hi</span><br><span class="line">hi</span><br><span class="line">hi</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="三-for循环语句"><a class="markdownIt-Anchor" href="#三-for循环语句"></a> 三、for循环语句</h3><ul><li>for循环泛用性比while更好</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">int i = 0;//c语言风格<span class="keyword">for</span>语句之前需要定义变量,c++可以在<span class="keyword">for</span>循环内部定义</span><br><span class="line"><span class="keyword">for</span> (i = 1; i &lt;= 10; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (i == 5)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">}//会执行i++，之后i=6</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);//结果跳过5</span><br><span class="line">}</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="for循环范例"><a class="markdownIt-Anchor" href="#for循环范例"></a> for循环范例：</h4><p><strong>for循环实现阶乘</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入n："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line">num = num * i;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main()// <span class="keyword">for</span>循环 中最好不要在 循环体 内部 进行 变量再定义</span><br><span class="line">{</span><br><span class="line">int i = 0;</span><br><span class="line"><span class="keyword">for</span> (i = 0; i &lt; 10; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">i = 5;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>for循环实现1到10的阶乘和</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;<span class="comment">//1到10的阶乘</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;<span class="comment">//1到10的阶乘总和</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">{</span><br><span class="line">num *= i;</span><br><span class="line">sum += num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d次和为:%d\n"</span>, i, sum);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//时间复杂度低，更高效的写法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"总的和为:%d\n"</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>for循环输出1到100中3的倍数</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//写一个代码打印1-100之间所有3的倍数的数字</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main008</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//判断i是否为3的倍数</span></span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="字符操作语句"><a class="markdownIt-Anchor" href="#字符操作语句"></a> #字符操作语句</h3><blockquote><p><strong>getchar</strong><br>作用：read/print “abcde” from stdin<br>可能的输出:<br>1.End of File reached<br>2.字符</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">//getchar() 获取一个字符</span><br><span class="line">//EOF end of file 文件结束的标识</span><br><span class="line">//putchar() 输出一个字符</span><br><span class="line">//int ch = getchar();</span><br><span class="line">//putchar(ch);</span><br><span class="line"></span><br><span class="line">int ch = 0;</span><br><span class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">{</span><br><span class="line">putchar(ch);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">//ctrl + z 读取到EOF结束</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line">v</span><br><span class="line">v</span><br><span class="line">c</span><br><span class="line">c</span><br><span class="line">^Z</span><br><span class="line">D:\2_c++_项目\0_C_Project\01 分支和循环\Release\01 选择结构.exe (进程 39324)已退出，代码为 0。</span><br></pre></td></tr></tbody></table></figure><h4 id="范例密码程序"><a class="markdownIt-Anchor" href="#范例密码程序"></a> 范例：密码程序</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">char password[20] = { 0 };</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入密码："</span>);</span><br><span class="line">scanf(<span class="string">"%s"</span>, password);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请确认密码(Y/N)："</span>);</span><br><span class="line"></span><br><span class="line">//清除缓存区</span><br><span class="line">//getchar();//得到\n:回车</span><br><span class="line">//getchar();执行一次只能获取一个字符</span><br><span class="line"></span><br><span class="line">//清理缓冲区的多个字符</span><br><span class="line">int tmp = 0;</span><br><span class="line"><span class="keyword">while</span> ((tmp = getchar()) != <span class="string">'\n'</span>) //getchar函数得到的是字符，但是返回值是ASCII值等等，所以可以用整型变量获取</span><br><span class="line">{</span><br><span class="line">;//空操作</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int ch = getchar();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'Y'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"确认成功\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"确认失败\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>固定范围字符</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main07</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (ch &lt; <span class="string">'0'</span> || ch &gt;<span class="string">'9'</span>)<span class="comment">//这里为字符0和字符9</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="猜数字游戏"><a class="markdownIt-Anchor" href="#猜数字游戏"></a> 猜数字游戏</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个猜数字游戏</span></span><br><span class="line"><span class="comment">//1.自动产生一个1-100之间的数字</span></span><br><span class="line"><span class="comment">//2.猜数字</span></span><br><span class="line"><span class="comment">//a.猜对了，游戏结束</span></span><br><span class="line"><span class="comment">//b.猜错了，会告诉猜大了，还是猜小了，继续猜，直到猜对</span></span><br><span class="line"><span class="comment">//3.游戏可以一直玩，除非退出游戏</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">meun</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" ************************ \n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**************************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"******  猜数字游戏  ******\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****     1.开始      *****\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****     0.结束      *****\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**************************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" ************************ \n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Game</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//srand((unsigned int)time(NULL));//一个程序设置一次随机数种子函数就足够了，这里重复使用</span></span><br><span class="line"><span class="type">int</span> ret = rand() &amp; <span class="number">100</span> + <span class="number">1</span>;<span class="comment">//定义随机数，生成随机数的范围为0~32767,取模</span></span><br><span class="line"><span class="type">int</span> guess = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请猜数字："</span>);<span class="comment">//输入猜测的数字</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;guess);</span><br><span class="line"><span class="keyword">if</span> (guess &gt; ret)<span class="comment">//判断比较</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"猜大了\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; ret)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"猜小了\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" *         *\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"* *       * *\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"恭喜你猜对了！\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//退出循环</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));<span class="comment">//时间 - 时间戳</span></span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">meun();<span class="comment">//显示菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请选择:&gt;"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (input)<span class="comment">//输入选择</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;游戏开始&gt;\n"</span>);</span><br><span class="line">Game();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;游戏结束&gt;\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;输错了，请重新输入！&gt;\n"</span>);</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">while</span> (input); <span class="comment">//只要input不为0,程序继续执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="关机程序"><a class="markdownIt-Anchor" href="#关机程序"></a> 关机程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//关机</span></span><br><span class="line"><span class="comment">//c语言提供了一个函数:system() -执行系统命令的</span></span><br><span class="line"><span class="type">char</span> input[<span class="number">20</span>] = { <span class="number">0</span> }; <span class="comment">//存放输入的信息</span></span><br><span class="line">system(<span class="string">"shutdown -s -t 60"</span>);</span><br><span class="line">again:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请注意，你的电脑将在1分钟内关机，如果输入：我爱玩原神，就取消关机\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, input);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(input, <span class="string">"我爱玩原神"</span>) == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">system(<span class="string">"shutdown -a"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">goto</span> again;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="二分值法"><a class="markdownIt-Anchor" href="#二分值法"></a> 二分值法</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在一个有序数组中查找具体的某个数字n。</span></span><br><span class="line"><span class="comment">//算法：二分值法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = { <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> };</span><br><span class="line"><span class="type">int</span> k = <span class="number">7</span>;<span class="comment">//要查找的数字</span></span><br><span class="line"><span class="comment">//在arr这个有序的数组中查找k对应的值</span></span><br><span class="line"><span class="type">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> mid = left + right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; k)</span><br><span class="line">{</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">{</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"要查找的值对应数组中的下标[%d]\n"</span>, mid);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (left &gt; right)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组中没有待查找的值"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//当查找的范围在 6 ~ 7时，下标为5和6 ， 5+6/2 = 5 ，此时left +1 , mid = 6+6/2 =6 ，成功找到了7对应的下标</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符汇聚"><a class="markdownIt-Anchor" href="#字符汇聚"></a> 字符汇聚</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">"Welcome to bit!!!!!!"</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">"####################"</span>;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">strlen</span>(arr1) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;left &lt;= right; left++, right--)</span><br><span class="line">{</span><br><span class="line">arr2[left] = arr1[left];</span><br><span class="line">arr2[right] = arr1[right];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr2);</span><br><span class="line">Sleep(<span class="number">1000</span>);<span class="comment">//休眠一秒</span></span><br><span class="line">system(<span class="string">"cls"</span>);<span class="comment">//清空屏幕</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="密码验证程序"><a class="markdownIt-Anchor" href="#密码验证程序"></a> 密码验证程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span><span class="comment">//strlen strcmp</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>] = {<span class="number">0</span>};<span class="comment">//定义字符串 ， 假设密码为123456</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)<span class="comment">//限制三次循环</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入密码:&gt;"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, password);<span class="comment">//数组名本身就是地址</span></span><br><span class="line"><span class="comment">//if(password == "123456") //字符串不能用判断操作符</span></span><br><span class="line"><span class="comment">//if (strcmp(password, "123456")) //错误示例，if内要写条件“判断”，不然会直接执行！</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="built_in">strcmp</span>(password, <span class="string">"123456"</span>)) == <span class="number">0</span>)<span class="comment">//strcmp,依次比较ascii码值</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"密码正确\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"密码错误\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//printf("连续三次输入错误密码，程序退出..."); 直接写这一句，不正确，会导致输入正确密码后，跳出循环，也打印这句内容</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连续三次输入错误密码，程序退出...\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">1</span>, c = <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>] = { a,b,c };</span><br><span class="line"><span class="type">int</span> i, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原始数组为:"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变 a,b,c的值不能直接改变arr中元素的值,实际上在初始定义arr时将a,b,c的值传入了arr而不是变量本身</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"从高到低排序："</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d  "</span>, arr[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="求最大公约数"><a class="markdownIt-Anchor" href="#求最大公约数"></a> 求最大公约数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);<span class="comment">//24 18</span></span><br><span class="line"><span class="comment">//如果两个数分别为24和18，最大公约数只能在18及以下</span></span><br><span class="line"><span class="type">int</span> min = <span class="number">0</span>;<span class="comment">//判断两个数谁更小</span></span><br><span class="line"><span class="keyword">if</span> (m &gt; n)</span><br><span class="line">{</span><br><span class="line">min = n;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m &lt; n)</span><br><span class="line">{</span><br><span class="line">min = m;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">min = m;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="comment">//int maxgy = 0;//最大公约数</span></span><br><span class="line"><span class="comment">//for (i = 1; i &lt;= min; i++)</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="comment">//if (m % i || n % i == 0)</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="comment">//maxgy = i;</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////方法二</span></span><br><span class="line"><span class="comment">//while (1)</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="comment">//if (m % min == 0 &amp;&amp; n % min == 0)</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="comment">//printf("最大公约数是：%d\n", min);</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"><span class="comment">//min--;</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//辗转相除法</span></span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (t = m % n)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//t = m % n;</span></span><br><span class="line">m = n;</span><br><span class="line">n = t;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"最大公约数是：%d\n"</span>, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="闰年判断程序"><a class="markdownIt-Anchor" href="#闰年判断程序"></a> 闰年判断程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 1000~2000年 之间哪些年份是闰年</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> y, count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">1000</span>; y &lt;= <span class="number">2000</span>; y++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> ((y % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; y % <span class="number">4</span> == <span class="number">0</span>) || (y % <span class="number">400</span> == <span class="number">0</span>)) <span class="comment">//y % 100 == n  n不是非零即1 n是任意整数</span></span><br><span class="line"><span class="comment">//y % 100 == 0 &amp; y % 400 == 0</span></span><br><span class="line"><span class="comment">//y % 400 = 0 更简洁</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"闰年为：%d年\n"</span>, y);</span><br><span class="line">count++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"闰年个数为：%d"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="素数判断程序"><a class="markdownIt-Anchor" href="#素数判断程序"></a> 素数判断程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个代码, 打印100~200之间的素数</span></span><br><span class="line"><span class="comment">//素数-质数</span></span><br><span class="line"><span class="comment">//只能被1和他本身整除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码优化</span></span><br><span class="line"><span class="comment">//执行次数更少</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (j == i)<span class="comment">//如果i是素数,j会一直自加一直到等于i</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d为素数\n"</span>, i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个代码,打印100~200之间的素数</span></span><br><span class="line"><span class="comment">//素数-质数</span></span><br><span class="line"><span class="comment">//只能被1和他本身整除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码优化1：</span></span><br><span class="line"><span class="comment">//m=a*b;</span></span><br><span class="line"><span class="comment">//a和b中一定至少有一个数字是 &lt;=开平方m的</span></span><br><span class="line"><span class="comment">//16 = 2*8 = 4*4</span></span><br><span class="line"><span class="comment">//所以，大于开平方m的就不需要判断是否为m的因子，减少循环执行次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sqrt用于计算开平方的函数 -需要用到库函数 math.h</span></span><br><span class="line"><span class="comment">//减少了循环的执行次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码优化2：</span></span><br><span class="line"><span class="comment">//偶数不可能是素数</span></span><br><span class="line"><span class="comment">//修改for (i = 100; i &lt;= 200; i ++)为for (i = 101; i &lt;= 200; i += 2)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断i是不是质数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">101</span>; i &lt;= <span class="number">200</span>; i += <span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;<span class="comment">//定义一个参数，检测i是否能被 除了1和它本身的数 整除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= <span class="built_in">sqrt</span>(i); j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">flag = <span class="number">0</span>;<span class="comment">//如果能被2到i-1之间的整除，记录flag=0;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)<span class="comment">//不能被2到i-1之间的数整除</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d是质数\n"</span>, i);<span class="comment">//那么i就是质数</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C语言 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【5G】[1]基本术语-1</title>
      <link href="/posts/29791/"/>
      <url>/posts/29791/</url>
      
        <content type="html"><![CDATA[<h1 id="5g基本概念"><a class="markdownIt-Anchor" href="#5g基本概念"></a> 5G基本概念</h1><ul><li>接入网：所谓<mark>接入网是指骨干网络到用户终端之间的所有设备</mark>。其长度一般为几百米到几公里，因而被形象地称为"最后一公里"。由于骨干网一般采用光纤结构，传输速度快，因此，接入网便成为了整个网络系统的瓶颈。接入网的接入方式包括铜线（普通电话线）接入、光纤接入、光纤同轴电缆（有线电视电缆）混合接入和无线接入等几种方式。</li></ul><blockquote><p><strong>信道：信道就是信息传递的通道，是将信号进行传输、存储和处理的媒介</strong><br><strong>信令：信令就是通信两端，有一端在进行状态转移的时候，要发送信息（信令）来通知另外一端做状态同步，然后顺便捎带一些配置信息和控制信息等。所以通信信令的设计本质就是状态机设计，信令主要是用来通信连接的两侧做状态同步使用。</strong></p></blockquote><hr><blockquote><p><strong>接口：</strong><br><strong>1. 接口（硬件类接口）是指同一计算机不同功能层之间的通信规则称为接口。</strong><br><strong>2. 接口（软件类接口）是指对协定进行定义的引用类型。其他类型实现接口，以保证它们支持某些操作。接口指定必须由类提供的成员或实现它的其他接口。与类相似，接口可以包含方法、属性、索引器和事件作为成员。</strong></p></blockquote><ul><li>协议栈：<a href="https://blog.csdn.net/Hello_MyDream/article/details/85096070">什么是协议栈</a><br>协议栈是指网络中各层协议的总和，其形象的反映了一个网络中文件传输的过程，由上层协议到底层协议，再由底层协议到上层协议。</li></ul><p>场景与技术需求：</p><ol><li>MMTC（大规模链接）：物联网、远程抄表、路灯</li><li>EM88（大带宽）：4K、8K视频、VR、AR</li><li>URLLC（低延时、超可靠）：车联网、远程医疗</li></ol><p>组网部署的特点：</p><ul><li>NSA:非独立组网，4G和5G并存</li><li>SA:独立组网（支持URLLC）</li></ul><p>5G接入网：口空、无线基站部分<br>网元：功能模块</p><ul><li>UDM</li><li>AUSF</li><li>UPF<br>5G协议栈和协议栈的接口：网元之间的接口<br>5G系统参数：测量参数、寻呼</li></ul><p>PS：频率高、波长短</p><p>2G:救援通信</p><p>5G物理信道和信号：</p><p>6G移动通信：</p><ol><li>发展背景</li><li>性能指标</li><li>发展趋势、关键技术</li><li>基本概念</li><li>网络安全</li></ol><p>IPV4：<br>IPV6：</p><p>白皮书：</p><p>5G+垂直行业应用：</p><ol><li>车联网</li></ol><ul><li>DSRC、IEEE</li><li>C-V2X、3GPP</li></ul><ol start="2"><li>人工智能</li><li>物联网</li><li>边缘计算</li><li>元宇宙</li><li>区块链</li></ol><h1 id="5g网络架构基本概念名词解释"><a class="markdownIt-Anchor" href="#5g网络架构基本概念名词解释"></a> 5G网络架构基本概念（名词解释）</h1><p>5GC：5G核心网，中枢系统；处理+分配承载网的数据（路由交换）</p><p>NG-RAN：接入网，收集终端数据</p><p>UE：终端</p><p>网元是一个独立的功能实体</p><p>eNB：4G基站</p><p>ng-eNB; 增强型4G基站，连接5G核心网</p><p>gNB：5G基站</p><p>en-gNB:与4G核心网连接的5G基站</p><p>AMF: 接入性移动管理</p><p>SMF：会话管理功能</p><p>UDM：统一数据管理</p><p>AUSF:  认证服务器功能</p><p>UPF:  用户面功能</p><p>PCF：策略控制功能</p><p>NRF：网络储存功能</p><p>NEF：网络开放功能</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 大唐杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大唐杯 </tag>
            
            <tag> 5G </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【51单片机】DS18B20</title>
      <link href="/posts/18830/"/>
      <url>/posts/18830/</url>
      
        <content type="html"><![CDATA[<p>2024.1.29更新</p><p>2024.3.2</p><h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><blockquote><p>所用外设：</p></blockquote><blockquote><p><mark>DS18B20温度传感器（OneWire协议）</mark></p></blockquote><h2 id="前置概念"><a class="markdownIt-Anchor" href="#前置概念"></a> #前置概念</h2><h3 id="一-onewire单总线协议"><a class="markdownIt-Anchor" href="#一-onewire单总线协议"></a> 一、OneWire（单总线）协议</h3><p>•单总线（1-Wire BUS）是由Dallas公司开发的一种通用数据总线</p><p>•一根通信线：DQ</p><p>•异步、半双工</p><p>•单总线只需要一根通信线即可实现数据的双向传输，当采用寄生供电时，还可以省去设备的VDD线路，此时，供电加通信只需要DQ和GND两根线</p><h3 id="二-单总线电路规范"><a class="markdownIt-Anchor" href="#二-单总线电路规范"></a> 二、单总线电路规范</h3><p>•设备的DQ均要配置成开漏输出模式</p><p>•DQ添加一个上拉电阻，阻值一般为4.7KΩ左右</p><p>•若此总线的从机采取寄生供电，则主机还应配一个强上拉输出电路</p><img src="/posts/18830/image-20240302232447437.png" class="" title="image-20240302232447437"><h3 id="三-单总线的时序结构"><a class="markdownIt-Anchor" href="#三-单总线的时序结构"></a> 三、单总线的时序结构</h3><img src="/posts/18830/image-20240302232633388.png" class="" title="image-20240302232633388"><img src="/posts/18830/image-20240302232648244.png" class="" title="image-20240302232648244"><img src="/posts/18830/image-20240302232700200.png" class="" title="image-20240302232700200"><img src="/posts/18830/image-20240302232708528.png" class="" title="image-20240302232708528"><hr><h2 id="ds18b20介绍"><a class="markdownIt-Anchor" href="#ds18b20介绍"></a> DS18B20介绍</h2><p>•DS18B20是一种常见的数字温度传感器，其控制命令和数据都是以数字信号的方式输入输出，相比较于模拟温度传感器，具有功能强大、硬件简单、易扩展、抗干扰性强等特点</p><p>•测温范围：-55°C 到 +125°C</p><p>•通信接口：1-Wire（单总线）</p><p>•其它特征：可形成总线结构、内置温度报警功能、可寄生供电</p><h3 id="一-ds18b20温度存储格式"><a class="markdownIt-Anchor" href="#一-ds18b20温度存储格式"></a> 一、DS18B20温度存储格式</h3><img src="/posts/18830/1c9c55dd044b4cdb9e2c305088ccec28.png" class="" title="在这里插入图片描述"><blockquote><p><strong>MS BYTE和LS BYTE两个字节中BIT的解释：<br>BIT16~BIT11作为符号位，表示温度的正负<br>BIT10~BIT4存储温度的整数部分<br>BIT3~BIT0存储温度的小数部分（<mark>精度</mark>），BIT0 ‘1’对应 "0.0625"</strong></p></blockquote><h3 id="二-ds18b20时序"><a class="markdownIt-Anchor" href="#二-ds18b20时序"></a> 二、DS18B20时序</h3><img src="/posts/18830/image-20240302232951493.png" class="" title="image-20240302232951493"><img src="/posts/18830/image-20240302232958679.png" class="" title="image-20240302232958679"><h3 id="三-程序编写"><a class="markdownIt-Anchor" href="#三-程序编写"></a> 三、程序编写</h3><p>首先写第一个函数，用于初始化，其中添加Askbit，在LCD1602上显示一个数值，观察初始化函数是否有效，即从机是否响应。</p><p>首先编写好单总线的初始化程序，如果代码正确，根据单总线的通信协议，从机会发送一个应答信号（拉低总线）。<br>进行应答测试，通过LCD1602观察应答位，检测代码是否有效</p><h2 id="-code0-"><a class="markdownIt-Anchor" href="#-code0-"></a> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"></span><br><span class="line">sbit OneWire_DQ=P3^7;//通信口</span><br><span class="line"></span><br><span class="line">unsigned char OneWire_Init(void)</span><br><span class="line">{</span><br><span class="line">unsigned char i,Askbit;</span><br><span class="line">OneWire_DQ=1;</span><br><span class="line">OneWire_DQ=0;</span><br><span class="line">i = 227;<span class="keyword">while</span> (--i);//500um</span><br><span class="line">OneWire_DQ=1;</span><br><span class="line">i = 29;<span class="keyword">while</span> (--i);//70um</span><br><span class="line">Askbit = OneWire_DQ;</span><br><span class="line"><span class="built_in">return</span> Askbit;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></h2><h2 id="一-ds18b20温度读取"><a class="markdownIt-Anchor" href="#一-ds18b20温度读取"></a> 一、DS18B20温度读取</h2><p>将程序下载到单片机上，运行<br>如下为main.c文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "LCD1602.h"</span></span><br><span class="line"><span class="comment">#include "DS18B20.h"</span></span><br><span class="line"><span class="comment">#include "OneWire.h"</span></span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">LCD_ShowString(1,1,<span class="string">"Temperture:"</span>);</span><br><span class="line">DS18B20_Start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(1)</span><br><span class="line">{</span><br><span class="line">unsigned int temp=DS18B20_Read()*10000;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;0)</span><br><span class="line">{</span><br><span class="line">LCD_ShowString(2,1,<span class="string">"+"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(temp&lt;0)</span><br><span class="line">{</span><br><span class="line">LCD_ShowString(2,1,<span class="string">"-"</span>);</span><br><span class="line">}</span><br><span class="line">LCD_ShowNum(2,2,temp/10000,4);</span><br><span class="line">LCD_ShowNum(2,6,temp%10000,4);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>结果异常：LCD1602第二行显示不正确数据/显示-000.0625<br>分析：<br>main.c中存在语法错误<br>OneWire.c DS18B20.c中的函数时序定义有误</p><img src="/posts/18830/d0595a62616c4d33a0f28a153c487761.jpeg" class="" title="请添加图片描述"></blockquote><p>对main.c进行更改</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "Delay.h"</span></span><br><span class="line"><span class="comment">#include "LCD1602.h"</span></span><br><span class="line"><span class="comment">#include "DS18B20.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span> T;</span><br><span class="line">void <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">DS18B20_Convert();</span><br><span class="line">Delay(1000);</span><br><span class="line">LCD_Init();</span><br><span class="line">LCD_ShowString(1,1,<span class="string">"Temperature:"</span>);</span><br><span class="line"><span class="keyword">while</span>(1)</span><br><span class="line">{</span><br><span class="line">DS18B20_Convert();</span><br><span class="line">T=DS18B20_Read();</span><br><span class="line"><span class="keyword">if</span>(T&lt;0)</span><br><span class="line">{</span><br><span class="line">LCD_ShowChar(2,1,<span class="string">'-'</span>);</span><br><span class="line">T=-T;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LCD_ShowChar(2,1,<span class="string">'+'</span>);</span><br><span class="line">}</span><br><span class="line">LCD_ShowNum(2,2,T,3);</span><br><span class="line">LCD_ShowChar(2,5,<span class="string">'.'</span>);</span><br><span class="line">LCD_ShowNum(2,6,(unsigned long)(T*10000)%10000,4);//强制类型转换</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>OneWire.c 错误分析：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"></span><br><span class="line">sbit OneWire_DQ=P3^7;//通信口</span><br><span class="line"></span><br><span class="line">void OneWire_Init(void)</span><br><span class="line">{</span><br><span class="line">unsigned char i,AskBit;</span><br><span class="line">OneWire_DQ=1;</span><br><span class="line">OneWire_DQ=0;</span><br><span class="line">i = 227;<span class="keyword">while</span> (--i);//500um</span><br><span class="line">OneWire_DQ=1;//释放总线</span><br><span class="line">i = 29;<span class="keyword">while</span> (--i);//70um</span><br><span class="line">AskBit=OneWire_DQ;//主机判断从机是否发送应答</span><br><span class="line">i = 227;<span class="keyword">while</span> (--i);//500um,要根据时序图构造代码</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void OneWire_SendBit(unsigned char Bit)//发送一位</span><br><span class="line">{</span><br><span class="line">unsigned char i;</span><br><span class="line">OneWire_DQ=1;</span><br><span class="line">i = 2;<span class="keyword">while</span> (--i);//10um</span><br><span class="line">OneWire_DQ=Bit;</span><br><span class="line">i = 22;<span class="keyword">while</span> (--i);//54um</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">unsigned char OneWire_ReadBit(void)//接收一位</span><br><span class="line">{</span><br><span class="line">unsigned char i,Bit;</span><br><span class="line">OneWire_DQ=0;</span><br><span class="line">i = 2;<span class="keyword">while</span> (--i);//10um</span><br><span class="line">OneWire_DQ=1;//释放总线</span><br><span class="line">i = 2;<span class="keyword">while</span> (--i);//10um</span><br><span class="line">Bit=OneWire_DQ;</span><br><span class="line">i = 22;<span class="keyword">while</span> (--i);//54um</span><br><span class="line"><span class="built_in">return</span> Bit;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void OneWire_WriteByte(int Byte)</span><br><span class="line">{</span><br><span class="line">unsigned int i;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;8;i++)</span><br><span class="line">{</span><br><span class="line">OneWire_SendBit(Byte&amp;(0x01&lt;&lt;<span class="string">i));//低位在前</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unsigned char OneWire_ReadByte()</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">unsigned int i</span>;</span><br><span class="line">unsigned int Byte;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;8;i++)</span><br><span class="line">{</span><br><span class="line">Byte=OneWire_ReadBit()|(0x01&lt;&lt;<span class="string">i);//低位在前</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">return Byte;</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure><p><mark>对OneWire.c进行更改</mark></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"></span><br><span class="line">sbit OneWire_DQ=P3^7;//通信口</span><br><span class="line"></span><br><span class="line">unsigned char OneWire_Init(void)</span><br><span class="line">{</span><br><span class="line">unsigned char i,AskBit;</span><br><span class="line">OneWire_DQ=1;</span><br><span class="line">OneWire_DQ=0;</span><br><span class="line">i = 247;<span class="keyword">while</span> (--i);//500us</span><br><span class="line">OneWire_DQ=1;//释放总线</span><br><span class="line">i = 29;<span class="keyword">while</span> (--i);//70us</span><br><span class="line">AskBit=OneWire_DQ;//主机判断从机是否发送应答</span><br><span class="line">i = 247;<span class="keyword">while</span> (--i);//500um,要根据时序图构造代码</span><br><span class="line"><span class="built_in">return</span> AskBit;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void OneWire_SendBit(unsigned char Bit)//发送一位</span><br><span class="line">{</span><br><span class="line">unsigned char i;</span><br><span class="line">OneWire_DQ=0;//错误，应为0</span><br><span class="line">i = 2;<span class="keyword">while</span> (--i);//10us</span><br><span class="line">OneWire_DQ=Bit;</span><br><span class="line">i = 20;<span class="keyword">while</span> (--i);//50us</span><br><span class="line">OneWire_DQ=1;//遗漏</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">unsigned char OneWire_ReadBit(void)//接收一位</span><br><span class="line">{</span><br><span class="line">unsigned char i,Bit;</span><br><span class="line">OneWire_DQ=0;</span><br><span class="line">i = 1;<span class="keyword">while</span> (--i);//8us</span><br><span class="line">OneWire_DQ=1;//释放总线</span><br><span class="line">i = 1;<span class="keyword">while</span> (--i);//8us</span><br><span class="line">Bit=OneWire_DQ;</span><br><span class="line">i = 20;<span class="keyword">while</span> (--i);//50us</span><br><span class="line"><span class="built_in">return</span> Bit;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void OneWire_WriteByte(unsigned char Byte)</span><br><span class="line">{</span><br><span class="line">unsigned char i;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;8;i++)</span><br><span class="line">{</span><br><span class="line">OneWire_SendBit(Byte&amp;(0x01&lt;&lt;<span class="string">i));//低位在前</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unsigned char OneWire_ReadByte(void)</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">unsigned char i</span>;</span><br><span class="line">unsigned char Byte=0x00;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;8;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(OneWire_ReadBit()){Byte|=(0x01&lt;&lt;<span class="string">i);}//低位在前</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">return Byte;</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><p><strong>结论：OneWire_SendBit函数对总线的电平处理不正确</strong><br>void OneWire_SendBit(unsigned char Bit)//发送一位<br>{<br>unsigned char i;<br>OneWire_DQ=1;//<mark>此处错误，应为0</mark><br>i = 2;while (–i);//10us<br>OneWire_DQ=Bit;<br>i = 20;while (–i);//50us<br>OneWire_DQ=1;//遗漏<br>}</p><h2 id="二-ds18b20温度报警器"><a class="markdownIt-Anchor" href="#二-ds18b20温度报警器"></a> 二、DS18B20温度报警器</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"><span class="comment">#include "Delay.h"</span></span><br><span class="line"><span class="comment">#include "LCD1602.h"</span></span><br><span class="line"><span class="comment">#include "DS18B20.h"</span></span><br><span class="line"><span class="comment">#include "AT24C02.h"</span></span><br><span class="line"><span class="comment">#include "I2C.h"</span></span><br><span class="line"><span class="comment">#include "Key.h"</span></span><br><span class="line"><span class="comment">#include "Timer0.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//mark</span><br><span class="line">//在编写单片机程序时，要考虑到运行的高效性，定义变量的数据类型，优先选择较低内存占用的类型</span><br><span class="line"><span class="built_in">float</span> T;</span><br><span class="line"><span class="built_in">float</span> Tshow;</span><br><span class="line">char Thigh,Tlow;</span><br><span class="line">unsigned char KeyNum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">main</span></span>()</span><br><span class="line">{</span><br><span class="line">Thigh=AT24C02_ReadByte(0);//每次开机，读取存储器中的数据</span><br><span class="line">Tlow=AT24C02_ReadByte(1);</span><br><span class="line"></span><br><span class="line">DS18B20_Convert();//温度装载，防止T第一次读取到的是默认值20，消除多余现象</span><br><span class="line">Delay(1000);</span><br><span class="line"></span><br><span class="line">LCD_Init();</span><br><span class="line">Timer0_Init();</span><br><span class="line">LCD_ShowString(1,1,<span class="string">"T:"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(1)</span><br><span class="line">{</span><br><span class="line">DS18B20_Convert();//温度装载</span><br><span class="line">T=DS18B20_Read();</span><br><span class="line"><span class="keyword">if</span>(T&lt;0)</span><br><span class="line">{</span><br><span class="line">LCD_ShowChar(1,3,<span class="string">'-'</span>);</span><br><span class="line">//T=-T,这里T=-T的话，进行温度预置判断有问题，所以再定义一个变量Tshow</span><br><span class="line">Tshow=-T;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LCD_ShowChar(1,3,<span class="string">'+'</span>);</span><br><span class="line">Tshow=T;</span><br><span class="line">}</span><br><span class="line">LCD_ShowNum(1,4,Tshow,3);</span><br><span class="line">LCD_ShowChar(1,7,<span class="string">'.'</span>);</span><br><span class="line">LCD_ShowNum(1,8,(unsigned char)(Tshow*100)%100,2);</span><br><span class="line"></span><br><span class="line">//温度阈值控制</span><br><span class="line">KeyNum=Key();</span><br><span class="line"><span class="keyword">if</span>(KeyNum)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(KeyNum==1)</span><br><span class="line">{</span><br><span class="line">Thigh++;</span><br><span class="line"><span class="keyword">if</span>(Thigh&gt;125)</span><br><span class="line">{</span><br><span class="line">Thigh--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(KeyNum==2)</span><br><span class="line">{</span><br><span class="line">Thigh--;</span><br><span class="line"><span class="keyword">if</span>(Thigh&lt;=Tlow)</span><br><span class="line">{</span><br><span class="line">Thigh++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(KeyNum==3)</span><br><span class="line">{</span><br><span class="line">Tlow++;</span><br><span class="line"><span class="keyword">if</span>(Tlow&gt;=Thigh)</span><br><span class="line">{</span><br><span class="line">Tlow--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(KeyNum==4)</span><br><span class="line">{</span><br><span class="line">Tlow--;</span><br><span class="line"><span class="keyword">if</span>(Tlow&lt;-125)</span><br><span class="line">{</span><br><span class="line">Tlow++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">AT24C02_WriteByte(0,Thigh);</span><br><span class="line">Delay(5);</span><br><span class="line">AT24C02_WriteByte(1,Tlow);</span><br><span class="line">Delay(5);</span><br><span class="line">}</span><br><span class="line">//Thigh=AT24C02_ReadByte(1);</span><br><span class="line">    //Tlow=AT24C02_ReadByte(2);错误写法，会导致出现短暂的Thigh或者Tlow被赋值0,AT24C02没来得及读取数据就赋值给变量</span><br><span class="line">LCD_ShowString(2,1,<span class="string">"TH:"</span>);</span><br><span class="line">LCD_ShowString(2,10,<span class="string">"TL:"</span>);</span><br><span class="line">LCD_ShowSignedNum(2,4,Thigh,3);//显示带符号的数字</span><br><span class="line">LCD_ShowSignedNum(2,13,Tlow,3);</span><br><span class="line"></span><br><span class="line">//温度报警，LCD1602显示</span><br><span class="line"><span class="keyword">if</span>(T&gt;Thigh)</span><br><span class="line">{</span><br><span class="line">LCD_ShowString(1,13,<span class="string">"OV:H"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(T&lt;Tlow)</span><br><span class="line">{</span><br><span class="line">LCD_ShowString(1,13,<span class="string">"OV:L"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LCD_ShowString(1,13,<span class="string">"    "</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Timer0_Routine() interrupt 1 //中断子程序</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">static unsigned int T0Count1;//静态局部变量，保证退出函数之后不销毁</span><br><span class="line">TL0 = 0x66;//设置定时初始值</span><br><span class="line">TH0 = 0xFC;//设置定时初始值</span><br><span class="line">T0Count1++;//每次进入中断子程序，秒控制器自加一</span><br><span class="line"><span class="keyword">if</span>(T0Count1&gt;=20)</span><br><span class="line">{</span><br><span class="line">T0Count1=0;</span><br><span class="line">Key_Loop();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>实验现象1：加入定时器扫描按键后，按下按键不影响温度的读取和显示，但是LCD1602上显示的温度数值会出现闪烁的状态<br>分析：每隔20ms进入中断程序，对按键进行扫描检测，但是，单总线上对数据的发送和接受，部分过程时间在几十us，远远小于20ms,中断程序打断了温度的正常读取<br>解决方案：每个OneWire的读写操作加入定时器的关闭动作，这样不会对OneWire的读写操作产生影响</strong><br><mark>如下:</mark></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;REGX52.H&gt;</span></span><br><span class="line"></span><br><span class="line">sbit OneWire_DQ=P3^7;//通信口</span><br><span class="line"></span><br><span class="line">unsigned char OneWire_Init(void)</span><br><span class="line">{</span><br><span class="line">unsigned char i,AskBit;</span><br><span class="line">EA=0;</span><br><span class="line">OneWire_DQ=1;</span><br><span class="line">OneWire_DQ=0;</span><br><span class="line">i = 247;<span class="keyword">while</span> (--i);//500us</span><br><span class="line">OneWire_DQ=1;//释放总线</span><br><span class="line">i = 29;<span class="keyword">while</span> (--i);//70us</span><br><span class="line">AskBit=OneWire_DQ;//主机判断从机是否发送应答</span><br><span class="line">i = 247;<span class="keyword">while</span> (--i);//500um,要根据时序图构造代码</span><br><span class="line">EA=1;</span><br><span class="line"><span class="built_in">return</span> AskBit;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void OneWire_SendBit(unsigned char Bit)//发送一位</span><br><span class="line">{</span><br><span class="line">unsigned char i;</span><br><span class="line">EA=0;</span><br><span class="line">OneWire_DQ=0;//错误，应为0</span><br><span class="line">i = 2;<span class="keyword">while</span> (--i);//10us</span><br><span class="line">OneWire_DQ=Bit;</span><br><span class="line">i = 20;<span class="keyword">while</span> (--i);//50us</span><br><span class="line">OneWire_DQ=1;//遗漏</span><br><span class="line">EA=1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">unsigned char OneWire_ReadBit(void)//接收一位</span><br><span class="line">{</span><br><span class="line">unsigned char i,Bit;</span><br><span class="line">EA=0;</span><br><span class="line">OneWire_DQ=0;</span><br><span class="line">i = 1;<span class="keyword">while</span> (--i);//8us</span><br><span class="line">OneWire_DQ=1;//释放总线</span><br><span class="line">i = 1;<span class="keyword">while</span> (--i);//8us</span><br><span class="line">Bit=OneWire_DQ;</span><br><span class="line">i = 20;<span class="keyword">while</span> (--i);//50us</span><br><span class="line">EA=1;</span><br><span class="line"><span class="built_in">return</span> Bit;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void OneWire_WriteByte(unsigned char Byte)</span><br><span class="line">{</span><br><span class="line">unsigned char i;</span><br><span class="line">EA=0;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;8;i++)</span><br><span class="line">{</span><br><span class="line">OneWire_SendBit(Byte&amp;(0x01&lt;&lt;<span class="string">i));//低位在前</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">EA=1;</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unsigned char OneWire_ReadByte(void)</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">unsigned char i</span>;</span><br><span class="line">unsigned char Byte=0x00;</span><br><span class="line">EA=0;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;8;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(OneWire_ReadBit()){Byte|=(0x01&lt;&lt;<span class="string">i);}//低位在前</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">EA=1;</span></span><br><span class="line"><span class="string">return Byte;</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><p><mark>缺点：对定时器有较大影响，需要区分任务的优先级，这里我们只有对温度进行处理的任务，一但存在多个任务，比如这里同时在数码管上显示一个时钟，使用单总线的局限性会非常大</mark><br><mark>IIC通信方式一般比单总线广泛地多</mark><br><mark>思考：IIC和单总线地区别</mark></p><hr><h1 id="蓝桥杯stc15拓展"><a class="markdownIt-Anchor" href="#蓝桥杯stc15拓展"></a> 蓝桥杯(STC15)拓展</h1><p><strong>OneWire底层</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*# 单总线代码片段说明</span></span><br><span class="line"><span class="comment">1. 本文件夹中提供的驱动代码供参赛选手完成程序设计参考。</span></span><br><span class="line"><span class="comment">2. 参赛选手可以自行编写相关代码或以该代码为基础，根据所选单片机类型、运行速度和试题</span></span><br><span class="line"><span class="comment">中对单片机时钟频率的要求，进行代码调试和修改。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;onewire.h&gt;</span></span></span><br><span class="line">sbit DQ= P1^<span class="number">4</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_OneWire</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> t)</span>  </span><br><span class="line">{</span><br><span class="line">t *= <span class="number">12</span>;</span><br><span class="line"><span class="keyword">while</span>(t--);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_DS18B20</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> dat)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">DQ = <span class="number">0</span>;</span><br><span class="line">DQ = dat&amp;<span class="number">0x01</span>;</span><br><span class="line">Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">DQ = <span class="number">1</span>;</span><br><span class="line">dat &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Read_DS18B20</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dat;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">DQ = <span class="number">0</span>;</span><br><span class="line">dat &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">DQ = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(DQ)</span><br><span class="line">{</span><br><span class="line">dat |= <span class="number">0x80</span>;</span><br><span class="line">}    </span><br><span class="line">Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dat;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">bit <span class="title function_">init_ds18b20</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">  bit initflag = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  DQ = <span class="number">1</span>;</span><br><span class="line">  Delay_OneWire(<span class="number">12</span>);</span><br><span class="line">  DQ = <span class="number">0</span>;</span><br><span class="line">  Delay_OneWire(<span class="number">80</span>);</span><br><span class="line">  DQ = <span class="number">1</span>;</span><br><span class="line">  Delay_OneWire(<span class="number">10</span>); </span><br><span class="line">    initflag = DQ;     </span><br><span class="line">  Delay_OneWire(<span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> initflag;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*基于底层编写*/</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">ds18b20_read</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> low,high;<span class="comment">//高八位，低八位，DS18B20温度数据是十六位二进制</span></span><br><span class="line">init_ds18b20();<span class="comment">//ds18b20初始化时序</span></span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>);<span class="comment">//ds18b20跳过rom指令</span></span><br><span class="line">Write_DS18B20(<span class="number">0x44</span>);<span class="comment">//ds18b20开始温度转换</span></span><br><span class="line">    </span><br><span class="line">init_ds18b20();<span class="comment">//ds18b20初始化时序</span></span><br><span class="line">Write_DS18B20(<span class="number">0xcc</span>);<span class="comment">//ds18b20跳过rom指令</span></span><br><span class="line">Write_DS18B20(<span class="number">0xbe</span>);<span class="comment">//ds18b20开始温度读取</span></span><br><span class="line">low=Read_DS18B20();</span><br><span class="line">high=Read_DS18B20();</span><br><span class="line"><span class="keyword">return</span>((high &lt;&lt; <span class="number">8</span> )| low) /<span class="number">16.0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="主模块ds18b20模拟题"><a class="markdownIt-Anchor" href="#主模块ds18b20模拟题"></a> 主模块(DS18B20模拟题)</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件引用</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Key.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Nixie.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Timer0.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;onewire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iic.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Buf[<span class="number">8</span>]={<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>};<span class="comment">//数码管显示数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Pos;<span class="comment">//数码管数据数组位下标</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Point[<span class="number">8</span>]={<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//数码管每一段的“点”数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Nixie_Disp_Mode;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key;<span class="comment">//键值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key_Up,Key_Down,Key_Val,Key_Old;<span class="comment">//按键扫描变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ucLED[<span class="number">8</span>]={<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};<span class="comment">//LED显示数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Nixie_Timer;<span class="comment">//数码管定时更新</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Key_Timer;<span class="comment">//按键定时扫描</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> Tempture=<span class="number">0</span>;<span class="comment">//实时温度</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Tempture_Disp=<span class="number">25</span>;<span class="comment">//温度暂存设置参数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Tempture_Control=<span class="number">25</span>;<span class="comment">//温度阈值参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> DAC_Output=<span class="number">3.25</span>;<span class="comment">//DAC输出电压</span></span><br><span class="line">bit DAC_Output_MODE;<span class="comment">//DAC输出模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*按键处理函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Key_Timer) <span class="keyword">return</span>;<span class="comment">//Key_Timer=0时执行下面的语句</span></span><br><span class="line">Key_Timer=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//按键扫描部分//</span></span><br><span class="line">Key_Val=Key_Read();<span class="comment">//读取键值</span></span><br><span class="line">Key_Down=Key_Val &amp; (Key_Old ^ Key_Val);<span class="comment">//读取上升沿键值</span></span><br><span class="line">Key_Up=~Key_Val &amp; (Key_Old ^ Key_Val);<span class="comment">//读取下降沿键值</span></span><br><span class="line">Key_Old=Key_Val;<span class="comment">//保存键值（旧键值）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(Key_Down) </span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">if</span>(Nixie_Disp_Mode==<span class="number">0</span>){Tempture_Disp=Tempture_Control;}<span class="comment">//上一个界面为实时温度显示界面时</span></span><br><span class="line"><span class="keyword">if</span>(Nixie_Disp_Mode==<span class="number">1</span>){Tempture_Control=Tempture_Disp;}<span class="comment">//上一个界面为温度阈值设置显示界面时</span></span><br><span class="line"><span class="keyword">if</span>(++Nixie_Disp_Mode==<span class="number">3</span>){Nixie_Disp_Mode=<span class="number">0</span>;}<span class="comment">//模式切换 0~模式1 1~模式2</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">DAC_Output_MODE^=<span class="number">1</span>;<span class="comment">//DAC输出模式切换</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="keyword">if</span>(Nixie_Disp_Mode==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(++Tempture_Disp==<span class="number">100</span>){Tempture_Disp=<span class="number">0</span>;}<span class="comment">//前置+1,判断条件刚好为溢出值</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">if</span>(Nixie_Disp_Mode==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(--Tempture_Disp==<span class="number">255</span>){Tempture_Disp=<span class="number">99</span>;}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*信息处理函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Nixie_Timer) <span class="keyword">return</span>;<span class="comment">//Nixie_Timer=0时执行下面的语句</span></span><br><span class="line">Nixie_Timer=<span class="number">1</span>;</span><br><span class="line">Tempture=ds18b20_read();<span class="comment">//实时温度读取</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(Nixie_Disp_Mode)<span class="comment">//数码管多模式显示</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">Nixie_Buf[<span class="number">0</span>]=<span class="number">13</span>;</span><br><span class="line">Nixie_Buf[<span class="number">1</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">2</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">3</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">4</span>]=(<span class="type">unsigned</span> <span class="type">char</span>)Tempture/<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">5</span>]=(<span class="type">unsigned</span> <span class="type">char</span>)Tempture%<span class="number">10</span>;</span><br><span class="line">Nixie_Point[<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">Nixie_Buf[<span class="number">6</span>]=(<span class="type">unsigned</span> <span class="type">int</span>)(Tempture*<span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">7</span>]=(<span class="type">unsigned</span> <span class="type">int</span>)(Tempture*<span class="number">100</span>)%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">Nixie_Buf[<span class="number">0</span>]=<span class="number">17</span>;</span><br><span class="line">Nixie_Buf[<span class="number">1</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">2</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">3</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">4</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">5</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Point[<span class="number">5</span>]=<span class="number">0</span>;</span><br><span class="line">Nixie_Buf[<span class="number">6</span>]=Tempture_Disp/<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">7</span>]=Tempture_Disp%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">Nixie_Buf[<span class="number">0</span>]=<span class="number">11</span>;</span><br><span class="line">Nixie_Buf[<span class="number">1</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">2</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">3</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">4</span>]=<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">5</span>]=(<span class="type">unsigned</span> <span class="type">char</span>)DAC_Output;</span><br><span class="line">Nixie_Point[<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">Nixie_Buf[<span class="number">6</span>]=(<span class="type">unsigned</span> <span class="type">char</span>)(DAC_Output*<span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">Nixie_Buf[<span class="number">7</span>]=(<span class="type">unsigned</span> <span class="type">int</span>)(DAC_Output*<span class="number">100</span>)%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其他显示函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="comment">/*实时输出DAC电压*/</span></span><br><span class="line">DA_Write((<span class="type">unsigned</span> <span class="type">char</span>)(<span class="number">51</span>*DAC_Output));<span class="comment">//DAC输出</span></span><br><span class="line"><span class="keyword">if</span>(DAC_Output_MODE==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Tempture&lt;Tempture_Control)</span><br><span class="line">{</span><br><span class="line">DAC_Output=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">DAC_Output=<span class="number">5.0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Tempture&lt;<span class="number">20</span>)</span><br><span class="line">{</span><br><span class="line">DAC_Output=<span class="number">1.0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(Tempture&gt;<span class="number">40</span>)</span><br><span class="line">{</span><br><span class="line">DAC_Output=<span class="number">4.0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">DAC_Output=<span class="number">0.15</span>*(Tempture<span class="number">-20</span>)+<span class="number">1.0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ucLED[<span class="number">0</span>]=~DAC_Output_MODE;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">{</span><br><span class="line">ucLED[i+<span class="number">1</span>]= (i==Nixie_Disp_Mode);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay750ms</span><span class="params">()</span> <span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">i = <span class="number">35</span>;</span><br><span class="line">j = <span class="number">51</span>;</span><br><span class="line">k = <span class="number">182</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--k)</span><br><span class="line">;</span><br><span class="line">} <span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">Tempture=ds18b20_read();<span class="comment">//ds18b20第一次默认读取的是85</span></span><br><span class="line">Delay750ms();</span><br><span class="line">Timer0_Init();<span class="comment">//定时器初始化</span></span><br><span class="line">System_Init();<span class="comment">//系统板初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//循环执行任务</span></span><br><span class="line">{</span><br><span class="line">Key_Proc();</span><br><span class="line">Nixie_Proc();</span><br><span class="line">LED_Proc();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Server</span><span class="params">(<span class="type">void</span>)</span>  interrupt 1<span class="comment">//中断服务程序</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(++Nixie_Timer==<span class="number">300</span>){Nixie_Timer=<span class="number">0</span>;}<span class="comment">//300ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Key_Timer==<span class="number">10</span>){Key_Timer=<span class="number">0</span>;}<span class="comment">//10ms定时长度</span></span><br><span class="line"><span class="keyword">if</span>(++Nixie_Pos==<span class="number">8</span>){Nixie_Pos=<span class="number">0</span>;}<span class="comment">//数码管动态显示</span></span><br><span class="line">Nixie_Disp(Nixie_Pos,Nixie_Buf[Nixie_Pos],Nixie_Point[Nixie_Pos]);<span class="comment">//数码管动态显示</span></span><br><span class="line">LED_Disp(Nixie_Pos,ucLED[Nixie_Pos]);<span class="comment">//LED循环“值”检测，发生变化则对LED相关IO发生电平变化</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数字电路】课程设计</title>
      <link href="/posts/24146/"/>
      <url>/posts/24146/</url>
      
        <content type="html"><![CDATA[<h2 id="设计题目-智能消防系统"><a class="markdownIt-Anchor" href="#设计题目-智能消防系统"></a> 设计题目： 智能消防系统</h2><p><strong>题目来源： 2023 年全国大学生电子设计竞赛试题试题 G 题</strong></p><h3 id="一-任务"><a class="markdownIt-Anchor" href="#一-任务"></a> 一、 任务：</h3><ul><li>设计一套智能消防系统， 采用 FPGA 实验板。 防区区域为 40dm× 48dm，</li><li>可能出现的火源如图所示的 1、 2、 3、 4。 当消防车接收到火源地点位置信息即刻前往熄灭火源， 消防工作完成时间越短越好。 其中白色部分是街区， 消防车不得驶入， 红色区域是消防车停车点。<img src="/posts/24146/dac9932d16494eaf88b83d8983639dfd-17086935318804.png" class="" title="在这里插入图片描述"></li></ul><h3 id="二-要求"><a class="markdownIt-Anchor" href="#二-要求"></a> 二、 要求：</h3><ul><li>消防车起始停留在红色区域， 接收到火情信息并显示火源地点位置坐标后，</li><li>出发前往火源地点， 途中不得碾压街区及其边界线。 消防车距离火源地点 5dm内停车， 发出声光报警， 持续 5 秒， 表示将模拟火源熄灭， 之后消防车返回红色区域。 从消防车出发到返回红色区域， 用时越短越好</li></ul><h3 id="三-硬件部分"><a class="markdownIt-Anchor" href="#三-硬件部分"></a> 三、硬件部分</h3><ul><li>主要结构：4驱直流电机小车</li><li>主控：FPGA</li><li>传感器：1.四路循迹模块（避线）   2.红外计数器（测速/里程计算）</li><li>代码主要语法：状态机</li></ul><h3 id="四-解题四路"><a class="markdownIt-Anchor" href="#四-解题四路"></a> 四、解题四路</h3><h4 id="一-调试小车基本运动模式"><a class="markdownIt-Anchor" href="#一-调试小车基本运动模式"></a> 一、调试小车基本运动模式</h4><img src="/posts/24146/e8fb6a097cd9432cb9c084fee621ae42-17086935318806.png" class="" title="在这里插入图片描述"><h3 id="什么是分频器"><a class="markdownIt-Anchor" href="#什么是分频器"></a> 什么是分频器？</h3><p><strong>分频器原理</strong></p><ul><li>通过检测输入时钟信号下降沿（上升沿），或者说采样的方法，控制输出的时钟信号频率。</li></ul><p><strong>如将50MHZ的时钟信号12分频：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">process(clk,q1)</span><br><span class="line">begin</span><br><span class="line">if clk'event and clk='1' then</span><br><span class="line">if q1&lt;=2 then CLKFMQ&lt;='1';q1&lt;=q1+1;</span><br><span class="line">--改变q1&lt;=2参数可变更占空比</span><br><span class="line"> elsif q1=11 then CLKFMQ&lt;='0';q1&lt;=0;</span><br><span class="line"> --改变q1=11参数可以变更CLKFMQ的频率</span><br><span class="line"> else CLKFMQ&lt;='0';q1&lt;=q1+1;</span><br><span class="line">end if;</span><br><span class="line">end if;</span><br><span class="line">end process ;</span><br></pre></td></tr></tbody></table></figure><p><strong>分频器模块</strong></p><ul><li>用于产生各种所需频率的方波信号</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------</span><br><span class="line">LIBRARY IEEE;</span><br><span class="line">USE IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line">USE IEEE.STD_LOGIC_ARITH.ALL;</span><br><span class="line">USE IEEE.STD_LOGIC_UNSIGNED.ALL;</span><br><span class="line">--------------------------------------</span><br><span class="line">ENTITY   CLK_mode is--分频器模块                              </span><br><span class="line">PORT(clk:in std_logic; --系统晶振源 50MHZ              </span><br><span class="line">      CLK1hz,clk01s,CLKFMQ,clk1ms:out std_logic--1hz,1000hz,蜂鸣器频率</span><br><span class="line">);</span><br><span class="line">END CLK_mode   ;                                           </span><br><span class="line">--------------------------------------</span><br><span class="line">ARCHITECTURE abc OF CLK_mode   IS  </span><br><span class="line">signal q1:integer range 0 to 24999; --中间信号</span><br><span class="line">signal q2:integer range 0 to 4999999;</span><br><span class="line">signal q3:integer range 0 to 49999;</span><br><span class="line">BEGIN</span><br><span class="line">--蜂鸣器频率--</span><br><span class="line">process(clk,q1)</span><br><span class="line">begin</span><br><span class="line">if clk'event and clk='1' then</span><br><span class="line">if q1&lt;=12999 then CLKFMQ&lt;='1';q1&lt;=q1+1;</span><br><span class="line"> elsif q1=24999 then CLKFMQ&lt;='0';q1&lt;=0;</span><br><span class="line"> else CLKFMQ&lt;='0';q1&lt;=q1+1;</span><br><span class="line">end if;</span><br><span class="line">end if;</span><br><span class="line">end process ;</span><br><span class="line">--0.1s的分频--</span><br><span class="line">process(clk)</span><br><span class="line">begin</span><br><span class="line">if clk'event and clk='1'then</span><br><span class="line">if q2&lt;=5 then clk01s&lt;='1';q2&lt;=q2+1;</span><br><span class="line">elsif q2=4999999 then clk01s&lt;='0';q2&lt;=0;</span><br><span class="line">else clk01s&lt;='0';q2&lt;=q2+1;</span><br><span class="line">end if;</span><br><span class="line">end if;</span><br><span class="line">end process;</span><br><span class="line">--1ms--</span><br><span class="line">process(clk)</span><br><span class="line">begin</span><br><span class="line">if clk'event and clk='1'then</span><br><span class="line">if q3&lt;=40000 then clk1ms&lt;='1';q3&lt;=q3+1;</span><br><span class="line">elsif q3=49999 then clk1ms&lt;='0';q3&lt;=0;</span><br><span class="line">else clk1ms&lt;='0';q3&lt;=q3+1;</span><br><span class="line">end if;</span><br><span class="line">end if;</span><br><span class="line">end process;</span><br><span class="line">end abc;</span><br></pre></td></tr></tbody></table></figure><h3 id="什么是pwm"><a class="markdownIt-Anchor" href="#什么是pwm"></a> 什么是PWM？</h3><ul><li>PWM（Pulse Width Modulation）即脉冲宽度调制，在具有惯性的系统中，可以通过对一系列脉冲的宽度进行调制，来等效地获得所需要的模拟参量，常应用于电机控速、开关电源等领域</li><li>PWM重要参数：      频率 = 1 / TS            占空比 = TON / TS           精度 = 占空比变化步距</li></ul><img src="/posts/24146/64ab8ccb124f48e1867bd21f1717fba2-17086935318808.png" class="" title="在这里插入图片描述"><p><strong>信号接口/变量定义：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">LIBRARY IEEE;</span><br><span class="line">USE IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line">USE IEEE.STD_LOGIC_ARITH.ALL;</span><br><span class="line">USE IEEE.STD_LOGIC_UNSIGNED.ALL;</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">ENTITY   Carcontrol_4  is--路线四控制模块                             </span><br><span class="line">PORT(CLK,CLKFMQ,clk01s,clk1ms:in std_logic; --pwm,时钟信号,复位信号</span><br><span class="line">RESET:IN STD_LOGIC;</span><br><span class="line">Mapan:in std_logic;--码盘信号</span><br><span class="line">X1,X2:in std_logic_vector(<span class="number">3</span> downto <span class="number">0</span>);--巡线信号</span><br><span class="line">en11,en12,en21,en22,FMQ:OUT std_logic;--通道A B 的驱动电压</span><br><span class="line">turn_timer1,LED:out std_logic_vector(<span class="number">7</span> downto <span class="number">0</span>):=<span class="string">"00000000"</span>;--计数器</span><br><span class="line">contrologic:OUT std_logic_vector(<span class="number">7</span> downto <span class="number">0</span>):=<span class="string">"00000000"</span>--电机驱动/制动的信号--输出到数据选择器上</span><br><span class="line">);</span><br><span class="line">END Carcontrol_4;                                           </span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">ARCHITECTURE abc OF  Carcontrol_4  IS  </span><br><span class="line">  type Sreg0_type is--状态枚举</span><br><span class="line">  (T0,T00,T01,T20,T1,T2,T21,T3,</span><br><span class="line">  stop1,stop2,stop3,stop4,</span><br><span class="line">  TX1,TX1fix,TX1end,</span><br><span class="line">  TX2,TX2fix,TX2end,</span><br><span class="line">  TX3,TX3fix,TX3end,</span><br><span class="line">  TBX1,TBX1fix,TBX1end,</span><br><span class="line">  TBX2,TBX2fix,TBX2end,</span><br><span class="line">  TBX3,TBX3fix,TBX3end,</span><br><span class="line">  TB1,TB2,TB3,TB4,TB5,HT);</span><br><span class="line">  signal XJ :std_logic_vector(<span class="number">7</span> downto <span class="number">0</span>);--两个四路循迹模块的并置信号</span><br><span class="line">  signal Sreg0: Sreg0_type;--状态类型</span><br><span class="line">  signal FMQEN: std_logic:=<span class="string">'1'</span>;--蜂鸣器的使能信号，低电平有效</span><br><span class="line">  signal Z11,Z12,Z21,Z22:integer;--PWM脉宽调制占空比</span><br><span class="line">  signal left1,left2,right1,right2:std_logic;</span><br><span class="line">  signal q1:integer range <span class="number">0</span> to <span class="number">100</span>;</span><br><span class="line">  signal q2:integer range <span class="number">0</span> to <span class="number">100</span>;</span><br><span class="line">  signal q3:integer range <span class="number">0</span> to <span class="number">100</span>;</span><br><span class="line">  signal q4:integer range <span class="number">0</span> to <span class="number">100</span>;</span><br><span class="line">  signal turn_timer:INTEGER  range <span class="number">0</span> to <span class="number">100000</span> ;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">XJ&lt;=X1&amp;X2;--循迹信号（八位）</span><br><span class="line">LED&lt;=XJ;--通过LED观察循迹模块是否正常运行</span><br><span class="line">EN11&lt;=left1;EN12&lt;=right1;EN21&lt;=left2;EN22&lt;=right2;--电机的PWM信号输入</span><br><span class="line">--------------------------------------------</span><br><span class="line">--四个模块，分别控制小车四个电机的PWM信号输入</span><br><span class="line">--占空比定义为 变量（整型），在没有pid控制的情况下，便于对小车进行校准，以及调速。</span><br><span class="line">process(clk,q1)</span><br><span class="line">begin</span><br><span class="line"><span class="keyword">if</span> clk<span class="number">'</span>event and clk=<span class="string">'1'</span> then</span><br><span class="line"><span class="keyword">if</span> q1&lt;=Z11 then left1&lt;=<span class="string">'1'</span>;q1&lt;=q1+<span class="number">1</span>;--高电平有效值定义为整型，便于在状态机中进行变速</span><br><span class="line"> elsif q1=<span class="number">100</span> then left1&lt;=<span class="string">'0'</span>;q1&lt;=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">else</span> left1&lt;=<span class="string">'0'</span>;q1&lt;=q1+<span class="number">1</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end process;</span><br><span class="line">process(clk,q2)</span><br><span class="line">begin</span><br><span class="line"><span class="keyword">if</span> clk<span class="number">'</span>event and clk=<span class="string">'1'</span> then</span><br><span class="line"><span class="keyword">if</span> q2&lt;=Z12 then right1&lt;=<span class="string">'1'</span>;q2&lt;=q2+<span class="number">1</span>;</span><br><span class="line"> elsif q2=<span class="number">100</span> then right1&lt;=<span class="string">'0'</span>;q2&lt;=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">else</span> right1&lt;=<span class="string">'0'</span>;q2&lt;=q2+<span class="number">1</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end process;</span><br><span class="line">process(clk,q3)</span><br><span class="line">begin</span><br><span class="line"><span class="keyword">if</span> clk<span class="number">'</span>event and clk=<span class="string">'1'</span> then</span><br><span class="line"><span class="keyword">if</span> q3&lt;=Z21 then left2&lt;=<span class="string">'1'</span>;q3&lt;=q3+<span class="number">1</span>;</span><br><span class="line"> elsif q3=<span class="number">100</span> then left2&lt;=<span class="string">'0'</span>;q3&lt;=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">else</span> left2&lt;=<span class="string">'0'</span>;q3&lt;=q3+<span class="number">1</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end process;</span><br><span class="line">process(clk,q4)</span><br><span class="line">begin</span><br><span class="line"><span class="keyword">if</span> clk<span class="number">'</span>event and clk=<span class="string">'1'</span> then</span><br><span class="line"><span class="keyword">if</span> q4&lt;=Z22 then right2&lt;=<span class="string">'1'</span>; q4&lt;= q4+<span class="number">1</span>;</span><br><span class="line"> elsif  q4=<span class="number">100</span> then right2&lt;=<span class="string">'0'</span>; q4&lt;=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">else</span> right2&lt;=<span class="string">'0'</span>;q4&lt;=q4+<span class="number">1</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end process;</span><br><span class="line">-----------------------------------------------------------------------------</span><br></pre></td></tr></tbody></table></figure><h2 id="路线规划以路线4为例"><a class="markdownIt-Anchor" href="#路线规划以路线4为例"></a> 路线规划（以路线4为例）</h2><h3 id="计时器控制小车在不同状态下定时运动"><a class="markdownIt-Anchor" href="#计时器控制小车在不同状态下定时运动"></a> 计时器（控制小车在不同状态下定时运动）</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">process(clk1ms,Timer_flag)</span><br><span class="line">begin</span><br><span class="line"><span class="keyword">if</span> Timer_flag = <span class="number">1</span> THEN</span><br><span class="line"><span class="keyword">if</span> rising_edge(clk1ms) THEN</span><br><span class="line">turn_timer &lt;= turn_timer +<span class="number">1</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">turn_timer&lt;=<span class="number">0</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end process;</span><br></pre></td></tr></tbody></table></figure><h3 id="程序主要部分状态机"><a class="markdownIt-Anchor" href="#程序主要部分状态机"></a> 程序主要部分（状态机）</h3><blockquote><p><strong>不同状态下，根据路径规划，小车的运动姿态（转向，直行）不同，每个状态有特定的<mark>状态转移条件</mark>（运动时间（用红外计数里程判断更精准），特征值（黑线）</strong></p></blockquote><ul><li>小车碰到黑线（居民楼）进行偏移转向</li><li>车头碰到黑线（关键点检测）进行直角转弯</li><li>小车要精确地行驶，到底指定地点，需要利用好黑线，既不能触线，也不能过偏，即贴线行驶，这就要使得小车在贴线行驶的路段在规定的 时间 / 里程 内，进行<mark>贴线行驶</mark>-&gt;<mark>避线</mark>-&gt;<mark>贴线行驶</mark>，三个状态的闭环，在小车行驶姿态垂直于黑线时的路径，循迹模块检测黑线直接进行直角转弯即可（这样就不需要控制里程/时间）。</li><li>规划好前往火源点的路径后，返回的路径按照相反的逻辑控制即可。</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">PROCESS(reset, clk1ms)-<span class="number">-1</span>ms的时钟信号，用于状态机的状态检测以及计时器的计时精度</span><br><span class="line">BEGIN</span><br><span class="line">    IF reset = <span class="string">'1'</span> THEN--复位信号</span><br><span class="line">      Sreg0 &lt;= T0;FMQEN&lt;=<span class="string">'1'</span>;Z11&lt;=<span class="number">36</span>;Z12&lt;=<span class="number">29</span>;Z21&lt;=<span class="number">36</span>;Z22&lt;=<span class="number">29</span>;--蜂鸣器无效，状态机初始化</span><br><span class="line">      contrologic &lt;= <span class="string">"00000000"</span>;--控制逻辑均置零</span><br><span class="line">turn_timer&lt;= <span class="number">0</span> ;--计数器清零</span><br><span class="line">    ELSIF <span class="title function_">rising_edge</span><span class="params">(clk1ms)</span> THEN</span><br><span class="line">      CASE Sreg0 IS </span><br><span class="line">        WHEN T0 =&gt;contrologic &lt;= <span class="string">"01100110"</span>;Z11&lt;=<span class="number">38</span>;Z12&lt;=<span class="number">34</span>;Z21&lt;=<span class="number">38</span>;Z22&lt;=<span class="number">34</span>; --直行</span><br><span class="line">   <span class="keyword">if</span> turn_timer = <span class="number">1000</span> then</span><br><span class="line">   Sreg0 &lt;= T00;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line"> end <span class="keyword">if</span>;  </span><br><span class="line">WHEN T00 =&gt;</span><br><span class="line">          <span class="keyword">if</span>  XJ(<span class="number">3</span>)=<span class="string">'0'</span> then--检测黑线</span><br><span class="line">    Sreg0&lt;=T01;</span><br><span class="line"> ELSE  Sreg0&lt;=T00;</span><br><span class="line">          end <span class="keyword">if</span>;</span><br><span class="line">  WHEN T01 =&gt;contrologic &lt;= <span class="string">"10011001"</span>; Z11&lt;=<span class="number">36</span>;Z12&lt;=<span class="number">29</span>;Z21&lt;=<span class="number">36</span>;Z22&lt;=<span class="number">29</span>;--碰到黑线回退</span><br><span class="line">   <span class="keyword">if</span> turn_timer = <span class="number">700</span> then -<span class="number">-1450</span></span><br><span class="line">   Sreg0 &lt;= T1;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line"> end <span class="keyword">if</span>;  </span><br><span class="line">        WHEN T1 =&gt;contrologic &lt;= <span class="string">"00100010"</span>;Z12&lt;=<span class="number">40</span>;Z22&lt;=<span class="number">40</span>;--转弯</span><br><span class="line"><span class="keyword">if</span> turn_timer = <span class="number">1250</span> then</span><br><span class="line">   Sreg0 &lt;= stop1;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line"> end <span class="keyword">if</span>;  </span><br><span class="line">  WHEN stop1 =&gt;contrologic &lt;= <span class="string">"00000000"</span> ;--停止</span><br><span class="line"><span class="keyword">if</span> turn_timer = <span class="number">300</span> then</span><br><span class="line">   Sreg0 &lt;= T2;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line"> end <span class="keyword">if</span>;</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">--贴线 </span><br><span class="line">  WHEN T2 =&gt;contrologic &lt;= <span class="string">"01100110"</span>;Z11&lt;=<span class="number">38</span>;Z12&lt;=<span class="number">34</span>;Z21&lt;=<span class="number">38</span>;Z22&lt;=<span class="number">34</span>; --空白区域直行</span><br><span class="line">  <span class="keyword">if</span> turn_timer = <span class="number">1500</span> then</span><br><span class="line">   Sreg0 &lt;= TX1;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line"> end <span class="keyword">if</span>;</span><br><span class="line"> When TX1 =&gt;contrologic &lt;= <span class="string">"01100110"</span>;Z11&lt;=<span class="number">38</span>;Z12&lt;=<span class="number">34</span>;Z21&lt;=<span class="number">38</span>;Z22&lt;=<span class="number">34</span>; --贴线循迹(街区<span class="number">2</span>）</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">0</span>) and XJ(<span class="number">1</span>) and XJ(<span class="number">2</span>) and XJ(<span class="number">3</span>))  = <span class="string">'0'</span> then</span><br><span class="line">Sreg0 &lt;= TX1fix; </span><br><span class="line">elsif turn_timer = <span class="number">2800</span> then--完成贴线</span><br><span class="line">   Sreg0 &lt;= TX1end;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line"> WHEN TX1fix =&gt; contrologic &lt;= <span class="string">"10101010"</span>;Z11&lt;=<span class="number">40</span>;Z12&lt;=<span class="number">40</span>;Z21&lt;=<span class="number">40</span>;Z22&lt;=<span class="number">40</span>;--修正</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">0</span>) and XJ(<span class="number">1</span>) and XJ(<span class="number">2</span>) and XJ(<span class="number">3</span>)) = <span class="string">'1'</span>then Sreg0 &lt;= TX1; </span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line"> When TX1end =&gt; contrologic &lt;= <span class="string">"01100110"</span>;Z11&lt;=<span class="number">38</span>;Z12&lt;=<span class="number">34</span>;Z21&lt;=<span class="number">38</span>;Z22&lt;=<span class="number">34</span>; --完成贴线,直行小段</span><br><span class="line"> <span class="keyword">if</span> turn_timer = <span class="number">500</span> then </span><br><span class="line">   Sreg0 &lt;= T20;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">----------------------------------------------------------------------------- </span><br><span class="line">       WHEN T20 =&gt;</span><br><span class="line">          <span class="keyword">if</span>  XJ(<span class="number">3</span>)=<span class="string">'0'</span> then  --前端检测黑线</span><br><span class="line">    Sreg0&lt;=T21;</span><br><span class="line">          end <span class="keyword">if</span>;</span><br><span class="line">  WHEN T21 =&gt;contrologic &lt;= <span class="string">"10011001"</span>; Z11&lt;=<span class="number">36</span>;Z12&lt;=<span class="number">29</span>;Z21&lt;=<span class="number">36</span>;Z22&lt;=<span class="number">29</span>;--检测到黑线，回退</span><br><span class="line">  <span class="keyword">if</span> turn_timer = <span class="number">600</span> then</span><br><span class="line">   Sreg0 &lt;= T3;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line"> end <span class="keyword">if</span>;  </span><br><span class="line">  WHEN T3 =&gt;contrologic &lt;= <span class="string">"00100010"</span>;Z11&lt;=<span class="number">40</span>;Z12&lt;=<span class="number">40</span>;Z21&lt;=<span class="number">40</span>;Z22&lt;=<span class="number">40</span>;--直角转弯</span><br><span class="line"><span class="keyword">if</span> turn_timer = <span class="number">1500</span> then</span><br><span class="line">   Sreg0 &lt;= TX2; --进入第二段循迹贴线（火源区<span class="number">3</span>）</span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line"> end <span class="keyword">if</span>;</span><br><span class="line">----------------------------------------------------------------------------- </span><br><span class="line">  WHEN TX2 =&gt;contrologic &lt;= <span class="string">"10011001"</span>; Z11&lt;=<span class="number">36</span>;Z12&lt;=<span class="number">29</span>;Z21&lt;=<span class="number">36</span>;Z22&lt;=<span class="number">29</span>;--进入第二段循迹贴线（火源区<span class="number">3</span>）</span><br><span class="line"><span class="keyword">if</span> XJ(<span class="number">4</span>) = <span class="string">'0'</span> then</span><br><span class="line">Sreg0 &lt;= TX2fix; </span><br><span class="line">elsif turn_timer = <span class="number">2000</span> then--限制贴线时间</span><br><span class="line">   Sreg0 &lt;= TX2end;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line"> WHEN TX2fix =&gt; contrologic &lt;= <span class="string">"01010101"</span>;Z11&lt;=<span class="number">40</span>;Z12&lt;=<span class="number">40</span>;Z21&lt;=<span class="number">40</span>;Z22&lt;=<span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span> XJ(<span class="number">4</span>) = <span class="string">'1'</span>then Sreg0 &lt;= TX2; </span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line"> When TX2end =&gt; contrologic &lt;= <span class="string">"10011001"</span>; Z11&lt;=<span class="number">36</span>;Z12&lt;=<span class="number">29</span>;Z21&lt;=<span class="number">36</span>;Z22&lt;=<span class="number">29</span>;</span><br><span class="line"> <span class="keyword">if</span> turn_timer = <span class="number">500</span> then --贴线结束，空白区直行</span><br><span class="line">   Sreg0 &lt;= TX3;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">----------------------------------------------------------------------------- </span><br><span class="line">  WHEN TX3 =&gt;contrologic &lt;= <span class="string">"10011001"</span>;  Z11&lt;=<span class="number">36</span>;Z12&lt;=<span class="number">29</span>;Z21&lt;=<span class="number">36</span>;Z22&lt;=<span class="number">29</span>;--进入第三段循迹贴线（火源区<span class="number">4</span>）</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">4</span>) and XJ(<span class="number">5</span>) and XJ(<span class="number">6</span>) and XJ(<span class="number">7</span>)) = <span class="string">'0'</span> then</span><br><span class="line">Sreg0 &lt;= TX3fix; </span><br><span class="line">elsif turn_timer = <span class="number">1900</span> then--限制时间</span><br><span class="line">   Sreg0 &lt;= TX3end;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line"> WHEN TX3fix =&gt; contrologic &lt;= <span class="string">"01010101"</span>;Z11&lt;=<span class="number">40</span>;Z12&lt;=<span class="number">40</span>;Z21&lt;=<span class="number">40</span>;Z22&lt;=<span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">4</span>) and XJ(<span class="number">5</span>) and XJ(<span class="number">6</span>) and XJ(<span class="number">7</span>)) = <span class="string">'1'</span>then Sreg0 &lt;= TX3; </span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">  WHEN TX3end=&gt;FMQEN&lt;=<span class="string">'0'</span>;contrologic &lt;= <span class="string">"00000000"</span>; --报警</span><br><span class="line">  <span class="keyword">if</span> turn_timer =<span class="number">4999</span> then </span><br><span class="line">Sreg0 &lt;= TBX1;FMQEN&lt;=<span class="string">'1'</span>;</span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">  end <span class="keyword">if</span>;</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">WHEN TBX1 =&gt;contrologic &lt;= <span class="string">"01100110"</span>; Z11&lt;=<span class="number">38</span>;Z12&lt;=<span class="number">34</span>;Z21&lt;=<span class="number">38</span>;Z22&lt;=<span class="number">34</span>; --进入返回第一段循迹贴线（火源区<span class="number">4</span>）</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">0</span>) and XJ(<span class="number">1</span>) and XJ(<span class="number">2</span>) and XJ(<span class="number">3</span>)) = <span class="string">'0'</span> then</span><br><span class="line">Sreg0 &lt;= TBX1fix; </span><br><span class="line">elsif turn_timer = <span class="number">1200</span> then</span><br><span class="line">   Sreg0 &lt;= TBX1end;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">   WHEN TBX1fix =&gt; contrologic &lt;= <span class="string">"10101010"</span>;Z11&lt;=<span class="number">40</span>;Z12&lt;=<span class="number">40</span>;Z21&lt;=<span class="number">40</span>;Z22&lt;=<span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">0</span>) and XJ(<span class="number">1</span>) and XJ(<span class="number">2</span>) and XJ(<span class="number">3</span>))= <span class="string">'1'</span>then Sreg0 &lt;= TBX1; </span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"> When TBX1end =&gt; contrologic &lt;= <span class="string">"01100110"</span>;Z11&lt;=<span class="number">38</span>;Z12&lt;=<span class="number">34</span>;Z21&lt;=<span class="number">38</span>;Z22&lt;=<span class="number">34</span>; --空白区域</span><br><span class="line"> <span class="keyword">if</span> turn_timer = <span class="number">500</span> then </span><br><span class="line">   Sreg0 &lt;= TBX2;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">    WHEN TBX2 =&gt;contrologic &lt;= <span class="string">"01100110"</span>;Z11&lt;=<span class="number">38</span>;Z12&lt;=<span class="number">34</span>;Z21&lt;=<span class="number">38</span>;Z22&lt;=<span class="number">34</span>;--进入返回第二段循迹贴线（火源区<span class="number">3</span>）</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">0</span>) and XJ(<span class="number">1</span>) and XJ(<span class="number">2</span>) and XJ(<span class="number">3</span>)) = <span class="string">'0'</span> then</span><br><span class="line">Sreg0 &lt;= TBX2fix; </span><br><span class="line">elsif turn_timer = <span class="number">3500</span> then</span><br><span class="line">   Sreg0 &lt;= TBX2end;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line"> WHEN TBX2fix =&gt; contrologic &lt;= <span class="string">"10101010"</span>;Z11&lt;=<span class="number">40</span>;Z12&lt;=<span class="number">40</span>;Z21&lt;=<span class="number">40</span>;Z22&lt;=<span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">0</span>) and XJ(<span class="number">1</span>) and XJ(<span class="number">2</span>) and XJ(<span class="number">3</span>)) = <span class="string">'1'</span>then Sreg0 &lt;= TBX2; </span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">  WHEN TBX2end=&gt;contrologic &lt;= <span class="string">"01100110"</span>;Z11&lt;=<span class="number">38</span>;Z12&lt;=<span class="number">34</span>;Z21&lt;=<span class="number">38</span>;Z22&lt;=<span class="number">34</span>;--前端检测黑线</span><br><span class="line">          <span class="keyword">if</span>  XJ(<span class="number">3</span>)=<span class="string">'0'</span> then  </span><br><span class="line">    Sreg0&lt;=HT;</span><br><span class="line"> Else  Sreg0&lt;=TBX2end;</span><br><span class="line">          end <span class="keyword">if</span>; </span><br><span class="line">  WHEN HT =&gt;contrologic &lt;= <span class="string">"10011001"</span>; Z11&lt;=<span class="number">36</span>;Z12&lt;=<span class="number">29</span>;Z21&lt;=<span class="number">36</span>;Z22&lt;=<span class="number">29</span>;--碰到黑线回退</span><br><span class="line">   <span class="keyword">if</span> turn_timer = <span class="number">500</span> then -<span class="number">-1450</span></span><br><span class="line">   Sreg0 &lt;= TB3;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line"> end <span class="keyword">if</span>;</span><br><span class="line">        WHEN TB3=&gt;contrologic &lt;= <span class="string">"00100010"</span>;Z11&lt;=<span class="number">40</span>;Z12&lt;=<span class="number">40</span>;Z21&lt;=<span class="number">40</span>;Z22&lt;=<span class="number">40</span>;--转向 </span><br><span class="line"><span class="keyword">if</span> turn_timer = <span class="number">900</span> then</span><br><span class="line">   Sreg0 &lt;= TBX3;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line"> end <span class="keyword">if</span>;</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">    WHEN TBX3 =&gt;contrologic &lt;= <span class="string">"01100110"</span>;Z11&lt;=<span class="number">38</span>;Z12&lt;=<span class="number">34</span>;Z21&lt;=<span class="number">38</span>;Z22&lt;=<span class="number">34</span>; --贴线循迹，回到起点</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">0</span>) and XJ(<span class="number">1</span>) and XJ(<span class="number">2</span>) and XJ(<span class="number">3</span>)) = <span class="string">'0'</span> then</span><br><span class="line">Sreg0 &lt;= TBX3fix; </span><br><span class="line">elsif turn_timer = <span class="number">4200</span> then</span><br><span class="line">   Sreg0 &lt;= TBX3end;  </span><br><span class="line">Timer_flag&lt;=<span class="number">1</span>; </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">Timer_flag&lt;=<span class="number">0</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line"> WHEN TBX3fix =&gt; contrologic &lt;= <span class="string">"10101010"</span>;Z11&lt;=<span class="number">40</span>;Z12&lt;=<span class="number">40</span>;Z21&lt;=<span class="number">40</span>;Z22&lt;=<span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span> (XJ(<span class="number">0</span>) and XJ(<span class="number">1</span>) and XJ(<span class="number">2</span>) and XJ(<span class="number">3</span>)) = <span class="string">'1'</span>then Sreg0 &lt;= TBX3; </span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">  WHEN OTHERS =&gt; null; contrologic&lt;= <span class="string">"00000000"</span>;</span><br><span class="line">  END CASE;</span><br><span class="line">END IF;</span><br><span class="line">  END PROCESS;</span><br><span class="line">PROCESS(FMQEN)</span><br><span class="line">BEGIN</span><br><span class="line">IF FMQEN&lt;=<span class="string">'0'</span>then FMQ&lt;=CLKFMQ;</span><br><span class="line">ELSE FMQ&lt;=<span class="string">'1'</span>;</span><br><span class="line">END IF;</span><br><span class="line">END PROCESS;</span><br><span class="line">END abc;</span><br></pre></td></tr></tbody></table></figure><h3 id="四路数据选择器模块"><a class="markdownIt-Anchor" href="#四路数据选择器模块"></a> 四路数据选择器模块</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY IEEE;</span><br><span class="line">USE IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line">USE IEEE.STD_LOGIC_ARITH.ALL;</span><br><span class="line">USE IEEE.STD_LOGIC_UNSIGNED.ALL;</span><br><span class="line">--四路（总线式）数据选择器，通过四位按键控制电机逻辑/电机有效电压（PWM）/蜂鸣器信号/选择小车行驶路线</span><br><span class="line">ENTITY MUX4 IS</span><br><span class="line"><span class="title function_">PORT</span><span class="params">(C1,C2,C3,C4:IN STD_LOGIC_VECTOR(<span class="number">7</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">  EN11_1,EN12_1,EN21_1,EN22_1:in std_logic;</span></span><br><span class="line"><span class="params">  EN11_2,EN12_2,EN21_2,EN22_2:in std_logic;</span></span><br><span class="line"><span class="params">  EN11_3,EN12_3,EN21_3,EN22_3:in std_logic;</span></span><br><span class="line"><span class="params">  EN11_4,EN12_4,EN21_4,EN22_4:in std_logic;</span></span><br><span class="line"><span class="params">  FMQ1,FMQ2,FMQ3,FMQ4:in std_logic;</span></span><br><span class="line"><span class="params">  RESET:IN STD_LOGIC_vector(<span class="number">3</span> downto <span class="number">0</span>);--路线选择信号</span></span><br><span class="line"><span class="params">  FMQ:out std_logic;--蜂鸣器</span></span><br><span class="line"><span class="params">  LOGIC:OUT STD_LOGIC_vector(<span class="number">7</span> DOWNTO <span class="number">0</span>);--小车运动控制逻辑</span></span><br><span class="line"><span class="params">  EN11,EN12,EN21,EN22:OUT STD_LOGIC;--小车电机PWM方波输出信号</span></span><br><span class="line"><span class="params">  CLK1MS:in std_logic;--光耦传感器脉冲，复位信号，<span class="number">1</span>MS时钟</span></span><br><span class="line"><span class="params">  LEDSEG: OUT STD_LOGIC_VECTOR(<span class="number">6</span> DOWNTO <span class="number">0</span>);--LED显示</span></span><br><span class="line"><span class="params">  Y:out std_logic_VECTOR(<span class="number">5</span> DOWNTO <span class="number">0</span>)--共阴极</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line">END MUX4;--</span><br><span class="line">ARCHITECTURE ABC OF MUX4 IS</span><br><span class="line">signal ledin:std_logic_vector(<span class="number">3</span> downto <span class="number">0</span>);</span><br><span class="line">signal SEL:std_logic_vector(<span class="number">2</span> downto <span class="number">0</span>):=<span class="string">"000"</span>;</span><br><span class="line">BEGIN</span><br><span class="line">--显示译码器--</span><br><span class="line">P11:process (ledin)</span><br><span class="line">BEGIN</span><br><span class="line">CASE ledin IS </span><br><span class="line">WHEN <span class="string">"0000"</span>=&gt;ledseg&lt;=<span class="string">"0111111"</span>;--<span class="string">"1111111110"</span>;</span><br><span class="line">WHEN <span class="string">"0001"</span>=&gt;ledseg&lt;=<span class="string">"0000110"</span>;--<span class="string">"1111111101"</span>;</span><br><span class="line">WHEN <span class="string">"0010"</span>=&gt;ledseg&lt;=<span class="string">"1011011"</span>;--<span class="string">"1111111011"</span>;</span><br><span class="line">WHEN <span class="string">"0011"</span>=&gt;ledseg&lt;=<span class="string">"1001111"</span>;--<span class="string">"1111110111"</span>; </span><br><span class="line">WHEN <span class="string">"0100"</span>=&gt;ledseg&lt;=<span class="string">"1100110"</span>;--<span class="string">"1111101111"</span>;</span><br><span class="line">WHEN <span class="string">"0101"</span>=&gt;ledseg&lt;=<span class="string">"1101101"</span>;--<span class="string">"1111011111"</span>;</span><br><span class="line">WHEN <span class="string">"0110"</span>=&gt;ledseg&lt;=<span class="string">"1111101"</span>;--<span class="string">"1110111111"</span>;</span><br><span class="line">WHEN <span class="string">"0111"</span>=&gt;ledseg&lt;=<span class="string">"0000111"</span>;--<span class="string">"1101111111"</span>;</span><br><span class="line">WHEN <span class="string">"1000"</span>=&gt;ledseg&lt;=<span class="string">"1111111"</span>;--<span class="string">"1011111111"</span>;</span><br><span class="line">WHEN <span class="string">"1001"</span>=&gt;ledseg&lt;=<span class="string">"1101111"</span>;--<span class="string">"0111111111"</span>;</span><br><span class="line">WHEN <span class="string">"1010"</span>=&gt;ledseg&lt;=<span class="string">"0000001"</span>;--<span class="string">"0111111111"</span>;</span><br><span class="line">WHEN OTHERS=&gt;ledseg&lt;=<span class="string">"0000000"</span>;--共阴极，无效</span><br><span class="line">END CASE;</span><br><span class="line">end process P11;</span><br><span class="line">--四位脉冲分配器--</span><br><span class="line">p22:process(clk1ms)</span><br><span class="line">begin</span><br><span class="line">IF clk1ms<span class="number">'</span>event and clk1ms=<span class="string">'1'</span> then</span><br><span class="line"><span class="keyword">if</span> sel=<span class="string">"101"</span> then sel&lt;=<span class="string">"000"</span>;</span><br><span class="line"><span class="keyword">else</span> sel&lt;=sel+<span class="number">1</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line">end process P22;</span><br><span class="line">PROCESS(RESET)</span><br><span class="line">BEGIN</span><br><span class="line">CASE RESET IS</span><br><span class="line">WHEN <span class="string">"1000"</span> =&gt; </span><br><span class="line">LOGIC &lt;=C1;</span><br><span class="line">EN11&lt;=EN11_1;</span><br><span class="line">EN12&lt;=EN12_1;</span><br><span class="line">EN21&lt;=EN21_1;</span><br><span class="line">EN22&lt;=EN22_1;</span><br><span class="line">FMQ&lt;=FMQ1;</span><br><span class="line">CASE SEL IS</span><br><span class="line">WHEN <span class="string">"001"</span>=&gt;ledin&lt;=<span class="string">"0000"</span>;y&lt;=<span class="string">"111101"</span>;</span><br><span class="line">WHEN <span class="string">"010"</span>=&gt;ledin&lt;=<span class="string">"1001"</span>;y&lt;=<span class="string">"111011"</span>;</span><br><span class="line">WHEN <span class="string">"011"</span>=&gt;ledin&lt;=<span class="string">"0011"</span>;y&lt;=<span class="string">"110111"</span>;</span><br><span class="line">WHEN <span class="string">"100"</span>=&gt;ledin&lt;=<span class="string">"0010"</span>;y&lt;=<span class="string">"101111"</span>;</span><br><span class="line">WHEN OTHERS =&gt;ledin&lt;=<span class="string">"1111"</span>;y&lt;=<span class="string">"111111"</span>;</span><br><span class="line">END CASE;</span><br><span class="line">WHEN <span class="string">"0100"</span> =&gt; LOGIC &lt;=C2;</span><br><span class="line">EN11&lt;=EN11_2;</span><br><span class="line">EN12&lt;=EN12_2;</span><br><span class="line">EN21&lt;=EN21_2;</span><br><span class="line">EN22&lt;=EN22_2;</span><br><span class="line">FMQ&lt;=FMQ2;</span><br><span class="line">CASE SEL IS</span><br><span class="line">WHEN <span class="string">"000"</span>=&gt;ledin&lt;=<span class="string">"0010"</span>;y&lt;=<span class="string">"111101"</span>;</span><br><span class="line">WHEN <span class="string">"001"</span>=&gt;ledin&lt;=<span class="string">"1000"</span>;y&lt;=<span class="string">"111011"</span>;</span><br><span class="line">WHEN <span class="string">"010"</span>=&gt;ledin&lt;=<span class="string">"0010"</span>;y&lt;=<span class="string">"110111"</span>;</span><br><span class="line">WHEN <span class="string">"011"</span>=&gt;ledin&lt;=<span class="string">"1001"</span>;y&lt;=<span class="string">"101111"</span>;</span><br><span class="line">WHEN OTHERS =&gt;ledin&lt;=<span class="string">"1111"</span>;y&lt;=<span class="string">"111111"</span>;</span><br><span class="line">END CASE;</span><br><span class="line">WHEN <span class="string">"0010"</span> =&gt; LOGIC &lt;=C3;</span><br><span class="line">EN11&lt;=EN11_3;</span><br><span class="line">EN12&lt;=EN12_3;</span><br><span class="line">EN21&lt;=EN21_3;</span><br><span class="line">EN22&lt;=EN22_3;</span><br><span class="line">FMQ&lt;=FMQ3;</span><br><span class="line">CASE SEL IS</span><br><span class="line">WHEN <span class="string">"000"</span>=&gt;ledin&lt;=<span class="string">"0010"</span>;y&lt;=<span class="string">"111101"</span>;</span><br><span class="line">WHEN <span class="string">"001"</span>=&gt;ledin&lt;=<span class="string">"1000"</span>;y&lt;=<span class="string">"111011"</span>;</span><br><span class="line">WHEN <span class="string">"010"</span>=&gt;ledin&lt;=<span class="string">"0010"</span>;y&lt;=<span class="string">"110111"</span>;</span><br><span class="line">WHEN <span class="string">"011"</span>=&gt;ledin&lt;=<span class="string">"1001"</span>;y&lt;=<span class="string">"101111"</span>;</span><br><span class="line">WHEN OTHERS =&gt;ledin&lt;=<span class="string">"1111"</span>;y&lt;=<span class="string">"111111"</span>;</span><br><span class="line">END CASE;</span><br><span class="line">WHEN <span class="string">"0001"</span> =&gt; LOGIC &lt;=C4;</span><br><span class="line">EN11&lt;=EN11_4;</span><br><span class="line">EN12&lt;=EN12_4;</span><br><span class="line">EN21&lt;=EN21_4;</span><br><span class="line">EN22&lt;=EN22_4;</span><br><span class="line">FMQ&lt;=FMQ4;</span><br><span class="line">CASE SEL IS</span><br><span class="line">WHEN <span class="string">"000"</span>=&gt;ledin&lt;=<span class="string">"0010"</span>;y&lt;=<span class="string">"111101"</span>;</span><br><span class="line">WHEN <span class="string">"001"</span>=&gt;ledin&lt;=<span class="string">"1000"</span>;y&lt;=<span class="string">"111011"</span>;</span><br><span class="line">WHEN <span class="string">"010"</span>=&gt;ledin&lt;=<span class="string">"0010"</span>;y&lt;=<span class="string">"110111"</span>;</span><br><span class="line">WHEN <span class="string">"011"</span>=&gt;ledin&lt;=<span class="string">"1001"</span>;y&lt;=<span class="string">"101111"</span>;</span><br><span class="line">WHEN OTHERS =&gt;ledin&lt;=<span class="string">"1111"</span>;y&lt;=<span class="string">"111111"</span>;</span><br><span class="line">end <span class="keyword">case</span>;</span><br><span class="line">WHEN OTHERS=&gt;LOGIC&lt;=<span class="string">"00000000"</span>;</span><br><span class="line">END CASE;</span><br><span class="line">END PROCESS;</span><br><span class="line">END ABC;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 项目 </category>
          
          <category> FPGA </category>
          
          <category> 数电 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> 电赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HEXO】[01]HEXO常用命令</title>
      <link href="/posts/64680/"/>
      <url>/posts/64680/</url>
      
        <content type="html"><![CDATA[<p><strong>hexo远程发布</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></tbody></table></figure><p><strong>新建md文件</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n "name"</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> 博客 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言入门学习】[1]初识C语言 01</title>
      <link href="/posts/13150/"/>
      <url>/posts/13150/</url>
      
        <content type="html"><![CDATA[<h1 id="c语言入门学习1初识c语言-01"><a class="markdownIt-Anchor" href="#c语言入门学习1初识c语言-01"></a> 【C语言入门学习】[1]初识C语言 01</h1><h3 id="202419更新"><a class="markdownIt-Anchor" href="#202419更新"></a> 2024.1.9更新</h3><h3 id="2024220更新"><a class="markdownIt-Anchor" href="#2024220更新"></a> 2024.2.20更新</h3><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> #前言</h2><h3 id="什么是c语言"><a class="markdownIt-Anchor" href="#什么是c语言"></a> 什么是C语言？</h3><ul><li>C语言是一门通用计算机编程语言，广泛应用于<strong>底层开发</strong>。C语言的设计目标是提供一种能以简易的方式编译、处理低级存储器、产生少量的机器码以及不需要任何运行环境支持便能运行的编程语言。尽管C语言提供了许多低级处理的功能，但仍然保持着良好跨平台的特性，以一个标准规格写出的C语言程序可在许多电脑平台上进行编译，甚至包含一些<strong>嵌入式处理器</strong>（单片机或称MCU）以及<strong>超级电脑</strong>等作业平台。</li><li>ANSI C，作为C语言最初的标准</li><li>C语言是一门<strong>面向过程</strong>的计算机编程语言，与C++，Java等<strong>面向对象</strong>的编程语言有所不同。</li><li>其编译器主要有Clang、GCC、WIN-TC、SUBLIME、MSVC、Turbo C</li><li><strong>C语言介于机器语言和高级语言之间</strong></li></ul><h2 id="一-基本概念"><a class="markdownIt-Anchor" href="#一-基本概念"></a> 一、基本概念</h2><h3 id="一-c语言的基本框架"><a class="markdownIt-Anchor" href="#一-c语言的基本框架"></a> 一、c语言的基本框架</h3><ul><li>main函数是程序的入口</li><li>return 0;函数正常运行结束时返回0</li></ul><h3 id="二-c语言的数据类型"><a class="markdownIt-Anchor" href="#二-c语言的数据类型"></a> 二、c语言的数据类型</h3><ul><li>char //字符数据类型</li><li>short //短整型</li><li>int //整形</li><li>long //长整型</li><li>long long //更长的整形</li><li>float //单精度浮点数</li><li>double //双精度浮点数</li><li>C语言有没有字符串类型？<br><code>add[]="String"</code></li></ul><p><strong>每种字符类型对应的字节大小</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">double</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>输出结果：<br>1<br>2<br>4<br>4<br>8<br>4<br>8<br>8 最大为8个字节 2的64次方(64位系统)<br>对于计算机内存的解释,见：</p></blockquote><h3 id="三-变量的作用域和生命周期"><a class="markdownIt-Anchor" href="#三-变量的作用域和生命周期"></a> 三、变量的作用域和生命周期</h3><p>作用域</p><blockquote><p>作用域（scope）是程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效/可用<br>的<br>而限定这个名字的可用性的代码范围就是这个名字的作用域。</p></blockquote><ol><li>局部变量的作用域是变量所在的局部范围。</li><li>全局变量的作用域是整个工程。</li></ol><p>生命周期</p><blockquote><p>变量的生命周期指的是变量的创建到变量的销毁之间的一个时间段</p></blockquote><ol><li>局部变量的生命周期是：进入作用域生命周期开始，出作用域生命周期结束。</li><li>全局变量的生命周期是：整个程序的生命周期。</li></ol><p><strong>代码示例</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作用域</span></span><br><span class="line"><span class="comment">//局部变量的作用域：就是变量所在的局部范围</span></span><br><span class="line"><span class="comment">//全局变量的作用域：整个工程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g_val = <span class="number">2021</span>;<span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1:%d\n"</span>, g_val);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hehe\n"</span>);</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2:%d\n"</span>, g_val);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>, a);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3:%d\n"</span>, g_val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="extern关键字"><a class="markdownIt-Anchor" href="#extern关键字"></a> #extern(关键字)：</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一下变量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_val;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g_val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生命周期</span></span><br><span class="line"><span class="comment">//变量的生命周期：变量的创建和销毁之间的时间段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//局部变量的生命周期：进入局部范围生命开始，出局部范围生命结束</span></span><br><span class="line"><span class="comment">//全局变量的生命周期：程序的生命周期</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//a创建</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//a销毁</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="defineconst和enum"><a class="markdownIt-Anchor" href="#defineconst和enum"></a> #define/const和enum</h3><h4 id="define-和const的区别"><a class="markdownIt-Anchor" href="#define-和const的区别"></a> define 和const的区别</h4><p><strong>1.编译器处理阶段</strong></p><p>define是预处理器预处理阶段完成，const是编译器开始编译程序阶段完成，因此#define先于const处理。<br><strong>2.语法语义方面</strong></p><p>define是宏定义，特点是简单原位做替换，其定义的常量值没有类型限定，也不做类型检查，在出现宏名称的地方直接展开。<br>const是关键字，本质上会定义一个只读变量，不可以更改，编译是检查常量值的类型是否匹配。</p><blockquote><p>例如：</p><p>define PI 3.14159<br>int r = 25;<br>double s = rrPI;<br>r = 30;<br>s = rrPI;<br>预处理完成以后的代码是：<br>int r = 25;<br>double s = rr3.14159;<br>r = 30;<br>s = rr3.14159;<br>define明显是直接替换，PI出现几次，其数值3.14159出现几次。<br>// 必须指定正确的类型<br>const double PI = 3.14159 ;<br>int r = 25;<br>double s = rrPI;<br>r = 30;<br>s = rrPI;<br>const明显是声明和定义一个变量，分配内存空间保存3.14159的数值，以后使用时和普通变量一样取值，但是无法对其进行赋值修改。<br>3.#define宏只做替换，不做表达式计算，如果#define定义的不是单个数值，而是一个常量表达式，建议加上圆括号，避免出错。<br>例如：定义常量表示每个元素的大小是int+double型大小之和。<br>define N sizeof(int) + sizeof(double)<br>int m = 100;<br>// 根据输入的m变量值计算总的空间大小<br>int total = m<em>N;<br>这是错误的，因为替换以后int total= m</em>sizeof(int) + sizeof(double);<br>正确写法是：<br>define N (sizeof(int) + sizeof(double))<br>展开以后：<br>int total = m*(sizeof(int) + sizeof(double));<br>使用const不存在以上问题，const会对表达式先计算。<br>const int N = sizeof(int) + sizeof(double);<br>int m = 100;<br>// 根据输入的m变量值计算总的空间大小<br>int total = m*N;</p></blockquote><p><strong>代码示例</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//1. 字面常量</span></span><br><span class="line"><span class="comment">//3.14;</span></span><br><span class="line"><span class="comment">//10;</span></span><br><span class="line"><span class="comment">//'a';</span></span><br><span class="line"><span class="comment">//"abcdef";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. const修饰的常变量</span></span><br><span class="line"><span class="comment">//const int num = 10;//num就是常变量 - 具有常属性（不能被改变的属性）</span></span><br><span class="line"><span class="comment">//num = 20;</span></span><br><span class="line"><span class="comment">//printf("num = %d\n", num);//20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int arr[10] = {0};//10个元素</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//const int n = 10;</span></span><br><span class="line"><span class="comment">//int arr2[n] = {0};//n是变量的，这里是不行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. #define 定义的标识符常量</span></span><br><span class="line"><span class="comment">//MAX = 20000;//err</span></span><br><span class="line"><span class="comment">/*int n = MAX;</span></span><br><span class="line"><span class="comment">printf("n = %d\n", n);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">性别</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="comment">//这种枚举类型的变量的未来可能取值</span></span><br><span class="line"><span class="comment">//枚举常量</span></span><br><span class="line">MALE = <span class="number">3</span>,<span class="comment">//赋初值</span></span><br><span class="line">FEMALE,</span><br><span class="line">SECRET</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//4. 枚举常量</span></span><br><span class="line"><span class="comment">//可以一一列举的常量</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> MALE;</span><br><span class="line"><span class="comment">//MALE = 3;//err</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, MALE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, FEMALE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SECRET);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="字符串和转义字符"><a class="markdownIt-Anchor" href="#字符串和转义字符"></a> #字符串和转义字符</h3><blockquote><p>由双引号（Double Quote）引起来的一串字符称为字符串字面值（String Literal），或者简称字符<br>串。<br>注：字符串的结束标志是一个 \0 的转义字符。在计算字符串长度的时候 \0 是结束标志，不算作字符串内容<br>注：使用<strong>strlen</strong>计算字符串长度时会将\0一并算入</p></blockquote><table><thead><tr><th>转义字符</th><th>释义</th></tr></thead><tbody><tr><td>?</td><td>在书写连续多个问号时使用，防止他们被解析成三字母词</td></tr><tr><td>’</td><td>用于表示字符常量’</td></tr><tr><td>\“</td><td>用于表示一个字符串内部的双引号</td></tr><tr><td>\</td><td>用于表示一个反斜杠，防止它被解释为一个转义序列符。</td></tr><tr><td>\a</td><td>警告字符，蜂鸣</td></tr><tr><td>\b</td><td>退格符</td></tr><tr><td>\f</td><td>进纸符</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\ddd</td><td>ddd表示1~3个八进制的数字。 如： \130 X</td></tr><tr><td>\xdd</td><td>dd表示2个十六进制数字。 如： \x30 0</td></tr></tbody></table><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串就是一串字符 - 用双引号括起来的一串字符</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="string">"abcdef"</span>;</span><br><span class="line"><span class="string">"hello bit"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//字符数组 - 数组是一组形同类型的元素</span></span><br><span class="line"><span class="comment">//字符串在结尾的位置隐藏了一个\0的字符</span></span><br><span class="line"><span class="comment">//\0是字符串的结束标志</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char arr[] = "hello";</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = {<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>};</span><br><span class="line"></span><br><span class="line"><span class="comment">//求一下字符串的长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">strlen</span>(arr1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">strlen</span>(arr2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//int len = strlen("abc");//string length</span></span><br><span class="line"><span class="comment">//printf("%d\n", len);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印字符串</span></span><br><span class="line"><span class="comment">//printf("%s\n", arr1);</span></span><br><span class="line"><span class="comment">//printf("%s\n", arr2);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//printf("c:\test\test.c");</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ab\ncd"</span>);<span class="comment">//\+n</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//printf("(are you ok??)");//??) -- ] - 三字母词</span></span><br><span class="line"><span class="comment">//(are you ok]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//printf("%c\n", '\'');</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"\""</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"'"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"c:\\test\\test.c"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\a"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf在打印数据的时候，可以指定打印的格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, <span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"abc"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="四-ascii码"><a class="markdownIt-Anchor" href="#四-ascii码"></a> 四、ASCII码</h3><p><a href="https://c.biancheng.net/c/ascii/">ASCII码一览表</a></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//printf("%c\n", '\130');//8进制的130是十进制的多少呢？</span></span><br><span class="line"><span class="comment">//X   -- ASCII码值是88</span></span><br><span class="line"><span class="comment">//printf("%c\n", '\101');//A - 65 - 8进制是：101</span></span><br><span class="line"><span class="comment">//printf("%c\n", '\x30');//48 - '0'</span></span><br><span class="line"><span class="comment">//printf("%d\n", strlen("abc"));//3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">strlen</span>(<span class="string">"c:\test\328\test.c"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="c语言的注释"><a class="markdownIt-Anchor" href="#c语言的注释"></a> #C语言的注释</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">注释: 是用来解释复杂代码的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//int a = 10; //C++注释风格</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int b = 0;</span></span><br><span class="line"><span class="comment">*/</span>   </span><br><span class="line"><span class="comment">//C语言的注释风格 - 不支持嵌套注释</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="c语言的语句"><a class="markdownIt-Anchor" href="#c语言的语句"></a> #C语言的语句</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;<span class="comment">//输入的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"加入比特:&gt;\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"那要好好学习吗(1/0)?&gt;:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"好offer\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{ </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"卖红薯\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">比特 - <span class="number">30000</span>代码 - 找一个不错的工作</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">while</span>(line&lt;<span class="number">30000</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"写代码:%d\n"</span>, line);</span><br><span class="line">line++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (line == <span class="number">30000</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"好offer\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="函数概念"><a class="markdownIt-Anchor" href="#函数概念"></a> #函数概念</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">z = x + y;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;num1, &amp;num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//int sum = num1 + num2;</span></span><br><span class="line"><span class="comment">//函数的方式解决</span></span><br><span class="line"><span class="type">int</span> sum = Add(num1, num2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="数组概念"><a class="markdownIt-Anchor" href="#数组概念"></a> #数组概念</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//int a = 1;</span></span><br><span class="line"><span class="comment">//int b = 2;</span></span><br><span class="line"><span class="comment">//int c = 3;</span></span><br><span class="line"><span class="comment">//int d = 4;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组 - 一组相同类型的元素的集合</span></span><br><span class="line"><span class="comment">//10个整形1-10存起来</span></span><br><span class="line"><span class="comment">//数组是用下标来访问的</span></span><br><span class="line"><span class="comment">//*</span></span><br><span class="line"><span class="comment">// /</span></span><br><span class="line"><span class="comment">//int arr[10] = {1,2,3,4,5,6,7,8,9,10};</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//while (i &lt; 10)</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="comment">//printf("%d ", arr[i]);</span></span><br><span class="line"><span class="comment">//i++;</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"><span class="comment">////char ch[5] = {'a', 'b', 'c'};//不完全初始化，剩余的默认为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int a = 9 / 2;</span></span><br><span class="line"><span class="comment">//float a = 9 / 2.0;</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">9</span> % <span class="number">2</span>;<span class="comment">//% - 取模（余）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="c语言的操作符和关键字"><a class="markdownIt-Anchor" href="#c语言的操作符和关键字"></a> #c语言的操作符和关键字</h3><p>基本操作符</p><p>常见关键字<br><img src="../img/447d/1cc8c8fe87ff45d5951b158a2fff6ab5-1.png" alt=""></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//关于操作符的补充</span></span><br><span class="line"><span class="comment">//+ - * / % </span></span><br><span class="line"><span class="type">int</span> a = <span class="number">9</span> / <span class="number">2</span>;<span class="comment">//整数除法</span></span><br><span class="line"><span class="type">float</span> b = <span class="number">9</span> / <span class="number">2</span>;<span class="comment">//整数除法</span></span><br><span class="line"><span class="type">float</span> c = <span class="number">9</span> / <span class="number">2.0</span>;<span class="comment">//输出为小数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, c);<span class="comment">//正确结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移位操作符</span></span><br><span class="line"><span class="type">int</span> a1 = <span class="number">2</span>;<span class="comment">//0010,此处省略n个0...</span></span><br><span class="line"><span class="type">int</span> b1 = a1 &lt;&lt; <span class="number">1</span>;<span class="comment">//左移操作符，移动的是二进制位</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b1);<span class="comment">//0100</span></span><br><span class="line"><span class="comment">//位操作符：&amp; 按位与 | 按位或 ^ 按位异或</span></span><br><span class="line"><span class="comment">//赋值操作符 += -= *= /= ...</span></span><br><span class="line"><span class="comment">//单目操作符：!（逻辑取反） - + &amp;  </span></span><br><span class="line"><span class="comment">// *:间接访问操作符（解引用操作符）</span></span><br><span class="line"><span class="comment">//PS: a+b 有两个操作数，此处+为双目操作符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sizeof是一个操作符，不是函数</span></span><br><span class="line"><span class="keyword">sizeof</span>(a);<span class="comment">//通常使用方法</span></span><br><span class="line"><span class="keyword">sizeof</span> a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !a);<span class="comment">//非0即真</span></span><br><span class="line">a = -a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//mark:为什么a按位取反后，输出结果为-1;</span></span><br><span class="line"><span class="comment">//~</span></span><br><span class="line">    a = <span class="number">0</span>;<span class="comment">//二进制位32个bit</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ~a);<span class="comment">//结果为-1，按位取反，位即二进制位，按位取反包括符号位（bit31)，补码反码转换符号位不变</span></span><br><span class="line"><span class="comment">//数据在内存中存储的是补码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int b = (++a) + (++a) + (++a);//不建议使用的表达</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//强制类型转换</span></span><br><span class="line"><span class="comment">//int a = (int)3.14;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;&amp;逻辑与 ||逻辑或</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//条件操作符（三目操作符）? :</span></span><br><span class="line"><span class="type">int</span> a2 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b2 = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a2 &gt; b2)</span><br><span class="line">{</span><br><span class="line">max = a2;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">max = b2;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max);</span><br><span class="line"></span><br><span class="line">max = a2 &gt; b2 ? a2 : b2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max);</span><br><span class="line"></span><br><span class="line"><span class="comment">//逗号表达式</span></span><br><span class="line"><span class="comment">//逗号表达式从左向右依次计算</span></span><br><span class="line"><span class="type">int</span> a3 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b3 = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> c3 = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> d3 = (a3 = b3 + <span class="number">3</span>, b3 = c3 - a3, c3 = a3 + b3);</span><br><span class="line"><span class="comment">//整个表达式是结果是最后一个表达式的结果</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, d3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下标引用，函数调用和结构成员</span></span><br><span class="line"><span class="comment">//[] () , -&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数的时候，函数名后面的()</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hi\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//C语言的关键字</span></span><br><span class="line"><span class="comment">//1.无法自己创建</span></span><br><span class="line"><span class="comment">//2.不能作变量名</span></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"><span class="keyword">auto</span> <span class="type">int</span> a0 = <span class="number">10</span>;<span class="comment">//自动创建，自动销毁 -自动变量</span></span><br><span class="line"><span class="comment">//auto 通常省略</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//extern用来申明外部符号</span></span><br><span class="line"><span class="comment">//register寄存器关键字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//频繁被使用的数据，可以存储在寄存器中，提升效率</span></span><br><span class="line"><span class="comment">//计算机中效率最快的是寄存器</span></span><br><span class="line"><span class="comment">//现代编译器会自动将数据处理到寄存器中，所以register一般不使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> Number = <span class="number">849797</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//signed 有符号的 10 -10</span></span><br><span class="line"><span class="comment">//unsigned 无符号的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static 静态的</span></span><br><span class="line"><span class="comment">//union 联合体(共用体）</span></span><br><span class="line"><span class="comment">//void 无 空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//volatile</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//类型重命名</span></span><br><span class="line"><span class="comment">//define,include不是关键字，为预处理命令</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num11 = <span class="number">100</span>;</span><br><span class="line">u_int num2 = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="内存本质"><a class="markdownIt-Anchor" href="#内存本质"></a> #内存本质</h3><p><img src="https://img-blog.csdnimg.cn/direct/b0be605535994a9aaaa292c9d1f0eaba.png" alt=""></p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> <strong>总结：</strong></h1><h3 id="计算机原理补充"><a class="markdownIt-Anchor" href="#计算机原理补充"></a> 计算机原理补充：</h3><p><mark>变量的二进制本质上是32位bit的,最高位为符号位，用&amp;按位取反时会改变所有位</mark></p><p><mark>整数在内存中存储的是补码</mark></p><p><mark>补码 -&gt;原码转换不会变符号位</mark></p><p><mark>一个内存单元大小为一个字节，然后再分配地址</mark></p><p><mark>1byte = 8bit</mark></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C语言 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ROS2】[1]ROS2机器人系统用指令</title>
      <link href="/posts/54789/"/>
      <url>/posts/54789/</url>
      
        <content type="html"><![CDATA[<h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3><p>每次对originbot的功能包参数进行修改后都要进行编译操作，命令如下<br><code>cd /userdata/dev_ws/</code><br><code>colcon build</code></p><h3 id="小车ssh远程连接"><a class="markdownIt-Anchor" href="#小车ssh远程连接"></a> 小车ssh远程连接</h3><p><code>ssh root@192.168.238.81</code><br>在多类终端均可使用该命令</p><h3 id="建立dss连接"><a class="markdownIt-Anchor" href="#建立dss连接"></a> 建立DSS连接</h3><p><code>export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp</code><br><code>CYCLONEDDS_URI='&lt;CycloneDDS&gt;&lt;Domain&gt;&lt;General&gt;&lt;NetworkInterfaceAddress&gt;ens33&lt;/NetworkInterfaceAddress&gt;&lt;/General&gt;&lt;/Domain&gt;&lt;/CycloneDDS&gt;'</code></p><h3 id="查看网络配置"><a class="markdownIt-Anchor" href="#查看网络配置"></a> 查看网络配置</h3><p><code>ifconfig</code><br><code>sudo apt install net-tools</code><br>才能使用ifcongfig命令</p><h3 id="关机"><a class="markdownIt-Anchor" href="#关机"></a> 关机</h3><p><code>halt</code></p><p>xxxxxxxxxx&nbsp;git remote add [alias] [url]//参数[alias]为别名， [url]为远程仓库的地址bash</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> ROS2 </category>
          
          <category> Linux </category>
          
          <category> RDK X3 </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> RDK X3 </tag>
            
            <tag> Originbot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/posts/63785/"/>
      <url>/posts/63785/</url>
      
        <content type="html"><![CDATA[<h2 id="声明本站主要作为个人开发学习也欢迎各位分享知识和交流技术经验"><a class="markdownIt-Anchor" href="#声明本站主要作为个人开发学习也欢迎各位分享知识和交流技术经验"></a> 声明：本站主要作为个人开发学习，也欢迎各位分享知识和交流技术经验。</h2><h3 id="将在后续保持优化网站架构及内容更新"><a class="markdownIt-Anchor" href="#将在后续保持优化网站架构及内容更新"></a> 将在后续保持优化网站架构及内容更新</h3><h4 id="记录markdown错误写法-后面要加空格同理"><a class="markdownIt-Anchor" href="#记录markdown错误写法-后面要加空格同理"></a> 记录，markdown错误写法 ，-后面要加空格（#同理）</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tags: </span><br><span class="line">-数字电路与VHDL设计<span class="string">"</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107/"/>
      <url>/posts/16107/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
